; ModuleID = 'ls'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.pending = type { i8*, i8*, i8, %struct.pending* }
%struct.dev_ino = type { i64, i64 }
%struct.hash_table = type { %struct.hash_entry*, %struct.hash_entry*, i64, i64, i64, %struct.hash_tuning*, i64 (i8*, i64)*, i1 (i8*, i8*)*, void (i8*)*, %struct.hash_entry* }
%struct.hash_tuning = type { float, float, float, float, i8 }
%struct.hash_entry = type { i8*, %struct.hash_entry* }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, %union.anon, i64, %union.anon.0, %union.anon.1, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [0 x i8] }
%union.anon = type { i64 }
%union.anon.0 = type { i8* (i64)* }
%union.anon.1 = type { void (i8*)* }
%struct.tm_zone = type { %struct.tm_zone*, i8, [0 x i8] }
%struct.fileinfo = type { i8*, i8*, i8*, %struct.stat, i32, i32, i8*, i8, i8, i32, i8, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.dev_ino, %struct.dev_ino, %struct.dev_ino, [3 x i64] }
%struct.bin_str = type { i64, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.__sigset_t = type { [16 x i64] }
%struct.ignore_pattern = type { i8*, %struct.ignore_pattern* }
%struct.color_ext_type = type { %struct.bin_str, %struct.bin_str, %struct.color_ext_type* }
%struct.column_info = type { i8, i64, i64* }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.infomap = type { i8*, i8* }
%struct.userid = type { %union.anon.12, %struct.userid*, [0 x i8] }
%union.anon.12 = type { i32 }
%struct.winsize = type { i16, i16, i16, i16 }
%struct.__dirstream = type opaque
%struct.dirent = type { i64, i64, i16, i8, [256 x i8] }
%struct.sigaction = type { %union.anon.2, %struct.__sigset_t, i32, void ()* }
%union.anon.2 = type { void (i32)* }
%struct.__mbstate_t = type { i32, %union.anon.12 }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.F_triple = type { i8*, i64, i64 }
%struct.lconv = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.passwd = type { i8*, i8*, i32, i32, i8*, i8*, i8* }
%struct.group = type { i8*, i8*, i32, i8** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@exit_status = internal global i32 0, align 4
@print_dir_name = internal global i8 0, align 1
@pending_dirs = internal global %struct.pending* null, align 8
@current_time = internal global %struct.dev_ino zeroinitializer, align 8
@print_with_color = internal global i8 0, align 1
@color_symlink_as_referent = internal global i8 0, align 1
@format = internal global i32 0, align 4
@check_symlink_color = internal global i8 0, align 1
@dereference = internal global i32 0, align 4
@immediate_dirs = internal global i8 0, align 1
@indicator_style = internal global i32 0, align 4
@recursive = internal global i8 0, align 1
@active_dir_set = internal global %struct.hash_table* null, align 8
@dev_ino_obstack = internal global %struct.obstack zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [3 x i8] c"TZ\00", align 1
@localtz = internal global %struct.tm_zone* null, align 8
@sort_type = internal global i32 0, align 4
@print_scontext = internal global i8 0, align 1
@print_block_size = internal global i8 0, align 1
@format_needs_stat = internal global i8 0, align 1
@directories_first = internal global i8 0, align 1
@format_needs_type = internal global i8 0, align 1
@dired = internal global i8 0, align 1
@dired_obstack = internal global %struct.obstack zeroinitializer, align 8
@subdired_obstack = internal global %struct.obstack zeroinitializer, align 8
@print_hyperlink = internal global i8 0, align 1
@hostname = internal global i8* null, align 8
@cwd_n_alloc = internal global i64 0, align 8
@cwd_file = internal global %struct.fileinfo* null, align 8
@cwd_n_used = internal global i64 0, align 8
@.str.4 = private unnamed_addr constant [2 x i8] c".\00", align 1
@dired_pos = internal global i64 0, align 8
@.str.5 = private unnamed_addr constant [6 x i8] c"found\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"src/ls.c\00", align 1
@__PRETTY_FUNCTION__.main = private unnamed_addr constant [23 x i8] c"int main(int, char **)\00", align 1
@used_color = internal global i8 0, align 1
@color_indicator = internal global [24 x %struct.bin_str] [%struct.bin_str { i64 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0) }, %struct.bin_str { i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.48, i32 0, i32 0) }, %struct.bin_str zeroinitializer, %struct.bin_str { i64 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i32 0, i32 0) }, %struct.bin_str zeroinitializer, %struct.bin_str zeroinitializer, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.49, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.50, i32 0, i32 0) }, %struct.bin_str { i64 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.51, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.52, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.53, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.53, i32 0, i32 0) }, %struct.bin_str zeroinitializer, %struct.bin_str zeroinitializer, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.54, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.52, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.56, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.57, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.59, i32 0, i32 0) }, %struct.bin_str { i64 5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.60, i32 0, i32 0) }, %struct.bin_str zeroinitializer, %struct.bin_str { i64 3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.61, i32 0, i32 0) }], align 16
@.str.7 = private unnamed_addr constant [3 x i8] c"\1B[\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@stop_signal_count = internal global i32 0, align 4
@interrupt_signal = internal global i32 0, align 4
@.str.8 = private unnamed_addr constant [10 x i8] c"//DIRED//\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"//SUBDIRED//\00", align 1
@filename_quoting_options = internal global %struct.quoting_options* null, align 8
@.str.10 = private unnamed_addr constant [38 x i8] c"//DIRED-OPTIONS// --quoting-style=%s\0A\00", align 1
@.str.11 = private unnamed_addr constant [41 x i8] c"hash_get_n_entries (active_dir_set) == 0\00", align 1
@.str.62 = private unnamed_addr constant [5 x i8] c" %lu\00", align 1
@caught_signals = internal global %struct.__sigset_t zeroinitializer, align 8
@signal_setup.sig = internal constant [12 x i32] [i32 20, i32 14, i32 1, i32 2, i32 13, i32 3, i32 15, i32 29, i32 27, i32 26, i32 24, i32 25], align 16
@.str.48 = private unnamed_addr constant [2 x i8] c"m\00", align 1
@.str.45 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.49 = private unnamed_addr constant [6 x i8] c"01;34\00", align 1
@.str.50 = private unnamed_addr constant [6 x i8] c"01;36\00", align 1
@.str.51 = private unnamed_addr constant [3 x i8] c"33\00", align 1
@.str.52 = private unnamed_addr constant [6 x i8] c"01;35\00", align 1
@.str.53 = private unnamed_addr constant [6 x i8] c"01;33\00", align 1
@.str.54 = private unnamed_addr constant [6 x i8] c"01;32\00", align 1
@.str.55 = private unnamed_addr constant [6 x i8] c"37;41\00", align 1
@.str.56 = private unnamed_addr constant [6 x i8] c"30;43\00", align 1
@.str.57 = private unnamed_addr constant [6 x i8] c"37;44\00", align 1
@.str.58 = private unnamed_addr constant [6 x i8] c"34;42\00", align 1
@.str.59 = private unnamed_addr constant [6 x i8] c"30;42\00", align 1
@.str.60 = private unnamed_addr constant [6 x i8] c"30;41\00", align 1
@.str.61 = private unnamed_addr constant [4 x i8] c"\1B[K\00", align 1
@.str.203 = private unnamed_addr constant [25 x i8] c"cannot open directory %s\00", align 1
@.str.204 = private unnamed_addr constant [40 x i8] c"cannot determine device and inode of %s\00", align 1
@.str.205 = private unnamed_addr constant [41 x i8] c"%s: not listing already-listed directory\00", align 1
@print_dir.first = internal global i8 1, align 1
@.str.206 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.207 = private unnamed_addr constant [24 x i8] c"error canonicalizing %s\00", align 1
@dirname_quoting_options = internal global %struct.quoting_options* null, align 8
@.str.208 = private unnamed_addr constant [3 x i8] c":\0A\00", align 1
@.str.209 = private unnamed_addr constant [21 x i8] c"reading directory %s\00", align 1
@.str.210 = private unnamed_addr constant [21 x i8] c"closing directory %s\00", align 1
@.str.211 = private unnamed_addr constant [6 x i8] c"total\00", align 1
@human_output_opts = internal global i32 0, align 4
@output_block_size = internal global i64 0, align 8
@ignore_mode = internal global i32 0, align 4
@hide_patterns = internal global %struct.ignore_pattern* null, align 8
@ignore_patterns = internal global %struct.ignore_pattern* null, align 8
@align_variable_outer_quotes = internal global i8 0, align 1
@cwd_some_quoted = internal global i8 0, align 1
@.str.213 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.212 = private unnamed_addr constant [20 x i8] c"\1B]8;;file://%s%s%s\07\00", align 1
@.str.214 = private unnamed_addr constant [7 x i8] c"\1B]8;;\07\00", align 1
@RFC3986 = internal global [256 x i8] zeroinitializer, align 16
@.str.215 = private unnamed_addr constant [7 x i8] c"%%%02x\00", align 1
@qmark_funny_chars = internal global i8 0, align 1
@.str.47 = private unnamed_addr constant [55 x i8] c"dev_ino_size <= obstack_object_size (&dev_ino_obstack)\00", align 1
@__PRETTY_FUNCTION__.dev_ino_pop = private unnamed_addr constant [33 x i8] c"struct dev_ino dev_ino_pop(void)\00", align 1
@sorted_file = internal global i8** null, align 8
@line_length = internal global i64 0, align 8
@filetype_letter = internal constant [11 x i8] c"?pcdb-lswd\00", align 1
@any_has_acl = internal global i8 0, align 1
@time_type = internal global i32 0, align 4
@print_inode = internal global i8 0, align 1
@inode_number_width = internal global i32 0, align 4
@.str.224 = private unnamed_addr constant [5 x i8] c"%*s \00", align 1
@.str.225 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@block_size_width = internal global i32 0, align 4
@nlink_width = internal global i32 0, align 4
@.str.227 = private unnamed_addr constant [8 x i8] c"%s %*s \00", align 1
@print_owner = internal global i8 1, align 1
@print_group = internal global i8 1, align 1
@print_author = internal global i8 0, align 1
@owner_width = internal global i32 0, align 4
@group_width = internal global i32 0, align 4
@author_width = internal global i32 0, align 4
@scontext_width = internal global i32 0, align 4
@file_size_width = internal global i32 0, align 4
@major_device_number_width = internal global i32 0, align 4
@minor_device_number_width = internal global i32 0, align 4
@.str.228 = private unnamed_addr constant [10 x i8] c"%*s, %*s \00", align 1
@file_human_output_opts = internal global i32 0, align 4
@file_output_block_size = internal global i64 1, align 8
@.str.229 = private unnamed_addr constant [5 x i8] c" -> \00", align 1
@get_color_indicator.filetype_indicator = internal global [10 x i32] [i32 13, i32 8, i32 11, i32 6, i32 10, i32 5, i32 7, i32 9, i32 5, i32 6], align 16
@color_ext_list = internal global %struct.color_ext_type* null, align 8
@long_time_expected_width.width = internal global i32 -1, align 4
@use_abformat = internal global i8 0, align 1
@abformat = internal global [2 x [12 x [128 x i8]]] zeroinitializer, align 16
@long_time_format = internal global [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.166, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.167, i32 0, i32 0)], align 16
@.str.166 = private unnamed_addr constant [10 x i8] c"%b %e  %Y\00", align 1
@.str.167 = private unnamed_addr constant [12 x i8] c"%b %e %H:%M\00", align 1
@.str.230 = private unnamed_addr constant [6 x i8] c"%*lu \00", align 1
@numeric_ids = internal global i8 0, align 1
@.str.226 = private unnamed_addr constant [40 x i8] c"INT_BUFSIZE_BOUND (uintmax_t) <= buflen\00", align 1
@__PRETTY_FUNCTION__.format_inode = private unnamed_addr constant [60 x i8] c"char *format_inode(char *, size_t, const struct fileinfo *)\00", align 1
@column_info = internal global %struct.column_info* null, align 8
@tabsize = internal global i64 0, align 8
@max_idx = internal global i64 0, align 8
@init_column_info.column_info_alloc = internal global i64 0, align 8
@UNKNOWN_SECURITY_CONTEXT = internal global [2 x i8] c"?\00", align 1
@sorted_file_alloc = internal global i64 0, align 8
@failed_strcoll = internal global [1 x %struct.__jmp_buf_tag] zeroinitializer, align 16
@.str.222 = private unnamed_addr constant [26 x i8] c"sort_type != sort_version\00", align 1
@__PRETTY_FUNCTION__.sort_files = private unnamed_addr constant [22 x i8] c"void sort_files(void)\00", align 1
@sort_functions = internal constant [7 x [2 x [2 x [2 x i32 (i8*, i8*)*]]]] [[2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_name, i32 (i8*, i8*)* @xstrcoll_df_name], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_name, i32 (i8*, i8*)* @rev_xstrcoll_df_name]], [2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @strcmp_name, i32 (i8*, i8*)* @strcmp_df_name], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_strcmp_name, i32 (i8*, i8*)* @rev_strcmp_df_name]]], [2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_extension, i32 (i8*, i8*)* @xstrcoll_df_extension], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_extension, i32 (i8*, i8*)* @rev_xstrcoll_df_extension]], [2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @strcmp_extension, i32 (i8*, i8*)* @strcmp_df_extension], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_strcmp_extension, i32 (i8*, i8*)* @rev_strcmp_df_extension]]], [2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_size, i32 (i8*, i8*)* @xstrcoll_df_size], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_size, i32 (i8*, i8*)* @rev_xstrcoll_df_size]], [2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @strcmp_size, i32 (i8*, i8*)* @strcmp_df_size], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_strcmp_size, i32 (i8*, i8*)* @rev_strcmp_df_size]]], [2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_version, i32 (i8*, i8*)* @xstrcoll_df_version], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_version, i32 (i8*, i8*)* @rev_xstrcoll_df_version]], [2 x [2 x i32 (i8*, i8*)*]] zeroinitializer], [2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_mtime, i32 (i8*, i8*)* @xstrcoll_df_mtime], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_mtime, i32 (i8*, i8*)* @rev_xstrcoll_df_mtime]], [2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @strcmp_mtime, i32 (i8*, i8*)* @strcmp_df_mtime], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_strcmp_mtime, i32 (i8*, i8*)* @rev_strcmp_df_mtime]]], [2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_ctime, i32 (i8*, i8*)* @xstrcoll_df_ctime], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_ctime, i32 (i8*, i8*)* @rev_xstrcoll_df_ctime]], [2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @strcmp_ctime, i32 (i8*, i8*)* @strcmp_df_ctime], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_strcmp_ctime, i32 (i8*, i8*)* @rev_strcmp_df_ctime]]], [2 x [2 x [2 x i32 (i8*, i8*)*]]] [[2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @xstrcoll_atime, i32 (i8*, i8*)* @xstrcoll_df_atime], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_xstrcoll_atime, i32 (i8*, i8*)* @rev_xstrcoll_df_atime]], [2 x [2 x i32 (i8*, i8*)*]] [[2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @strcmp_atime, i32 (i8*, i8*)* @strcmp_df_atime], [2 x i32 (i8*, i8*)*] [i32 (i8*, i8*)* @rev_strcmp_atime, i32 (i8*, i8*)* @rev_strcmp_df_atime]]]], align 16
@sort_reverse = internal global i8 0, align 1
@.str.223 = private unnamed_addr constant [36 x i8] c"cannot compare file names %s and %s\00", align 1
@.str.216 = private unnamed_addr constant [51 x i8] c"! command_line_arg || inode == NOT_AN_INODE_NUMBER\00", align 1
@__PRETTY_FUNCTION__.gobble_file = private unnamed_addr constant [79 x i8] c"uintmax_t gobble_file(const char *, enum filetype, ino_t, _Bool, const char *)\00", align 1
@.str.217 = private unnamed_addr constant [17 x i8] c"cannot access %s\00", align 1
@.str.218 = private unnamed_addr constant [2 x i8] c"_\00", align 1
@.str.219 = private unnamed_addr constant [10 x i8] c"unlabeled\00", align 1
@.str.170 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.221 = private unnamed_addr constant [4 x i8] c"%lu\00", align 1
@.str.220 = private unnamed_addr constant [29 x i8] c"cannot read symbolic link %s\00", align 1
@file_has_acl_cache.unsupported_device = internal global i64 0, align 8
@getfilecon_cache.unsupported_device = internal global i64 0, align 8
@has_capability_cache.unsupported_device = internal global i64 0, align 8
@.str.46 = private unnamed_addr constant [3 x i8] c"00\00", align 1
@.str.172 = private unnamed_addr constant [10 x i8] c"LS_COLORS\00", align 1
@.str.173 = private unnamed_addr constant [10 x i8] c"COLORTERM\00", align 1
@.str.174 = private unnamed_addr constant [3 x i8] c"??\00", align 1
@color_buf = internal global i8* null, align 8
@indicator_name = internal constant [25 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.180, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.181, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.182, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.183, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.161, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.184, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.186, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.187, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.188, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.189, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.190, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.191, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.192, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.193, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.195, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.196, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.197, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.198, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.199, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.200, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.201, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.202, i32 0, i32 0), i8* null], align 16
@.str.175 = private unnamed_addr constant [24 x i8] c"unrecognized prefix: %s\00", align 1
@.str.176 = private unnamed_addr constant [52 x i8] c"unparsable value for LS_COLORS environment variable\00", align 1
@.str.177 = private unnamed_addr constant [7 x i8] c"target\00", align 1
@.str.180 = private unnamed_addr constant [3 x i8] c"lc\00", align 1
@.str.181 = private unnamed_addr constant [3 x i8] c"rc\00", align 1
@.str.182 = private unnamed_addr constant [3 x i8] c"ec\00", align 1
@.str.183 = private unnamed_addr constant [3 x i8] c"rs\00", align 1
@.str.161 = private unnamed_addr constant [3 x i8] c"no\00", align 1
@.str.184 = private unnamed_addr constant [3 x i8] c"fi\00", align 1
@.str.185 = private unnamed_addr constant [3 x i8] c"di\00", align 1
@.str.186 = private unnamed_addr constant [3 x i8] c"ln\00", align 1
@.str.187 = private unnamed_addr constant [3 x i8] c"pi\00", align 1
@.str.188 = private unnamed_addr constant [3 x i8] c"so\00", align 1
@.str.189 = private unnamed_addr constant [3 x i8] c"bd\00", align 1
@.str.190 = private unnamed_addr constant [3 x i8] c"cd\00", align 1
@.str.191 = private unnamed_addr constant [3 x i8] c"mi\00", align 1
@.str.192 = private unnamed_addr constant [3 x i8] c"or\00", align 1
@.str.193 = private unnamed_addr constant [3 x i8] c"ex\00", align 1
@.str.194 = private unnamed_addr constant [3 x i8] c"do\00", align 1
@.str.195 = private unnamed_addr constant [3 x i8] c"su\00", align 1
@.str.196 = private unnamed_addr constant [3 x i8] c"sg\00", align 1
@.str.197 = private unnamed_addr constant [3 x i8] c"st\00", align 1
@.str.198 = private unnamed_addr constant [3 x i8] c"ow\00", align 1
@.str.199 = private unnamed_addr constant [3 x i8] c"tw\00", align 1
@.str.200 = private unnamed_addr constant [3 x i8] c"ca\00", align 1
@.str.201 = private unnamed_addr constant [3 x i8] c"mh\00", align 1
@.str.202 = private unnamed_addr constant [3 x i8] c"cl\00", align 1
@.str.178 = private unnamed_addr constant [5 x i8] c"TERM\00", align 1
@G_line = internal constant [4164 x i8] c"# Configuration file for dircolors, a utility to help you set the\00# LS_COLORS environment variable used by GNU ls with the --color option.\00# Copyright (C) 1996-2018 Free Software Foundation, Inc.\00# Copying and distribution of this file, with or without modification,\00# are permitted provided the copyright notice and this notice are preserved.\00# The keywords COLOR, OPTIONS, and EIGHTBIT (honored by the\00# slackware version of dircolors) are recognized but ignored.\00# Below are TERM entries, which can be a glob patterns, to match\00# against the TERM environment variable to determine if it is colorizable.\00TERM Eterm\00TERM ansi\00TERM *color*\00TERM con[0-9]*x[0-9]*\00TERM cons25\00TERM console\00TERM cygwin\00TERM dtterm\00TERM gnome\00TERM hurd\00TERM jfbterm\00TERM konsole\00TERM kterm\00TERM linux\00TERM linux-c\00TERM mlterm\00TERM putty\00TERM rxvt*\00TERM screen*\00TERM st\00TERM terminator\00TERM tmux*\00TERM vt100\00TERM xterm*\00# Below are the color init strings for the basic file types. A color init\00# string consists of one or more of the following numeric codes:\00# Attribute codes:\00# 00=none 01=bold 04=underscore 05=blink 07=reverse 08=concealed\00# Text color codes:\00# 30=black 31=red 32=green 33=yellow 34=blue 35=magenta 36=cyan 37=white\00# Background color codes:\00# 40=black 41=red 42=green 43=yellow 44=blue 45=magenta 46=cyan 47=white\00#NORMAL 00 # no color code at all\00#FILE 00 # regular file: use no color at all\00RESET 0 # reset to \22normal\22 color\00DIR 01;34 # directory\00LINK 01;36 # symbolic link. (If you set this to 'target' instead of a\00 # numerical value, the color is as for the file pointed to.)\00MULTIHARDLINK 00 # regular file with more than one link\00FIFO 40;33 # pipe\00SOCK 01;35 # socket\00DOOR 01;35 # door\00BLK 40;33;01 # block device driver\00CHR 40;33;01 # character device driver\00ORPHAN 40;31;01 # symlink to nonexistent file, or non-stat'able file ...\00MISSING 00 # ... and the files they point to\00SETUID 37;41 # file that is setuid (u+s)\00SETGID 30;43 # file that is setgid (g+s)\00CAPABILITY 30;41 # file with capability\00STICKY_OTHER_WRITABLE 30;42 # dir that is sticky and other-writable (+t,o+w)\00OTHER_WRITABLE 34;42 # dir that is other-writable (o+w) and not sticky\00STICKY 37;44 # dir with the sticky bit set (+t) and not other-writable\00# This is for files with execute permission:\00EXEC 01;32\00# List any file extensions like '.gz' or '.tar' that you would like ls\00# to colorize below. Put the extension, a space, and the color init string.\00# (and any comments you want to add after a '#')\00# If you use DOS-style suffixes, you may want to uncomment the following:\00#.cmd 01;32 # executables (bright green)\00#.exe 01;32\00#.com 01;32\00#.btm 01;32\00#.bat 01;32\00# Or if you want to colorize scripts even if they do not have the\00# executable bit actually set.\00#.sh 01;32\00#.csh 01;32\00 # archives or compressed (bright red)\00.tar 01;31\00.tgz 01;31\00.arc 01;31\00.arj 01;31\00.taz 01;31\00.lha 01;31\00.lz4 01;31\00.lzh 01;31\00.lzma 01;31\00.tlz 01;31\00.txz 01;31\00.tzo 01;31\00.t7z 01;31\00.zip 01;31\00.z 01;31\00.dz 01;31\00.gz 01;31\00.lrz 01;31\00.lz 01;31\00.lzo 01;31\00.xz 01;31\00.zst 01;31\00.tzst 01;31\00.bz2 01;31\00.bz 01;31\00.tbz 01;31\00.tbz2 01;31\00.tz 01;31\00.deb 01;31\00.rpm 01;31\00.jar 01;31\00.war 01;31\00.ear 01;31\00.sar 01;31\00.rar 01;31\00.alz 01;31\00.ace 01;31\00.zoo 01;31\00.cpio 01;31\00.7z 01;31\00.rz 01;31\00.cab 01;31\00.wim 01;31\00.swm 01;31\00.dwm 01;31\00.esd 01;31\00# image formats\00.jpg 01;35\00.jpeg 01;35\00.mjpg 01;35\00.mjpeg 01;35\00.gif 01;35\00.bmp 01;35\00.pbm 01;35\00.pgm 01;35\00.ppm 01;35\00.tga 01;35\00.xbm 01;35\00.xpm 01;35\00.tif 01;35\00.tiff 01;35\00.png 01;35\00.svg 01;35\00.svgz 01;35\00.mng 01;35\00.pcx 01;35\00.mov 01;35\00.mpg 01;35\00.mpeg 01;35\00.m2v 01;35\00.mkv 01;35\00.webm 01;35\00.ogm 01;35\00.mp4 01;35\00.m4v 01;35\00.mp4v 01;35\00.vob 01;35\00.qt 01;35\00.nuv 01;35\00.wmv 01;35\00.asf 01;35\00.rm 01;35\00.rmvb 01;35\00.flc 01;35\00.avi 01;35\00.fli 01;35\00.flv 01;35\00.gl 01;35\00.dl 01;35\00.xcf 01;35\00.xwd 01;35\00.yuv 01;35\00.cgm 01;35\00.emf 01;35\00# https://wiki.xiph.org/MIME_Types_and_File_Extensions\00.ogv 01;35\00.ogx 01;35\00# audio formats\00.aac 00;36\00.au 00;36\00.flac 00;36\00.m4a 00;36\00.mid 00;36\00.midi 00;36\00.mka 00;36\00.mp3 00;36\00.mpc 00;36\00.ogg 00;36\00.ra 00;36\00.wav 00;36\00# https://wiki.xiph.org/MIME_Types_and_File_Extensions\00.oga 00;36\00.opus 00;36\00.spx 00;36\00.xspf 00;36\00", align 16
@.str.179 = private unnamed_addr constant [6 x i8] c"TERM \00", align 1
@.str.63 = private unnamed_addr constant [8 x i8] c"COLUMNS\00", align 1
@.str.64 = private unnamed_addr constant [59 x i8] c"ignoring invalid width in environment variable COLUMNS: %s\00", align 1
@.str.65 = private unnamed_addr constant [8 x i8] c"TABSIZE\00", align 1
@.str.66 = private unnamed_addr constant [62 x i8] c"ignoring invalid tab size in environment variable TABSIZE: %s\00", align 1
@.str.67 = private unnamed_addr constant [44 x i8] c"abcdfghiklmnopqrstuvw:xABCDFGHI:LNQRST:UXZ1\00", align 1
@long_options = internal constant [44 x %struct.option] [%struct.option { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.100, i32 0, i32 0), i32 0, i32* null, i32 97 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.101, i32 0, i32 0), i32 0, i32* null, i32 98 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.102, i32 0, i32 0), i32 0, i32* null, i32 100 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.103, i32 0, i32 0), i32 0, i32* null, i32 68 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.104, i32 0, i32 0), i32 0, i32* null, i32 134 }, %struct.option { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.105, i32 0, i32 0), i32 0, i32* null, i32 135 }, %struct.option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.106, i32 0, i32 0), i32 0, i32* null, i32 104 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.107, i32 0, i32 0), i32 0, i32* null, i32 105 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.108, i32 0, i32 0), i32 0, i32* null, i32 107 }, %struct.option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.109, i32 0, i32 0), i32 0, i32* null, i32 110 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.110, i32 0, i32 0), i32 0, i32* null, i32 71 }, %struct.option { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.111, i32 0, i32 0), i32 0, i32* null, i32 113 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.112, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.113, i32 0, i32 0), i32 0, i32* null, i32 115 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.114, i32 0, i32 0), i32 1, i32* null, i32 119 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.115, i32 0, i32 0), i32 0, i32* null, i32 65 }, %struct.option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.116, i32 0, i32 0), i32 0, i32* null, i32 66 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.117, i32 0, i32 0), i32 0, i32* null, i32 70 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.118, i32 0, i32 0), i32 0, i32* null, i32 132 }, %struct.option { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i32 0, i32* null, i32 141 }, %struct.option { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.120, i32 0, i32 0), i32 0, i32* null, i32 72 }, %struct.option { i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.121, i32 0, i32 0), i32 0, i32* null, i32 131 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.122, i32 0, i32 0), i32 1, i32* null, i32 136 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.123, i32 0, i32 0), i32 1, i32* null, i32 73 }, %struct.option { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.124, i32 0, i32 0), i32 1, i32* null, i32 138 }, %struct.option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.125, i32 0, i32 0), i32 0, i32* null, i32 76 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.126, i32 0, i32 0), i32 0, i32* null, i32 78 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.127, i32 0, i32 0), i32 0, i32* null, i32 81 }, %struct.option { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.128, i32 0, i32 0), i32 1, i32* null, i32 139 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.129, i32 0, i32 0), i32 0, i32* null, i32 82 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.130, i32 0, i32 0), i32 1, i32* null, i32 133 }, %struct.option { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.131, i32 0, i32 0), i32 0, i32* null, i32 140 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.132, i32 0, i32 0), i32 1, i32* null, i32 142 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.133, i32 0, i32 0), i32 1, i32* null, i32 84 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.134, i32 0, i32 0), i32 1, i32* null, i32 143 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.135, i32 0, i32 0), i32 1, i32* null, i32 144 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.136, i32 0, i32 0), i32 2, i32* null, i32 130 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.137, i32 0, i32 0), i32 2, i32* null, i32 137 }, %struct.option { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.138, i32 0, i32 0), i32 1, i32* null, i32 129 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.139, i32 0, i32 0), i32 0, i32* null, i32 90 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.140, i32 0, i32 0), i32 0, i32* null, i32 128 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.141, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.142, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16
@optarg = external dso_local global i8*, align 8
@.str.69 = private unnamed_addr constant [19 x i8] c"invalid line width\00", align 1
@.str.68 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.70 = private unnamed_addr constant [3 x i8] c"*~\00", align 1
@.str.71 = private unnamed_addr constant [4 x i8] c".*~\00", align 1
@.str.72 = private unnamed_addr constant [17 x i8] c"invalid tab size\00", align 1
@.str.73 = private unnamed_addr constant [7 x i8] c"--sort\00", align 1
@sort_args = internal constant [6 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.134, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.144, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.142, i32 0, i32 0), i8* null], align 16
@sort_types = internal constant [5 x i32] [i32 -1, i32 4, i32 2, i32 1, i32 3], align 16
@.str.74 = private unnamed_addr constant [7 x i8] c"--time\00", align 1
@time_args = internal constant [6 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.146, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.148, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.149, i32 0, i32 0), i8* null], align 16
@time_types = internal constant [5 x i32] [i32 2, i32 2, i32 2, i32 1, i32 1], align 16
@.str.75 = private unnamed_addr constant [9 x i8] c"--format\00", align 1
@format_args = internal constant [8 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.150, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.151, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.152, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.153, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.154, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.155, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.156, i32 0, i32 0), i8* null], align 16
@format_types = internal constant [7 x i32] [i32 0, i32 0, i32 4, i32 3, i32 3, i32 2, i32 1], align 16
@.str.76 = private unnamed_addr constant [9 x i8] c"full-iso\00", align 1
@.str.77 = private unnamed_addr constant [8 x i8] c"--color\00", align 1
@when_args = internal constant [10 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.157, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.159, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.160, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.161, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.162, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.163, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.164, i32 0, i32 0), i8* null], align 16
@when_types = internal constant [9 x i32] [i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 2, i32 2, i32 2], align 16
@.str.78 = private unnamed_addr constant [12 x i8] c"--hyperlink\00", align 1
@.str.79 = private unnamed_addr constant [18 x i8] c"--indicator-style\00", align 1
@indicator_style_args = internal constant [5 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.165, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.117, i32 0, i32 0), i8* null], align 16
@indicator_style_types = internal constant [4 x i32] [i32 0, i32 1, i32 2, i32 3], align 16
@.str.80 = private unnamed_addr constant [16 x i8] c"--quoting-style\00", align 1
@.str.43 = private unnamed_addr constant [4 x i8] c"dir\00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"vdir\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"ls\00", align 1
@.str.81 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.82 = private unnamed_addr constant [20 x i8] c"Richard M. Stallman\00", align 1
@.str.83 = private unnamed_addr constant [16 x i8] c"David MacKenzie\00", align 1
@.str.84 = private unnamed_addr constant [14 x i8] c"LS_BLOCK_SIZE\00", align 1
@.str.85 = private unnamed_addr constant [11 x i8] c"BLOCK_SIZE\00", align 1
@.str.86 = private unnamed_addr constant [6 x i8] c"*=>@|\00", align 1
@.str.87 = private unnamed_addr constant [11 x i8] c"TIME_STYLE\00", align 1
@.str.88 = private unnamed_addr constant [7 x i8] c"locale\00", align 1
@decode_switches.posix_prefix = internal constant [7 x i8] c"posix-\00", align 1
@optind = external dso_local global i32, align 4
@.str.89 = private unnamed_addr constant [29 x i8] c"invalid time style format %s\00", align 1
@time_style_args = internal constant [5 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.168, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.169, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88, i32 0, i32 0), i8* null], align 16
@time_style_types = internal constant [4 x i32] [i32 0, i32 1, i32 2, i32 3], align 16
@.str.90 = private unnamed_addr constant [11 x i8] c"time style\00", align 1
@.str.91 = private unnamed_addr constant [22 x i8] c"Valid arguments are:\0A\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.92 = private unnamed_addr constant [16 x i8] c"  - [posix-]%s\0A\00", align 1
@.str.93 = private unnamed_addr constant [54 x i8] c"  - +FORMAT (e.g., +%H:%M) for a 'date'-style format\0A\00", align 1
@.str.94 = private unnamed_addr constant [24 x i8] c"%Y-%m-%d %H:%M:%S.%N %z\00", align 1
@.str.95 = private unnamed_addr constant [15 x i8] c"%Y-%m-%d %H:%M\00", align 1
@.str.96 = private unnamed_addr constant [10 x i8] c"%Y-%m-%d \00", align 1
@.str.97 = private unnamed_addr constant [12 x i8] c"%m-%d %H:%M\00", align 1
@.str.171 = private unnamed_addr constant [9 x i8] c"%.*s%s%s\00", align 1
@.str.168 = private unnamed_addr constant [9 x i8] c"long-iso\00", align 1
@.str.169 = private unnamed_addr constant [4 x i8] c"iso\00", align 1
@.str.12 = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.13 = private unnamed_addr constant [33 x i8] c"Usage: %s [OPTION]... [FILE]...\0A\00", align 1
@.str.14 = private unnamed_addr constant [144 x i8] c"List information about the FILEs (the current directory by default).\0ASort entries alphabetically if none of -cftuvSUX nor --sort is specified.\0A\00", align 1
@.str.15 = private unnamed_addr constant [271 x i8] c"  -a, --all                  do not ignore entries starting with .\0A  -A, --almost-all           do not list implied . and ..\0A      --author               with -l, print the author of each file\0A  -b, --escape               print C-style escapes for nongraphic characters\0A\00", align 1
@.str.16 = private unnamed_addr constant [156 x i8] c"      --block-size=SIZE      with -l, scale sizes by SIZE when printing them;\0A                               e.g., '--block-size=M'; see SIZE format below\0A\00", align 1
@.str.17 = private unnamed_addr constant [362 x i8] c"  -B, --ignore-backups       do not list implied entries ending with ~\0A  -c                         with -lt: sort by, and show, ctime (time of last\0A                               modification of file status information);\0A                               with -l: show ctime and sort by name;\0A                               otherwise: sort by ctime, newest first\0A\00", align 1
@.str.18 = private unnamed_addr constant [367 x i8] c"  -C                         list entries by columns\0A      --color[=WHEN]         colorize the output; WHEN can be 'always' (default\0A                               if omitted), 'auto', or 'never'; more info below\0A  -d, --directory            list directories themselves, not their contents\0A  -D, --dired                generate output designed for Emacs' dired mode\0A\00", align 1
@.str.19 = private unnamed_addr constant [419 x i8] c"  -f                         do not sort, enable -aU, disable -ls --color\0A  -F, --classify             append indicator (one of */=>@|) to entries\0A      --file-type            likewise, except do not append '*'\0A      --format=WORD          across -x, commas -m, horizontal -x, long -l,\0A                               single-column -1, verbose -l, vertical -C\0A      --full-time            like -l --time-style=full-iso\0A\00", align 1
@.str.20 = private unnamed_addr constant [61 x i8] c"  -g                         like -l, but do not list owner\0A\00", align 1
@.str.21 = private unnamed_addr constant [245 x i8] c"      --group-directories-first\0A                             group directories before files;\0A                               can be augmented with a --sort option, but any\0A                               use of --sort=none (-U) disables grouping\0A\00", align 1
@.str.22 = private unnamed_addr constant [73 x i8] c"  -G, --no-group             in a long listing, don't print group names\0A\00", align 1
@.str.23 = private unnamed_addr constant [150 x i8] c"  -h, --human-readable       with -l and -s, print sizes like 1K 234M 2G etc.\0A      --si                   likewise, but use powers of 1000 not 1024\0A\00", align 1
@.str.24 = private unnamed_addr constant [422 x i8] c"  -H, --dereference-command-line\0A                             follow symbolic links listed on the command line\0A      --dereference-command-line-symlink-to-dir\0A                             follow each command line symbolic link\0A                               that points to a directory\0A      --hide=PATTERN         do not list implied entries matching shell PATTERN\0A                               (overridden by -a or -A)\0A\00", align 1
@.str.25 = private unnamed_addr constant [145 x i8] c"      --hyperlink[=WHEN]     hyperlink file names; WHEN can be 'always'\0A                               (default if omitted), 'auto', or 'never'\0A\00", align 1
@.str.26 = private unnamed_addr constant [354 x i8] c"      --indicator-style=WORD  append indicator with style WORD to entry names:\0A                               none (default), slash (-p),\0A                               file-type (--file-type), classify (-F)\0A  -i, --inode                print the index number of each file\0A  -I, --ignore=PATTERN       do not list implied entries matching shell PATTERN\0A\00", align 1
@.str.27 = private unnamed_addr constant [148 x i8] c"  -k, --kibibytes            default to 1024-byte blocks for disk usage;\0A                               used only with -s and per directory totals\0A\00", align 1
@.str.28 = private unnamed_addr constant [359 x i8] c"  -l                         use a long listing format\0A  -L, --dereference          when showing file information for a symbolic\0A                               link, show information for the file the link\0A                               references rather than for the link itself\0A  -m                         fill width with a comma separated list of entries\0A\00", align 1
@.str.29 = private unnamed_addr constant [303 x i8] c"  -n, --numeric-uid-gid      like -l, but list numeric user and group IDs\0A  -N, --literal              print entry names without quoting\0A  -o                         like -l, but do not list group information\0A  -p, --indicator-style=slash\0A                             append / indicator to directories\0A\00", align 1
@.str.30 = private unnamed_addr constant [585 x i8] c"  -q, --hide-control-chars   print ? instead of nongraphic characters\0A      --show-control-chars   show nongraphic characters as-is (the default,\0A                               unless program is 'ls' and output is a terminal)\0A  -Q, --quote-name           enclose entry names in double quotes\0A      --quoting-style=WORD   use quoting style WORD for entry names:\0A                               literal, locale, shell, shell-always,\0A                               shell-escape, shell-escape-always, c, escape\0A                               (overrides QUOTING_STYLE environment variable)\0A\00", align 1
@.str.31 = private unnamed_addr constant [197 x i8] c"  -r, --reverse              reverse order while sorting\0A  -R, --recursive            list subdirectories recursively\0A  -s, --size                 print the allocated size of each file, in blocks\0A\00", align 1
@.str.32 = private unnamed_addr constant [519 x i8] c"  -S                         sort by file size, largest first\0A      --sort=WORD            sort by WORD instead of name: none (-U), size (-S),\0A                               time (-t), version (-v), extension (-X)\0A      --time=WORD            with -l, show time as WORD instead of default\0A                               modification time: atime or access or use (-u);\0A                               ctime or status (-c); also use specified time\0A                               as sort key if --sort=time (newest first)\0A\00", align 1
@.str.33 = private unnamed_addr constant [79 x i8] c"      --time-style=TIME_STYLE  time/date format with -l; see TIME_STYLE below\0A\00", align 1
@.str.34 = private unnamed_addr constant [142 x i8] c"  -t                         sort by modification time, newest first\0A  -T, --tabsize=COLS         assume tab stops at each COLS instead of 8\0A\00", align 1
@.str.35 = private unnamed_addr constant [372 x i8] c"  -u                         with -lt: sort by, and show, access time;\0A                               with -l: show access time and sort by name;\0A                               otherwise: sort by access time, newest first\0A  -U                         do not sort; list entries in directory order\0A  -v                         natural sort of (version) numbers within text\0A\00", align 1
@.str.36 = private unnamed_addr constant [363 x i8] c"  -w, --width=COLS           set output width to COLS.  0 means no limit\0A  -x                         list entries by lines instead of by columns\0A  -X                         sort alphabetically by entry extension\0A  -Z, --context              print any security context of each file\0A  -1                         list one file per line.  Avoid '\\n' with -q or -b\0A\00", align 1
@.str.37 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.38 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.39 = private unnamed_addr constant [376 x i8] c"\0AThe TIME_STYLE argument can be full-iso, long-iso, iso, locale, or +FORMAT.\0AFORMAT is interpreted like in date(1).  If FORMAT is FORMAT1<newline>FORMAT2,\0Athen FORMAT1 applies to non-recent files and FORMAT2 to recent files.\0ATIME_STYLE prefixed with 'posix-' takes effect only outside the POSIX locale.\0AAlso the TIME_STYLE environment variable sets the default style to use.\0A\00", align 1
@.str.40 = private unnamed_addr constant [286 x i8] c"\0AUsing color to distinguish file types is disabled both by default and\0Awith --color=never.  With --color=auto, ls emits color codes only when\0Astandard output is connected to a terminal.  The LS_COLORS environment\0Avariable can change the settings.  Use the dircolors command to set it.\0A\00", align 1
@.str.41 = private unnamed_addr constant [152 x i8] c"\0AExit status:\0A 0  if OK,\0A 1  if minor problems (e.g., cannot access subdirectory),\0A 2  if serious trouble (e.g., cannot access command-line argument).\0A\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.233, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.234, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.235, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.236, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.237, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.238, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.237, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.239, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.237, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.240, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.237, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.241 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.242 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.243 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.244 = private unnamed_addr constant [70 x i8] c"Report %s translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.245 = private unnamed_addr constant [31 x i8] c"Full documentation at: <%s%s>\0A\00", align 1
@.str.246 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.247 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.233 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.234 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.235 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.236 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.237 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.238 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.239 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.240 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.232 = private unnamed_addr constant [153 x i8] c"\0AThe SIZE argument is an integer and optional unit (example: 10K is 10*1024).\0AUnits are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers of 1000).\0A\00", align 1
@.str.231 = private unnamed_addr constant [75 x i8] c"\0AMandatory arguments to long options are mandatory for short options too.\0A\00", align 1
@.str.143 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.165 = private unnamed_addr constant [6 x i8] c"slash\00", align 1
@.str.118 = private unnamed_addr constant [10 x i8] c"file-type\00", align 1
@.str.117 = private unnamed_addr constant [9 x i8] c"classify\00", align 1
@.str.157 = private unnamed_addr constant [7 x i8] c"always\00", align 1
@.str.158 = private unnamed_addr constant [4 x i8] c"yes\00", align 1
@.str.159 = private unnamed_addr constant [6 x i8] c"force\00", align 1
@.str.160 = private unnamed_addr constant [6 x i8] c"never\00", align 1
@.str.162 = private unnamed_addr constant [5 x i8] c"auto\00", align 1
@.str.163 = private unnamed_addr constant [4 x i8] c"tty\00", align 1
@.str.164 = private unnamed_addr constant [7 x i8] c"if-tty\00", align 1
@.str.150 = private unnamed_addr constant [8 x i8] c"verbose\00", align 1
@.str.151 = private unnamed_addr constant [5 x i8] c"long\00", align 1
@.str.152 = private unnamed_addr constant [7 x i8] c"commas\00", align 1
@.str.153 = private unnamed_addr constant [11 x i8] c"horizontal\00", align 1
@.str.154 = private unnamed_addr constant [7 x i8] c"across\00", align 1
@.str.155 = private unnamed_addr constant [9 x i8] c"vertical\00", align 1
@.str.156 = private unnamed_addr constant [14 x i8] c"single-column\00", align 1
@.str.145 = private unnamed_addr constant [6 x i8] c"atime\00", align 1
@.str.146 = private unnamed_addr constant [7 x i8] c"access\00", align 1
@.str.147 = private unnamed_addr constant [4 x i8] c"use\00", align 1
@.str.148 = private unnamed_addr constant [6 x i8] c"ctime\00", align 1
@.str.149 = private unnamed_addr constant [7 x i8] c"status\00", align 1
@.str.134 = private unnamed_addr constant [5 x i8] c"time\00", align 1
@.str.113 = private unnamed_addr constant [5 x i8] c"size\00", align 1
@.str.144 = private unnamed_addr constant [10 x i8] c"extension\00", align 1
@.str.142 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.100 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@.str.101 = private unnamed_addr constant [7 x i8] c"escape\00", align 1
@.str.102 = private unnamed_addr constant [10 x i8] c"directory\00", align 1
@.str.103 = private unnamed_addr constant [6 x i8] c"dired\00", align 1
@.str.104 = private unnamed_addr constant [10 x i8] c"full-time\00", align 1
@.str.105 = private unnamed_addr constant [24 x i8] c"group-directories-first\00", align 1
@.str.106 = private unnamed_addr constant [15 x i8] c"human-readable\00", align 1
@.str.107 = private unnamed_addr constant [6 x i8] c"inode\00", align 1
@.str.108 = private unnamed_addr constant [10 x i8] c"kibibytes\00", align 1
@.str.109 = private unnamed_addr constant [16 x i8] c"numeric-uid-gid\00", align 1
@.str.110 = private unnamed_addr constant [9 x i8] c"no-group\00", align 1
@.str.111 = private unnamed_addr constant [19 x i8] c"hide-control-chars\00", align 1
@.str.112 = private unnamed_addr constant [8 x i8] c"reverse\00", align 1
@.str.114 = private unnamed_addr constant [6 x i8] c"width\00", align 1
@.str.115 = private unnamed_addr constant [11 x i8] c"almost-all\00", align 1
@.str.116 = private unnamed_addr constant [15 x i8] c"ignore-backups\00", align 1
@.str.119 = private unnamed_addr constant [3 x i8] c"si\00", align 1
@.str.120 = private unnamed_addr constant [25 x i8] c"dereference-command-line\00", align 1
@.str.121 = private unnamed_addr constant [40 x i8] c"dereference-command-line-symlink-to-dir\00", align 1
@.str.122 = private unnamed_addr constant [5 x i8] c"hide\00", align 1
@.str.123 = private unnamed_addr constant [7 x i8] c"ignore\00", align 1
@.str.124 = private unnamed_addr constant [16 x i8] c"indicator-style\00", align 1
@.str.125 = private unnamed_addr constant [12 x i8] c"dereference\00", align 1
@.str.126 = private unnamed_addr constant [8 x i8] c"literal\00", align 1
@.str.127 = private unnamed_addr constant [11 x i8] c"quote-name\00", align 1
@.str.128 = private unnamed_addr constant [14 x i8] c"quoting-style\00", align 1
@.str.129 = private unnamed_addr constant [10 x i8] c"recursive\00", align 1
@.str.130 = private unnamed_addr constant [7 x i8] c"format\00", align 1
@.str.131 = private unnamed_addr constant [19 x i8] c"show-control-chars\00", align 1
@.str.132 = private unnamed_addr constant [5 x i8] c"sort\00", align 1
@.str.133 = private unnamed_addr constant [8 x i8] c"tabsize\00", align 1
@.str.135 = private unnamed_addr constant [11 x i8] c"time-style\00", align 1
@.str.136 = private unnamed_addr constant [6 x i8] c"color\00", align 1
@.str.137 = private unnamed_addr constant [10 x i8] c"hyperlink\00", align 1
@.str.138 = private unnamed_addr constant [11 x i8] c"block-size\00", align 1
@.str.139 = private unnamed_addr constant [8 x i8] c"context\00", align 1
@.str.140 = private unnamed_addr constant [7 x i8] c"author\00", align 1
@.str.141 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.98 = private unnamed_addr constant [14 x i8] c"QUOTING_STYLE\00", align 1
@.str.99 = private unnamed_addr constant [65 x i8] c"ignoring invalid value of environment variable QUOTING_STYLE: %s\00", align 1
@ls_mode = internal global i32 1, align 4
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.248, i32 0, i32 0), align 8
@.str.248 = private unnamed_addr constant [5 x i8] c"8.30\00", align 1
@.str.255 = private unnamed_addr constant [27 x i8] c"invalid argument %s for %s\00", align 1
@.str.1.256 = private unnamed_addr constant [29 x i8] c"ambiguous argument %s for %s\00", align 1
@.str.2.257 = private unnamed_addr constant [21 x i8] c"Valid arguments are:\00", align 1
@.str.3.258 = private unnamed_addr constant [8 x i8] c"\0A  - %s\00", align 1
@.str.4.259 = private unnamed_addr constant [5 x i8] c", %s\00", align 1
@argmatch_die = internal global void ()* @__argmatch_die, align 8
@.str.270 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@ignore_EPIPE = internal global i8 0, align 1
@.str.273 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8
@.str.1.274 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.275 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = internal global i32 1, align 4
@.str.296 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.1.297 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.302 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.303 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@default_tuning = internal constant %struct.hash_tuning { float 0.000000e+00, float 1.000000e+00, float 0x3FE99999A0000000, float 0x3FF69FBE80000000, i8 0 }, align 4
@.str.324 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.1.325 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.326 = private unnamed_addr constant [6 x i8] c"%.0Lf\00", align 1
@.str.3.327 = private unnamed_addr constant [6 x i8] c"%.1Lf\00", align 1
@power_letter = internal constant [9 x i8] c"\00KMGTPEZY", align 1
@.str.9.330 = private unnamed_addr constant [16 x i8] c"POSIXLY_CORRECT\00", align 1
@.str.4.331 = private unnamed_addr constant [11 x i8] c"BLOCK_SIZE\00", align 1
@.str.5.332 = private unnamed_addr constant [10 x i8] c"BLOCKSIZE\00", align 1
@block_size_args = internal constant [3 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7.334, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8.335, i32 0, i32 0), i8* null], align 16
@block_size_opts = internal constant [2 x i32] [i32 176, i32 144], align 4
@.str.6.333 = private unnamed_addr constant [18 x i8] c"eEgGkKmMpPtTyYzZ0\00", align 1
@.str.7.334 = private unnamed_addr constant [15 x i8] c"human-readable\00", align 1
@.str.8.335 = private unnamed_addr constant [3 x i8] c"si\00", align 1
@user_alist = internal global %struct.userid* null, align 8
@.str.338 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@group_alist = internal global %struct.userid* null, align 8
@.str.355 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.356 = private unnamed_addr constant [9 x i8] c"%m/%d/%y\00", align 1
@.str.2.357 = private unnamed_addr constant [9 x i8] c"%Y-%m-%d\00", align 1
@.str.3.358 = private unnamed_addr constant [6 x i8] c"%H:%M\00", align 1
@.str.4.359 = private unnamed_addr constant [9 x i8] c"%H:%M:%S\00", align 1
@.str.362 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.363 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.364 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8
@.str.10.377 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.378 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.379 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.380 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.381 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.382 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.383 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.384 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.385 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@slotvec = internal global %struct.bin_str* @slotvec0, align 8
@nslots = internal global i32 1, align 4
@slotvec0 = internal global %struct.bin_str { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8
@slot0 = internal global [256 x i8] zeroinitializer, align 16
@quote_quoting_options = internal global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8
@quoting_style_args = internal constant [11 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.400, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.401, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2.402, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.403, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4.404, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.405, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.406, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7.407, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8.408, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.409, i32 0, i32 0), i8* null], align 16
@.str.400 = private unnamed_addr constant [8 x i8] c"literal\00", align 1
@.str.1.401 = private unnamed_addr constant [6 x i8] c"shell\00", align 1
@.str.2.402 = private unnamed_addr constant [13 x i8] c"shell-always\00", align 1
@.str.3.403 = private unnamed_addr constant [13 x i8] c"shell-escape\00", align 1
@.str.4.404 = private unnamed_addr constant [20 x i8] c"shell-escape-always\00", align 1
@.str.5.405 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.6.406 = private unnamed_addr constant [8 x i8] c"c-maybe\00", align 1
@.str.7.407 = private unnamed_addr constant [7 x i8] c"escape\00", align 1
@.str.8.408 = private unnamed_addr constant [7 x i8] c"locale\00", align 1
@.str.9.409 = private unnamed_addr constant [8 x i8] c"clocale\00", align 1
@quoting_style_vals = internal constant [10 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9], align 16
@.str.426 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.427 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.428 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.429 = private unnamed_addr constant [204 x i8] c"\0ALicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\0A\00", align 1
@.str.4.430 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.5.431 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.6.432 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.7.433 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.8.434 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.9.435 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.10.436 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.11.437 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.12.438 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.13.439 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16
@.str.1.460 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.461 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.464 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.471 = private unnamed_addr constant [38 x i8] c"0 <= strtol_base && strtol_base <= 36\00", align 1
@.str.1.472 = private unnamed_addr constant [16 x i8] c"./lib/xstrtol.c\00", align 1
@__PRETTY_FUNCTION__.xstrtoul = private unnamed_addr constant [81 x i8] c"strtol_error xstrtoul(const char *, char **, int, unsigned long *, const char *)\00", align 1
@.str.475 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.1.476 = private unnamed_addr constant [27 x i8] c"invalid %s%s argument '%s'\00", align 1
@.str.2.477 = private unnamed_addr constant [37 x i8] c"invalid suffix in %s%s argument '%s'\00", align 1
@.str.3.478 = private unnamed_addr constant [29 x i8] c"%s%s argument '%s' too large\00", align 1
@.str.481 = private unnamed_addr constant [38 x i8] c"0 <= strtol_base && strtol_base <= 36\00", align 1
@.str.1.482 = private unnamed_addr constant [16 x i8] c"./lib/xstrtol.c\00", align 1
@__PRETTY_FUNCTION__.xstrtoumax = private unnamed_addr constant [79 x i8] c"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\00", align 1
@obstack_alloc_failed_handler = dso_local global void ()* @print_and_abort, align 8
@.str.1.489 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.490 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.497 = private unnamed_addr constant [3 x i8] c"TZ\00", align 1
@.str.1.498 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.511 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.512 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.pending*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.dev_ino, align 8
  %10 = alloca %struct.dev_ino*, align 8
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i8**, i8*** %5, align 8
  %13 = getelementptr inbounds i8*, i8** %12, i64 0
  %14 = load i8*, i8** %13, align 8
  call void @set_program_name(i8* %14)
  %15 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)) #14
  %16 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)) #14
  %17 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0)) #14
  call void @initialize_exit_failure(i32 2)
  %18 = call i32 @atexit(void ()* @close_stdout) #14
  store i32 0, i32* @exit_status, align 4
  store i8 1, i8* @print_dir_name, align 1
  store %struct.pending* null, %struct.pending** @pending_dirs, align 8
  store i64 -9223372036854775808, i64* getelementptr inbounds (%struct.dev_ino, %struct.dev_ino* @current_time, i32 0, i32 0), align 8
  store i64 -1, i64* getelementptr inbounds (%struct.dev_ino, %struct.dev_ino* @current_time, i32 0, i32 1), align 8
  %19 = load i32, i32* %4, align 4
  %20 = load i8**, i8*** %5, align 8
  %21 = call i32 @decode_switches(i32 %19, i8** %20)
  store i32 %21, i32* %6, align 4
  %22 = load i8, i8* @print_with_color, align 1
  %23 = trunc i8 %22 to i1
  br i1 %23, label %24, label %25

24:                                               ; preds = %2
  call void @parse_ls_color()
  br label %25

25:                                               ; preds = %24, %2
  %26 = load i8, i8* @print_with_color, align 1
  %27 = trunc i8 %26 to i1
  br i1 %27, label %28, label %42

28:                                               ; preds = %25
  %29 = call zeroext i1 @is_colored(i32 13)
  br i1 %29, label %40, label %30

30:                                               ; preds = %28
  %31 = call zeroext i1 @is_colored(i32 14)
  br i1 %31, label %32, label %35

32:                                               ; preds = %30
  %33 = load i8, i8* @color_symlink_as_referent, align 1
  %34 = trunc i8 %33 to i1
  br i1 %34, label %40, label %35

35:                                               ; preds = %32, %30
  %36 = call zeroext i1 @is_colored(i32 12)
  br i1 %36, label %37, label %41

37:                                               ; preds = %35
  %38 = load i32, i32* @format, align 4
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37, %32, %28
  store i8 1, i8* @check_symlink_color, align 1
  br label %41

41:                                               ; preds = %40, %37, %35
  br label %42

42:                                               ; preds = %41, %25
  %43 = load i32, i32* @dereference, align 4
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %58

45:                                               ; preds = %42
  %46 = load i8, i8* @immediate_dirs, align 1
  %47 = trunc i8 %46 to i1
  br i1 %47, label %54, label %48

48:                                               ; preds = %45
  %49 = load i32, i32* @indicator_style, align 4
  %50 = icmp eq i32 %49, 3
  br i1 %50, label %54, label %51

51:                                               ; preds = %48
  %52 = load i32, i32* @format, align 4
  %53 = icmp eq i32 %52, 0
  br label %54

54:                                               ; preds = %51, %48, %45
  %55 = phi i1 [ true, %48 ], [ true, %45 ], [ %53, %51 ]
  %56 = zext i1 %55 to i64
  %57 = select i1 %55, i32 2, i32 4
  store i32 %57, i32* @dereference, align 4
  br label %58

58:                                               ; preds = %54, %42
  %59 = load i8, i8* @recursive, align 1
  %60 = trunc i8 %59 to i1
  br i1 %60, label %61, label %68

61:                                               ; preds = %58
  %62 = call %struct.hash_table* @hash_initialize(i64 30, %struct.hash_tuning* null, i64 (i8*, i64)* @dev_ino_hash, i1 (i8*, i8*)* @dev_ino_compare, void (i8*)* @dev_ino_free)
  store %struct.hash_table* %62, %struct.hash_table** @active_dir_set, align 8
  %63 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8
  %64 = icmp eq %struct.hash_table* %63, null
  br i1 %64, label %65, label %66

65:                                               ; preds = %61
  call void @xalloc_die() #15
  unreachable

66:                                               ; preds = %61
  %67 = call i32 @_obstack_begin(%struct.obstack* @dev_ino_obstack, i64 0, i64 0, i8* (i64)* @malloc, void (i8*)* @free)
  br label %68

68:                                               ; preds = %66, %58
  %69 = call i8* @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)) #14
  %70 = call %struct.tm_zone* @tzalloc(i8* %69)
  store %struct.tm_zone* %70, %struct.tm_zone** @localtz, align 8
  %71 = load i32, i32* @sort_type, align 4
  %72 = icmp eq i32 %71, 4
  br i1 %72, label %85, label %73

73:                                               ; preds = %68
  %74 = load i32, i32* @sort_type, align 4
  %75 = icmp eq i32 %74, 2
  br i1 %75, label %85, label %76

76:                                               ; preds = %73
  %77 = load i32, i32* @format, align 4
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %85, label %79

79:                                               ; preds = %76
  %80 = load i8, i8* @print_scontext, align 1
  %81 = trunc i8 %80 to i1
  br i1 %81, label %85, label %82

82:                                               ; preds = %79
  %83 = load i8, i8* @print_block_size, align 1
  %84 = trunc i8 %83 to i1
  br label %85

85:                                               ; preds = %82, %79, %76, %73, %68
  %86 = phi i1 [ true, %79 ], [ true, %76 ], [ true, %73 ], [ true, %68 ], [ %84, %82 ]
  %87 = zext i1 %86 to i8
  store i8 %87, i8* @format_needs_stat, align 1
  %88 = load i8, i8* @format_needs_stat, align 1
  %89 = trunc i8 %88 to i1
  br i1 %89, label %104, label %90

90:                                               ; preds = %85
  %91 = load i8, i8* @recursive, align 1
  %92 = trunc i8 %91 to i1
  br i1 %92, label %102, label %93

93:                                               ; preds = %90
  %94 = load i8, i8* @print_with_color, align 1
  %95 = trunc i8 %94 to i1
  br i1 %95, label %102, label %96

96:                                               ; preds = %93
  %97 = load i32, i32* @indicator_style, align 4
  %98 = icmp ne i32 %97, 0
  br i1 %98, label %102, label %99

99:                                               ; preds = %96
  %100 = load i8, i8* @directories_first, align 1
  %101 = trunc i8 %100 to i1
  br label %102

102:                                              ; preds = %99, %96, %93, %90
  %103 = phi i1 [ true, %96 ], [ true, %93 ], [ true, %90 ], [ %101, %99 ]
  br label %104

104:                                              ; preds = %102, %85
  %105 = phi i1 [ false, %85 ], [ %103, %102 ]
  %106 = zext i1 %105 to i8
  store i8 %106, i8* @format_needs_type, align 1
  %107 = load i8, i8* @dired, align 1
  %108 = trunc i8 %107 to i1
  br i1 %108, label %109, label %112

109:                                              ; preds = %104
  %110 = call i32 @_obstack_begin(%struct.obstack* @dired_obstack, i64 0, i64 0, i8* (i64)* @malloc, void (i8*)* @free)
  %111 = call i32 @_obstack_begin(%struct.obstack* @subdired_obstack, i64 0, i64 0, i8* (i64)* @malloc, void (i8*)* @free)
  br label %112

112:                                              ; preds = %109, %104
  %113 = load i8, i8* @print_hyperlink, align 1
  %114 = trunc i8 %113 to i1
  br i1 %114, label %115, label %121

115:                                              ; preds = %112
  call void @file_escape_init()
  %116 = call i8* @xgethostname()
  store i8* %116, i8** @hostname, align 8
  %117 = load i8*, i8** @hostname, align 8
  %118 = icmp ne i8* %117, null
  br i1 %118, label %120, label %119

119:                                              ; preds = %115
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8** @hostname, align 8
  br label %120

120:                                              ; preds = %119, %115
  br label %121

121:                                              ; preds = %120, %112
  store i64 100, i64* @cwd_n_alloc, align 8
  %122 = load i64, i64* @cwd_n_alloc, align 8
  %123 = call noalias i8* @xnmalloc(i64 %122, i64 200)
  %124 = bitcast i8* %123 to %struct.fileinfo*
  store %struct.fileinfo* %124, %struct.fileinfo** @cwd_file, align 8
  store i64 0, i64* @cwd_n_used, align 8
  call void @clear_files()
  %125 = load i32, i32* %4, align 4
  %126 = load i32, i32* %6, align 4
  %127 = sub nsw i32 %125, %126
  store i32 %127, i32* %8, align 4
  %128 = load i32, i32* %8, align 4
  %129 = icmp sle i32 %128, 0
  br i1 %129, label %130, label %137

130:                                              ; preds = %121
  %131 = load i8, i8* @immediate_dirs, align 1
  %132 = trunc i8 %131 to i1
  br i1 %132, label %133, label %135

133:                                              ; preds = %130
  %134 = call i64 @gobble_file(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i32 3, i64 0, i1 zeroext true, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  br label %136

135:                                              ; preds = %130
  call void @queue_directory(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i8* null, i1 zeroext true)
  br label %136

136:                                              ; preds = %135, %133
  br label %151

137:                                              ; preds = %121
  br label %138

138:                                              ; preds = %146, %137
  %139 = load i8**, i8*** %5, align 8
  %140 = load i32, i32* %6, align 4
  %141 = add nsw i32 %140, 1
  store i32 %141, i32* %6, align 4
  %142 = sext i32 %140 to i64
  %143 = getelementptr inbounds i8*, i8** %139, i64 %142
  %144 = load i8*, i8** %143, align 8
  %145 = call i64 @gobble_file(i8* %144, i32 0, i64 0, i1 zeroext true, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  br label %146

146:                                              ; preds = %138
  %147 = load i32, i32* %6, align 4
  %148 = load i32, i32* %4, align 4
  %149 = icmp slt i32 %147, %148
  br i1 %149, label %138, label %150, !llvm.loop !5

150:                                              ; preds = %146
  br label %151

151:                                              ; preds = %150, %136
  %152 = load i64, i64* @cwd_n_used, align 8
  %153 = icmp ne i64 %152, 0
  br i1 %153, label %154, label %159

154:                                              ; preds = %151
  call void @sort_files()
  %155 = load i8, i8* @immediate_dirs, align 1
  %156 = trunc i8 %155 to i1
  br i1 %156, label %158, label %157

157:                                              ; preds = %154
  call void @extract_dirs_from_files(i8* null, i1 zeroext true)
  br label %158

158:                                              ; preds = %157, %154
  br label %159

159:                                              ; preds = %158, %151
  %160 = load i64, i64* @cwd_n_used, align 8
  %161 = icmp ne i64 %160, 0
  br i1 %161, label %162, label %172

162:                                              ; preds = %159
  call void @print_current_files()
  %163 = load %struct.pending*, %struct.pending** @pending_dirs, align 8
  %164 = icmp ne %struct.pending* %163, null
  br i1 %164, label %165, label %171

165:                                              ; preds = %162
  br label %166

166:                                              ; preds = %165
  %167 = call i32 @putchar_unlocked(i32 10)
  %168 = load i64, i64* @dired_pos, align 8
  %169 = add i64 %168, 1
  store i64 %169, i64* @dired_pos, align 8
  br label %170

170:                                              ; preds = %166
  br label %171

171:                                              ; preds = %170, %162
  br label %185

172:                                              ; preds = %159
  %173 = load i32, i32* %8, align 4
  %174 = icmp sle i32 %173, 1
  br i1 %174, label %175, label %184

175:                                              ; preds = %172
  %176 = load %struct.pending*, %struct.pending** @pending_dirs, align 8
  %177 = icmp ne %struct.pending* %176, null
  br i1 %177, label %178, label %184

178:                                              ; preds = %175
  %179 = load %struct.pending*, %struct.pending** @pending_dirs, align 8
  %180 = getelementptr inbounds %struct.pending, %struct.pending* %179, i32 0, i32 3
  %181 = load %struct.pending*, %struct.pending** %180, align 8
  %182 = icmp eq %struct.pending* %181, null
  br i1 %182, label %183, label %184

183:                                              ; preds = %178
  store i8 0, i8* @print_dir_name, align 1
  br label %184

184:                                              ; preds = %183, %178, %175, %172
  br label %185

185:                                              ; preds = %184, %171
  br label %186

186:                                              ; preds = %221, %216, %185
  %187 = load %struct.pending*, %struct.pending** @pending_dirs, align 8
  %188 = icmp ne %struct.pending* %187, null
  br i1 %188, label %189, label %233

189:                                              ; preds = %186
  %190 = load %struct.pending*, %struct.pending** @pending_dirs, align 8
  store %struct.pending* %190, %struct.pending** %7, align 8
  %191 = load %struct.pending*, %struct.pending** @pending_dirs, align 8
  %192 = getelementptr inbounds %struct.pending, %struct.pending* %191, i32 0, i32 3
  %193 = load %struct.pending*, %struct.pending** %192, align 8
  store %struct.pending* %193, %struct.pending** @pending_dirs, align 8
  %194 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8
  %195 = icmp ne %struct.hash_table* %194, null
  br i1 %195, label %196, label %221

196:                                              ; preds = %189
  %197 = load %struct.pending*, %struct.pending** %7, align 8
  %198 = getelementptr inbounds %struct.pending, %struct.pending* %197, i32 0, i32 0
  %199 = load i8*, i8** %198, align 8
  %200 = icmp eq i8* %199, null
  br i1 %200, label %201, label %220

201:                                              ; preds = %196
  %202 = call { i64, i64 } @dev_ino_pop()
  %203 = bitcast %struct.dev_ino* %9 to { i64, i64 }*
  %204 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %203, i32 0, i32 0
  %205 = extractvalue { i64, i64 } %202, 0
  store i64 %205, i64* %204, align 8
  %206 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %203, i32 0, i32 1
  %207 = extractvalue { i64, i64 } %202, 1
  store i64 %207, i64* %206, align 8
  %208 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8
  %209 = bitcast %struct.dev_ino* %9 to i8*
  %210 = call i8* @hash_delete(%struct.hash_table* %208, i8* %209)
  %211 = bitcast i8* %210 to %struct.dev_ino*
  store %struct.dev_ino* %211, %struct.dev_ino** %10, align 8
  %212 = load %struct.dev_ino*, %struct.dev_ino** %10, align 8
  %213 = icmp ne %struct.dev_ino* %212, null
  br i1 %213, label %214, label %215

214:                                              ; preds = %201
  br label %216

215:                                              ; preds = %201
  call void @__assert_fail(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 1596, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__PRETTY_FUNCTION__.main, i64 0, i64 0)) #16
  unreachable

216:                                              ; preds = %214
  %217 = load %struct.dev_ino*, %struct.dev_ino** %10, align 8
  %218 = bitcast %struct.dev_ino* %217 to i8*
  call void @dev_ino_free(i8* %218)
  %219 = load %struct.pending*, %struct.pending** %7, align 8
  call void @free_pending_ent(%struct.pending* %219)
  br label %186, !llvm.loop !7

220:                                              ; preds = %196
  br label %221

221:                                              ; preds = %220, %189
  %222 = load %struct.pending*, %struct.pending** %7, align 8
  %223 = getelementptr inbounds %struct.pending, %struct.pending* %222, i32 0, i32 0
  %224 = load i8*, i8** %223, align 8
  %225 = load %struct.pending*, %struct.pending** %7, align 8
  %226 = getelementptr inbounds %struct.pending, %struct.pending* %225, i32 0, i32 1
  %227 = load i8*, i8** %226, align 8
  %228 = load %struct.pending*, %struct.pending** %7, align 8
  %229 = getelementptr inbounds %struct.pending, %struct.pending* %228, i32 0, i32 2
  %230 = load i8, i8* %229, align 8
  %231 = trunc i8 %230 to i1
  call void @print_dir(i8* %224, i8* %227, i1 zeroext %231)
  %232 = load %struct.pending*, %struct.pending** %7, align 8
  call void @free_pending_ent(%struct.pending* %232)
  store i8 1, i8* @print_dir_name, align 1
  br label %186, !llvm.loop !7

233:                                              ; preds = %186
  %234 = load i8, i8* @print_with_color, align 1
  %235 = trunc i8 %234 to i1
  br i1 %235, label %236, label %276

236:                                              ; preds = %233
  %237 = load i8, i8* @used_color, align 1
  %238 = trunc i8 %237 to i1
  br i1 %238, label %239, label %276

239:                                              ; preds = %236
  %240 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 0), align 16
  %241 = icmp eq i64 %240, 2
  br i1 %241, label %242, label %255

242:                                              ; preds = %239
  %243 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0, i32 1), align 8
  %244 = call i32 @memcmp(i8* %243, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i64 2) #17
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %246, label %255

246:                                              ; preds = %242
  %247 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 0), align 16
  %248 = icmp eq i64 %247, 1
  br i1 %248, label %249, label %255

249:                                              ; preds = %246
  %250 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1, i32 1), align 8
  %251 = getelementptr inbounds i8, i8* %250, i64 0
  %252 = load i8, i8* %251, align 1
  %253 = sext i8 %252 to i32
  %254 = icmp eq i32 %253, 109
  br i1 %254, label %256, label %255

255:                                              ; preds = %249, %246, %242, %239
  call void @restore_default_color()
  br label %256

256:                                              ; preds = %255, %249
  %257 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %258 = call i32 @fflush_unlocked(%struct._IO_FILE* %257)
  call void @signal_restore()
  %259 = load volatile i32, i32* @stop_signal_count, align 4
  store i32 %259, i32* %11, align 4
  br label %260

260:                                              ; preds = %265, %256
  %261 = load i32, i32* %11, align 4
  %262 = icmp ne i32 %261, 0
  br i1 %262, label %263, label %268

263:                                              ; preds = %260
  %264 = call i32 @raise(i32 19) #14
  br label %265

265:                                              ; preds = %263
  %266 = load i32, i32* %11, align 4
  %267 = add nsw i32 %266, -1
  store i32 %267, i32* %11, align 4
  br label %260, !llvm.loop !8

268:                                              ; preds = %260
  %269 = load volatile i32, i32* @interrupt_signal, align 4
  store i32 %269, i32* %11, align 4
  %270 = load i32, i32* %11, align 4
  %271 = icmp ne i32 %270, 0
  br i1 %271, label %272, label %275

272:                                              ; preds = %268
  %273 = load i32, i32* %11, align 4
  %274 = call i32 @raise(i32 %273) #14
  br label %275

275:                                              ; preds = %272, %268
  br label %276

276:                                              ; preds = %275, %236, %233
  %277 = load i8, i8* @dired, align 1
  %278 = trunc i8 %277 to i1
  br i1 %278, label %279, label %286

279:                                              ; preds = %276
  call void @dired_dump_obstack(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0), %struct.obstack* @dired_obstack)
  call void @dired_dump_obstack(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), %struct.obstack* @subdired_obstack)
  %280 = load %struct.quoting_options*, %struct.quoting_options** @filename_quoting_options, align 8
  %281 = call i32 @get_quoting_style(%struct.quoting_options* %280)
  %282 = zext i32 %281 to i64
  %283 = getelementptr inbounds [0 x i8*], [0 x i8*]* bitcast ([11 x i8*]* @quoting_style_args to [0 x i8*]*), i64 0, i64 %282
  %284 = load i8*, i8** %283, align 8
  %285 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10, i64 0, i64 0), i8* %284)
  br label %286

286:                                              ; preds = %279, %276
  %287 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8
  %288 = icmp ne %struct.hash_table* %287, null
  br i1 %288, label %289, label %297

289:                                              ; preds = %286
  %290 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8
  %291 = call i64 @hash_get_n_entries(%struct.hash_table* %290) #17
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %293, label %294

293:                                              ; preds = %289
  br label %295

294:                                              ; preds = %289
  call void @__assert_fail(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 1648, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @__PRETTY_FUNCTION__.main, i64 0, i64 0)) #16
  unreachable

295:                                              ; preds = %293
  %296 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8
  call void @hash_free(%struct.hash_table* %296)
  br label %297

297:                                              ; preds = %295, %286
  %298 = load i32, i32* @exit_status, align 4
  ret i32 %298
}

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #1

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #1

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @initialize_exit_failure(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = icmp ne i32 %3, 1
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = load i32, i32* %2, align 4
  store volatile i32 %6, i32* @exit_failure, align 4
  br label %7

7:                                                ; preds = %5, %1
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @decode_switches(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8, align 1
  %8 = alloca i8, align 1
  %9 = alloca i8*, align 8
  %10 = alloca %struct.winsize, align 2
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.ignore_pattern*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i8*, align 8
  %20 = alloca i32, align 4
  %21 = alloca i8*, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i8*, align 8
  %24 = alloca i8*, align 8
  %25 = alloca i64, align 8
  %26 = alloca i8**, align 8
  %27 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %6, align 8
  store i8 0, i8* %7, align 1
  store i8 0, i8* %8, align 1
  store i8 0, i8* @qmark_funny_chars, align 1
  %28 = load i32, i32* @ls_mode, align 4
  switch i32 %28, label %37 [
    i32 2, label %29
    i32 3, label %30
    i32 1, label %31
  ]

29:                                               ; preds = %2
  store i32 2, i32* @format, align 4
  call void @set_quoting_style(%struct.quoting_options* null, i32 7)
  br label %38

30:                                               ; preds = %2
  store i32 0, i32* @format, align 4
  call void @set_quoting_style(%struct.quoting_options* null, i32 7)
  br label %38

31:                                               ; preds = %2
  %32 = call i32 @isatty(i32 1) #14
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  store i32 2, i32* @format, align 4
  call void @set_quoting_style(%struct.quoting_options* null, i32 3)
  store i8 1, i8* @qmark_funny_chars, align 1
  br label %36

35:                                               ; preds = %31
  store i32 1, i32* @format, align 4
  store i8 0, i8* @qmark_funny_chars, align 1
  br label %36

36:                                               ; preds = %35, %34
  br label %38

37:                                               ; preds = %2
  call void @abort() #16
  unreachable

38:                                               ; preds = %36, %30, %29
  store i32 0, i32* @time_type, align 4
  store i32 0, i32* @sort_type, align 4
  store i8 0, i8* @sort_reverse, align 1
  store i8 0, i8* @numeric_ids, align 1
  store i8 0, i8* @print_block_size, align 1
  store i32 0, i32* @indicator_style, align 4
  store i8 0, i8* @print_inode, align 1
  store i32 1, i32* @dereference, align 4
  store i8 0, i8* @recursive, align 1
  store i8 0, i8* @immediate_dirs, align 1
  store i32 0, i32* @ignore_mode, align 4
  store %struct.ignore_pattern* null, %struct.ignore_pattern** @ignore_patterns, align 8
  store %struct.ignore_pattern* null, %struct.ignore_pattern** @hide_patterns, align 8
  store i8 0, i8* @print_scontext, align 1
  call void @getenv_quoting_style()
  store i64 80, i64* @line_length, align 8
  %39 = call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.63, i64 0, i64 0)) #14
  store i8* %39, i8** %9, align 8
  %40 = load i8*, i8** %9, align 8
  %41 = icmp ne i8* %40, null
  br i1 %41, label %42, label %54

42:                                               ; preds = %38
  %43 = load i8*, i8** %9, align 8
  %44 = load i8, i8* %43, align 1
  %45 = sext i8 %44 to i32
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %54

47:                                               ; preds = %42
  %48 = load i8*, i8** %9, align 8
  %49 = call zeroext i1 @set_line_length(i8* %48)
  br i1 %49, label %54, label %50

50:                                               ; preds = %47
  %51 = call i8* @gettext(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.64, i64 0, i64 0)) #14
  %52 = load i8*, i8** %9, align 8
  %53 = call i8* @quote(i8* %52)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %51, i8* %53)
  br label %54

54:                                               ; preds = %50, %47, %42, %38
  %55 = call i32 (i32, i64, ...) @ioctl(i32 1, i64 21523, %struct.winsize* %10) #14
  %56 = icmp ne i32 %55, -1
  br i1 %56, label %57, label %74

57:                                               ; preds = %54
  %58 = getelementptr inbounds %struct.winsize, %struct.winsize* %10, i32 0, i32 1
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = icmp slt i32 0, %60
  br i1 %61, label %62, label %74

62:                                               ; preds = %57
  %63 = getelementptr inbounds %struct.winsize, %struct.winsize* %10, i32 0, i32 1
  %64 = load i16, i16* %63, align 2
  %65 = zext i16 %64 to i64
  %66 = getelementptr inbounds %struct.winsize, %struct.winsize* %10, i32 0, i32 1
  %67 = load i16, i16* %66, align 2
  %68 = zext i16 %67 to i64
  %69 = icmp eq i64 %65, %68
  br i1 %69, label %70, label %74

70:                                               ; preds = %62
  %71 = getelementptr inbounds %struct.winsize, %struct.winsize* %10, i32 0, i32 1
  %72 = load i16, i16* %71, align 2
  %73 = zext i16 %72 to i64
  store i64 %73, i64* @line_length, align 8
  br label %74

74:                                               ; preds = %70, %62, %57, %54
  %75 = call i8* @getenv(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.65, i64 0, i64 0)) #14
  store i8* %75, i8** %11, align 8
  store i64 8, i64* @tabsize, align 8
  %76 = load i8*, i8** %11, align 8
  %77 = icmp ne i8* %76, null
  br i1 %77, label %78, label %92

78:                                               ; preds = %74
  %79 = load i8*, i8** %11, align 8
  %80 = call i32 @xstrtoul(i8* %79, i8** null, i32 0, i64* %12, i8* null)
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %87

82:                                               ; preds = %78
  %83 = load i64, i64* %12, align 8
  %84 = icmp ule i64 %83, -1
  br i1 %84, label %85, label %87

85:                                               ; preds = %82
  %86 = load i64, i64* %12, align 8
  store i64 %86, i64* @tabsize, align 8
  br label %91

87:                                               ; preds = %82, %78
  %88 = call i8* @gettext(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.66, i64 0, i64 0)) #14
  %89 = load i8*, i8** %11, align 8
  %90 = call i8* @quote(i8* %89)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %88, i8* %90)
  br label %91

91:                                               ; preds = %87, %85
  br label %92

92:                                               ; preds = %91, %74
  br label %93

93:                                               ; preds = %294, %92
  store i32 -1, i32* %13, align 4
  %94 = load i32, i32* %4, align 4
  %95 = load i8**, i8*** %5, align 8
  %96 = call i32 @getopt_long(i32 %94, i8** %95, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.67, i64 0, i64 0), %struct.option* getelementptr inbounds ([44 x %struct.option], [44 x %struct.option]* @long_options, i64 0, i64 0), i32* %13) #14
  store i32 %96, i32* %14, align 4
  %97 = load i32, i32* %14, align 4
  %98 = icmp eq i32 %97, -1
  br i1 %98, label %99, label %100

99:                                               ; preds = %93
  br label %295

100:                                              ; preds = %93
  %101 = load i32, i32* %14, align 4
  switch i32 %101, label %293 [
    i32 97, label %102
    i32 98, label %103
    i32 99, label %104
    i32 100, label %105
    i32 102, label %106
    i32 132, label %115
    i32 103, label %116
    i32 104, label %117
    i32 105, label %118
    i32 107, label %119
    i32 108, label %120
    i32 109, label %121
    i32 110, label %122
    i32 111, label %123
    i32 112, label %124
    i32 113, label %125
    i32 114, label %126
    i32 115, label %127
    i32 116, label %128
    i32 117, label %129
    i32 118, label %130
    i32 119, label %131
    i32 120, label %139
    i32 65, label %140
    i32 66, label %141
    i32 67, label %142
    i32 68, label %143
    i32 70, label %144
    i32 71, label %145
    i32 72, label %146
    i32 131, label %147
    i32 73, label %148
    i32 76, label %150
    i32 78, label %151
    i32 81, label %152
    i32 82, label %153
    i32 83, label %154
    i32 84, label %155
    i32 85, label %159
    i32 88, label %160
    i32 49, label %161
    i32 128, label %166
    i32 136, label %167
    i32 142, label %177
    i32 135, label %183
    i32 143, label %184
    i32 133, label %190
    i32 134, label %196
    i32 130, label %198
    i32 137, label %226
    i32 138, label %250
    i32 139, label %256
    i32 144, label %262
    i32 140, label %264
    i32 129, label %265
    i32 141, label %277
    i32 90, label %278
    i32 -130, label %279
    i32 -131, label %280
  ]

102:                                              ; preds = %100
  store i32 2, i32* @ignore_mode, align 4
  br label %294

103:                                              ; preds = %100
  call void @set_quoting_style(%struct.quoting_options* null, i32 7)
  br label %294

104:                                              ; preds = %100
  store i32 1, i32* @time_type, align 4
  br label %294

105:                                              ; preds = %100
  store i8 1, i8* @immediate_dirs, align 1
  br label %294

106:                                              ; preds = %100
  store i32 2, i32* @ignore_mode, align 4
  store i32 -1, i32* @sort_type, align 4
  store i8 1, i8* %7, align 1
  %107 = load i32, i32* @format, align 4
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %114

109:                                              ; preds = %106
  %110 = call i32 @isatty(i32 1) #14
  %111 = icmp ne i32 %110, 0
  %112 = zext i1 %111 to i64
  %113 = select i1 %111, i32 2, i32 1
  store i32 %113, i32* @format, align 4
  br label %114

114:                                              ; preds = %109, %106
  store i8 0, i8* @print_block_size, align 1
  store i8 0, i8* @print_with_color, align 1
  store i8 0, i8* @print_hyperlink, align 1
  br label %294

115:                                              ; preds = %100
  store i32 2, i32* @indicator_style, align 4
  br label %294

116:                                              ; preds = %100
  store i32 0, i32* @format, align 4
  store i8 0, i8* @print_owner, align 1
  br label %294

117:                                              ; preds = %100
  store i32 176, i32* @human_output_opts, align 4
  store i32 176, i32* @file_human_output_opts, align 4
  store i64 1, i64* @output_block_size, align 8
  store i64 1, i64* @file_output_block_size, align 8
  br label %294

118:                                              ; preds = %100
  store i8 1, i8* @print_inode, align 1
  br label %294

119:                                              ; preds = %100
  store i8 1, i8* %8, align 1
  br label %294

120:                                              ; preds = %100
  store i32 0, i32* @format, align 4
  br label %294

121:                                              ; preds = %100
  store i32 4, i32* @format, align 4
  br label %294

122:                                              ; preds = %100
  store i8 1, i8* @numeric_ids, align 1
  store i32 0, i32* @format, align 4
  br label %294

123:                                              ; preds = %100
  store i32 0, i32* @format, align 4
  store i8 0, i8* @print_group, align 1
  br label %294

124:                                              ; preds = %100
  store i32 1, i32* @indicator_style, align 4
  br label %294

125:                                              ; preds = %100
  store i8 1, i8* @qmark_funny_chars, align 1
  br label %294

126:                                              ; preds = %100
  store i8 1, i8* @sort_reverse, align 1
  br label %294

127:                                              ; preds = %100
  store i8 1, i8* @print_block_size, align 1
  br label %294

128:                                              ; preds = %100
  store i32 4, i32* @sort_type, align 4
  store i8 1, i8* %7, align 1
  br label %294

129:                                              ; preds = %100
  store i32 2, i32* @time_type, align 4
  br label %294

130:                                              ; preds = %100
  store i32 3, i32* @sort_type, align 4
  store i8 1, i8* %7, align 1
  br label %294

131:                                              ; preds = %100
  %132 = load i8*, i8** @optarg, align 8
  %133 = call zeroext i1 @set_line_length(i8* %132)
  br i1 %133, label %138, label %134

134:                                              ; preds = %131
  %135 = call i8* @gettext(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.69, i64 0, i64 0)) #14
  %136 = load i8*, i8** @optarg, align 8
  %137 = call i8* @quote(i8* %136)
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.68, i64 0, i64 0), i8* %135, i8* %137)
  unreachable

138:                                              ; preds = %131
  br label %294

139:                                              ; preds = %100
  store i32 3, i32* @format, align 4
  br label %294

140:                                              ; preds = %100
  store i32 1, i32* @ignore_mode, align 4
  br label %294

141:                                              ; preds = %100
  call void @add_ignore_pattern(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i64 0, i64 0))
  call void @add_ignore_pattern(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.71, i64 0, i64 0))
  br label %294

142:                                              ; preds = %100
  store i32 2, i32* @format, align 4
  br label %294

143:                                              ; preds = %100
  store i8 1, i8* @dired, align 1
  br label %294

144:                                              ; preds = %100
  store i32 3, i32* @indicator_style, align 4
  br label %294

145:                                              ; preds = %100
  store i8 0, i8* @print_group, align 1
  br label %294

146:                                              ; preds = %100
  store i32 3, i32* @dereference, align 4
  br label %294

147:                                              ; preds = %100
  store i32 4, i32* @dereference, align 4
  br label %294

148:                                              ; preds = %100
  %149 = load i8*, i8** @optarg, align 8
  call void @add_ignore_pattern(i8* %149)
  br label %294

150:                                              ; preds = %100
  store i32 5, i32* @dereference, align 4
  br label %294

151:                                              ; preds = %100
  call void @set_quoting_style(%struct.quoting_options* null, i32 0)
  br label %294

152:                                              ; preds = %100
  call void @set_quoting_style(%struct.quoting_options* null, i32 5)
  br label %294

153:                                              ; preds = %100
  store i8 1, i8* @recursive, align 1
  br label %294

154:                                              ; preds = %100
  store i32 2, i32* @sort_type, align 4
  store i8 1, i8* %7, align 1
  br label %294

155:                                              ; preds = %100
  %156 = load i8*, i8** @optarg, align 8
  %157 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.72, i64 0, i64 0)) #14
  %158 = call i64 @xnumtoumax(i8* %156, i32 0, i64 0, i64 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8* %157, i32 2)
  store i64 %158, i64* @tabsize, align 8
  br label %294

159:                                              ; preds = %100
  store i32 -1, i32* @sort_type, align 4
  store i8 1, i8* %7, align 1
  br label %294

160:                                              ; preds = %100
  store i32 1, i32* @sort_type, align 4
  store i8 1, i8* %7, align 1
  br label %294

161:                                              ; preds = %100
  %162 = load i32, i32* @format, align 4
  %163 = icmp ne i32 %162, 0
  br i1 %163, label %164, label %165

164:                                              ; preds = %161
  store i32 1, i32* @format, align 4
  br label %165

165:                                              ; preds = %164, %161
  br label %294

166:                                              ; preds = %100
  store i8 1, i8* @print_author, align 1
  br label %294

167:                                              ; preds = %100
  %168 = call noalias i8* @xmalloc(i64 16)
  %169 = bitcast i8* %168 to %struct.ignore_pattern*
  store %struct.ignore_pattern* %169, %struct.ignore_pattern** %15, align 8
  %170 = load i8*, i8** @optarg, align 8
  %171 = load %struct.ignore_pattern*, %struct.ignore_pattern** %15, align 8
  %172 = getelementptr inbounds %struct.ignore_pattern, %struct.ignore_pattern* %171, i32 0, i32 0
  store i8* %170, i8** %172, align 8
  %173 = load %struct.ignore_pattern*, %struct.ignore_pattern** @hide_patterns, align 8
  %174 = load %struct.ignore_pattern*, %struct.ignore_pattern** %15, align 8
  %175 = getelementptr inbounds %struct.ignore_pattern, %struct.ignore_pattern* %174, i32 0, i32 1
  store %struct.ignore_pattern* %173, %struct.ignore_pattern** %175, align 8
  %176 = load %struct.ignore_pattern*, %struct.ignore_pattern** %15, align 8
  store %struct.ignore_pattern* %176, %struct.ignore_pattern** @hide_patterns, align 8
  br label %294

177:                                              ; preds = %100
  %178 = load i8*, i8** @optarg, align 8
  %179 = load void ()*, void ()** @argmatch_die, align 8
  %180 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.73, i64 0, i64 0), i8* %178, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @sort_args, i64 0, i64 0), i8* bitcast ([5 x i32]* @sort_types to i8*), i64 4, void ()* %179)
  %181 = getelementptr inbounds [5 x i32], [5 x i32]* @sort_types, i64 0, i64 %180
  %182 = load i32, i32* %181, align 4
  store i32 %182, i32* @sort_type, align 4
  store i8 1, i8* %7, align 1
  br label %294

183:                                              ; preds = %100
  store i8 1, i8* @directories_first, align 1
  br label %294

184:                                              ; preds = %100
  %185 = load i8*, i8** @optarg, align 8
  %186 = load void ()*, void ()** @argmatch_die, align 8
  %187 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.74, i64 0, i64 0), i8* %185, i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @time_args, i64 0, i64 0), i8* bitcast ([5 x i32]* @time_types to i8*), i64 4, void ()* %186)
  %188 = getelementptr inbounds [5 x i32], [5 x i32]* @time_types, i64 0, i64 %187
  %189 = load i32, i32* %188, align 4
  store i32 %189, i32* @time_type, align 4
  br label %294

190:                                              ; preds = %100
  %191 = load i8*, i8** @optarg, align 8
  %192 = load void ()*, void ()** @argmatch_die, align 8
  %193 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.75, i64 0, i64 0), i8* %191, i8** getelementptr inbounds ([8 x i8*], [8 x i8*]* @format_args, i64 0, i64 0), i8* bitcast ([7 x i32]* @format_types to i8*), i64 4, void ()* %192)
  %194 = getelementptr inbounds [7 x i32], [7 x i32]* @format_types, i64 0, i64 %193
  %195 = load i32, i32* %194, align 4
  store i32 %195, i32* @format, align 4
  br label %294

196:                                              ; preds = %100
  store i32 0, i32* @format, align 4
  %197 = call i8* @bad_cast(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.76, i64 0, i64 0))
  store i8* %197, i8** %6, align 8
  br label %294

198:                                              ; preds = %100
  %199 = load i8*, i8** @optarg, align 8
  %200 = icmp ne i8* %199, null
  br i1 %200, label %201, label %207

201:                                              ; preds = %198
  %202 = load i8*, i8** @optarg, align 8
  %203 = load void ()*, void ()** @argmatch_die, align 8
  %204 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.77, i64 0, i64 0), i8* %202, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @when_args, i64 0, i64 0), i8* bitcast ([9 x i32]* @when_types to i8*), i64 4, void ()* %203)
  %205 = getelementptr inbounds [9 x i32], [9 x i32]* @when_types, i64 0, i64 %204
  %206 = load i32, i32* %205, align 4
  store i32 %206, i32* %16, align 4
  br label %208

207:                                              ; preds = %198
  store i32 1, i32* %16, align 4
  br label %208

208:                                              ; preds = %207, %201
  %209 = load i32, i32* %16, align 4
  %210 = icmp eq i32 %209, 1
  br i1 %210, label %219, label %211

211:                                              ; preds = %208
  %212 = load i32, i32* %16, align 4
  %213 = icmp eq i32 %212, 2
  br i1 %213, label %214, label %217

214:                                              ; preds = %211
  %215 = call i32 @isatty(i32 1) #14
  %216 = icmp ne i32 %215, 0
  br label %217

217:                                              ; preds = %214, %211
  %218 = phi i1 [ false, %211 ], [ %216, %214 ]
  br label %219

219:                                              ; preds = %217, %208
  %220 = phi i1 [ true, %208 ], [ %218, %217 ]
  %221 = zext i1 %220 to i8
  store i8 %221, i8* @print_with_color, align 1
  %222 = load i8, i8* @print_with_color, align 1
  %223 = trunc i8 %222 to i1
  br i1 %223, label %224, label %225

224:                                              ; preds = %219
  store i64 0, i64* @tabsize, align 8
  br label %225

225:                                              ; preds = %224, %219
  br label %294

226:                                              ; preds = %100
  %227 = load i8*, i8** @optarg, align 8
  %228 = icmp ne i8* %227, null
  br i1 %228, label %229, label %235

229:                                              ; preds = %226
  %230 = load i8*, i8** @optarg, align 8
  %231 = load void ()*, void ()** @argmatch_die, align 8
  %232 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.78, i64 0, i64 0), i8* %230, i8** getelementptr inbounds ([10 x i8*], [10 x i8*]* @when_args, i64 0, i64 0), i8* bitcast ([9 x i32]* @when_types to i8*), i64 4, void ()* %231)
  %233 = getelementptr inbounds [9 x i32], [9 x i32]* @when_types, i64 0, i64 %232
  %234 = load i32, i32* %233, align 4
  store i32 %234, i32* %17, align 4
  br label %236

235:                                              ; preds = %226
  store i32 1, i32* %17, align 4
  br label %236

236:                                              ; preds = %235, %229
  %237 = load i32, i32* %17, align 4
  %238 = icmp eq i32 %237, 1
  br i1 %238, label %247, label %239

239:                                              ; preds = %236
  %240 = load i32, i32* %17, align 4
  %241 = icmp eq i32 %240, 2
  br i1 %241, label %242, label %245

242:                                              ; preds = %239
  %243 = call i32 @isatty(i32 1) #14
  %244 = icmp ne i32 %243, 0
  br label %245

245:                                              ; preds = %242, %239
  %246 = phi i1 [ false, %239 ], [ %244, %242 ]
  br label %247

247:                                              ; preds = %245, %236
  %248 = phi i1 [ true, %236 ], [ %246, %245 ]
  %249 = zext i1 %248 to i8
  store i8 %249, i8* @print_hyperlink, align 1
  br label %294

250:                                              ; preds = %100
  %251 = load i8*, i8** @optarg, align 8
  %252 = load void ()*, void ()** @argmatch_die, align 8
  %253 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.79, i64 0, i64 0), i8* %251, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @indicator_style_args, i64 0, i64 0), i8* bitcast ([4 x i32]* @indicator_style_types to i8*), i64 4, void ()* %252)
  %254 = getelementptr inbounds [4 x i32], [4 x i32]* @indicator_style_types, i64 0, i64 %253
  %255 = load i32, i32* %254, align 4
  store i32 %255, i32* @indicator_style, align 4
  br label %294

256:                                              ; preds = %100
  %257 = load i8*, i8** @optarg, align 8
  %258 = load void ()*, void ()** @argmatch_die, align 8
  %259 = call i64 @__xargmatch_internal(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.80, i64 0, i64 0), i8* %257, i8** getelementptr inbounds ([11 x i8*], [11 x i8*]* @quoting_style_args, i64 0, i64 0), i8* bitcast ([10 x i32]* @quoting_style_vals to i8*), i64 4, void ()* %258)
  %260 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([10 x i32]* @quoting_style_vals to [0 x i32]*), i64 0, i64 %259
  %261 = load i32, i32* %260, align 4
  call void @set_quoting_style(%struct.quoting_options* null, i32 %261)
  br label %294

262:                                              ; preds = %100
  %263 = load i8*, i8** @optarg, align 8
  store i8* %263, i8** %6, align 8
  br label %294

264:                                              ; preds = %100
  store i8 0, i8* @qmark_funny_chars, align 1
  br label %294

265:                                              ; preds = %100
  %266 = load i8*, i8** @optarg, align 8
  %267 = call i32 @human_options(i8* %266, i32* @human_output_opts, i64* @output_block_size)
  store i32 %267, i32* %18, align 4
  %268 = load i32, i32* %18, align 4
  %269 = icmp ne i32 %268, 0
  br i1 %269, label %270, label %274

270:                                              ; preds = %265
  %271 = load i32, i32* %18, align 4
  %272 = load i32, i32* %13, align 4
  %273 = load i8*, i8** @optarg, align 8
  call void @xstrtol_fatal(i32 %271, i32 %272, i8 signext 0, %struct.option* getelementptr inbounds ([44 x %struct.option], [44 x %struct.option]* @long_options, i64 0, i64 0), i8* %273) #15
  unreachable

274:                                              ; preds = %265
  %275 = load i32, i32* @human_output_opts, align 4
  store i32 %275, i32* @file_human_output_opts, align 4
  %276 = load i64, i64* @output_block_size, align 8
  store i64 %276, i64* @file_output_block_size, align 8
  br label %294

277:                                              ; preds = %100
  store i32 144, i32* @human_output_opts, align 4
  store i32 144, i32* @file_human_output_opts, align 4
  store i64 1, i64* @output_block_size, align 8
  store i64 1, i64* @file_output_block_size, align 8
  br label %294

278:                                              ; preds = %100
  store i8 1, i8* @print_scontext, align 1
  br label %294

279:                                              ; preds = %100
  call void @usage(i32 0) #15
  unreachable

280:                                              ; preds = %100
  %281 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %282 = load i32, i32* @ls_mode, align 4
  %283 = icmp eq i32 %282, 1
  br i1 %283, label %284, label %285

284:                                              ; preds = %280
  br label %290

285:                                              ; preds = %280
  %286 = load i32, i32* @ls_mode, align 4
  %287 = icmp eq i32 %286, 2
  %288 = zext i1 %287 to i64
  %289 = select i1 %287, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i64 0, i64 0)
  br label %290

290:                                              ; preds = %285, %284
  %291 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0), %284 ], [ %289, %285 ]
  %292 = load i8*, i8** @Version, align 8
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %281, i8* %291, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.81, i64 0, i64 0), i8* %292, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.82, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.83, i64 0, i64 0), i8* null)
  call void @exit(i32 0) #16
  unreachable

293:                                              ; preds = %100
  call void @usage(i32 2) #15
  unreachable

294:                                              ; preds = %278, %277, %274, %264, %262, %256, %250, %247, %225, %196, %190, %184, %183, %177, %167, %166, %165, %160, %159, %155, %154, %153, %152, %151, %150, %148, %147, %146, %145, %144, %143, %142, %141, %140, %139, %138, %130, %129, %128, %127, %126, %125, %124, %123, %122, %121, %120, %119, %118, %117, %116, %115, %114, %105, %104, %103, %102
  br label %93

295:                                              ; preds = %99
  %296 = load i64, i64* @output_block_size, align 8
  %297 = icmp ne i64 %296, 0
  br i1 %297, label %315, label %298

298:                                              ; preds = %295
  %299 = call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.84, i64 0, i64 0)) #14
  store i8* %299, i8** %19, align 8
  %300 = load i8*, i8** %19, align 8
  %301 = call i32 @human_options(i8* %300, i32* @human_output_opts, i64* @output_block_size)
  %302 = load i8*, i8** %19, align 8
  %303 = icmp ne i8* %302, null
  br i1 %303, label %307, label %304

304:                                              ; preds = %298
  %305 = call i8* @getenv(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.85, i64 0, i64 0)) #14
  %306 = icmp ne i8* %305, null
  br i1 %306, label %307, label %310

307:                                              ; preds = %304, %298
  %308 = load i32, i32* @human_output_opts, align 4
  store i32 %308, i32* @file_human_output_opts, align 4
  %309 = load i64, i64* @output_block_size, align 8
  store i64 %309, i64* @file_output_block_size, align 8
  br label %310

310:                                              ; preds = %307, %304
  %311 = load i8, i8* %8, align 1
  %312 = trunc i8 %311 to i1
  br i1 %312, label %313, label %314

313:                                              ; preds = %310
  store i32 0, i32* @human_output_opts, align 4
  store i64 1024, i64* @output_block_size, align 8
  br label %314

314:                                              ; preds = %313, %310
  br label %315

315:                                              ; preds = %314, %295
  %316 = load i64, i64* @line_length, align 8
  %317 = udiv i64 %316, 3
  store i64 %317, i64* @max_idx, align 8
  %318 = load i64, i64* @line_length, align 8
  %319 = urem i64 %318, 3
  %320 = icmp ne i64 %319, 0
  %321 = zext i1 %320 to i32
  %322 = sext i32 %321 to i64
  %323 = load i64, i64* @max_idx, align 8
  %324 = add i64 %323, %322
  store i64 %324, i64* @max_idx, align 8
  %325 = call i32 @get_quoting_style(%struct.quoting_options* null)
  store i32 %325, i32* %20, align 4
  %326 = load i32, i32* @format, align 4
  %327 = icmp ne i32 %326, 4
  br i1 %327, label %328, label %348

328:                                              ; preds = %315
  %329 = load i32, i32* @format, align 4
  %330 = icmp ne i32 %329, 1
  br i1 %330, label %331, label %348

331:                                              ; preds = %328
  %332 = load i64, i64* @line_length, align 8
  %333 = icmp ne i64 %332, 0
  br i1 %333, label %337, label %334

334:                                              ; preds = %331
  %335 = load i32, i32* @format, align 4
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %337, label %348

337:                                              ; preds = %334, %331
  %338 = load i32, i32* %20, align 4
  %339 = icmp eq i32 %338, 1
  br i1 %339, label %346, label %340

340:                                              ; preds = %337
  %341 = load i32, i32* %20, align 4
  %342 = icmp eq i32 %341, 3
  br i1 %342, label %346, label %343

343:                                              ; preds = %340
  %344 = load i32, i32* %20, align 4
  %345 = icmp eq i32 %344, 6
  br label %346

346:                                              ; preds = %343, %340, %337
  %347 = phi i1 [ true, %340 ], [ true, %337 ], [ %345, %343 ]
  br label %348

348:                                              ; preds = %346, %334, %328, %315
  %349 = phi i1 [ false, %334 ], [ false, %328 ], [ false, %315 ], [ %347, %346 ]
  %350 = zext i1 %349 to i8
  store i8 %350, i8* @align_variable_outer_quotes, align 1
  %351 = call %struct.quoting_options* @clone_quoting_options(%struct.quoting_options* null)
  store %struct.quoting_options* %351, %struct.quoting_options** @filename_quoting_options, align 8
  %352 = load i32, i32* %20, align 4
  %353 = icmp eq i32 %352, 7
  br i1 %353, label %354, label %357

354:                                              ; preds = %348
  %355 = load %struct.quoting_options*, %struct.quoting_options** @filename_quoting_options, align 8
  %356 = call i32 @set_char_quoting(%struct.quoting_options* %355, i8 signext 32, i32 1)
  br label %357

357:                                              ; preds = %354, %348
  %358 = load i32, i32* @indicator_style, align 4
  %359 = icmp ule i32 2, %358
  br i1 %359, label %360, label %378

360:                                              ; preds = %357
  %361 = load i32, i32* @indicator_style, align 4
  %362 = sub i32 %361, 2
  %363 = zext i32 %362 to i64
  %364 = getelementptr inbounds [6 x i8], [6 x i8]* @.str.86, i64 0, i64 %363
  store i8* %364, i8** %21, align 8
  br label %365

365:                                              ; preds = %374, %360
  %366 = load i8*, i8** %21, align 8
  %367 = load i8, i8* %366, align 1
  %368 = icmp ne i8 %367, 0
  br i1 %368, label %369, label %377

369:                                              ; preds = %365
  %370 = load %struct.quoting_options*, %struct.quoting_options** @filename_quoting_options, align 8
  %371 = load i8*, i8** %21, align 8
  %372 = load i8, i8* %371, align 1
  %373 = call i32 @set_char_quoting(%struct.quoting_options* %370, i8 signext %372, i32 1)
  br label %374

374:                                              ; preds = %369
  %375 = load i8*, i8** %21, align 8
  %376 = getelementptr inbounds i8, i8* %375, i32 1
  store i8* %376, i8** %21, align 8
  br label %365, !llvm.loop !9

377:                                              ; preds = %365
  br label %378

378:                                              ; preds = %377, %357
  %379 = call %struct.quoting_options* @clone_quoting_options(%struct.quoting_options* null)
  store %struct.quoting_options* %379, %struct.quoting_options** @dirname_quoting_options, align 8
  %380 = load %struct.quoting_options*, %struct.quoting_options** @dirname_quoting_options, align 8
  %381 = call i32 @set_char_quoting(%struct.quoting_options* %380, i8 signext 58, i32 1)
  %382 = load i8, i8* @dired, align 1
  %383 = trunc i8 %382 to i1
  br i1 %383, label %384, label %391

384:                                              ; preds = %378
  %385 = load i32, i32* @format, align 4
  %386 = icmp ne i32 %385, 0
  br i1 %386, label %390, label %387

387:                                              ; preds = %384
  %388 = load i8, i8* @print_hyperlink, align 1
  %389 = trunc i8 %388 to i1
  br i1 %389, label %390, label %391

390:                                              ; preds = %387, %384
  store i8 0, i8* @dired, align 1
  br label %391

391:                                              ; preds = %390, %387, %378
  %392 = load i32, i32* @time_type, align 4
  %393 = icmp eq i32 %392, 1
  br i1 %393, label %397, label %394

394:                                              ; preds = %391
  %395 = load i32, i32* @time_type, align 4
  %396 = icmp eq i32 %395, 2
  br i1 %396, label %397, label %404

397:                                              ; preds = %394, %391
  %398 = load i8, i8* %7, align 1
  %399 = trunc i8 %398 to i1
  br i1 %399, label %404, label %400

400:                                              ; preds = %397
  %401 = load i32, i32* @format, align 4
  %402 = icmp ne i32 %401, 0
  br i1 %402, label %403, label %404

403:                                              ; preds = %400
  store i32 4, i32* @sort_type, align 4
  br label %404

404:                                              ; preds = %403, %400, %397, %394
  %405 = load i32, i32* @format, align 4
  %406 = icmp eq i32 %405, 0
  br i1 %406, label %407, label %510

407:                                              ; preds = %404
  %408 = load i8*, i8** %6, align 8
  store i8* %408, i8** %22, align 8
  %409 = load i8*, i8** %22, align 8
  %410 = icmp ne i8* %409, null
  br i1 %410, label %417, label %411

411:                                              ; preds = %407
  %412 = call i8* @getenv(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.87, i64 0, i64 0)) #14
  store i8* %412, i8** %22, align 8
  %413 = icmp ne i8* %412, null
  br i1 %413, label %416, label %414

414:                                              ; preds = %411
  %415 = call i8* @bad_cast(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88, i64 0, i64 0))
  store i8* %415, i8** %22, align 8
  br label %416

416:                                              ; preds = %414, %411
  br label %417

417:                                              ; preds = %416, %407
  br label %418

418:                                              ; preds = %426, %417
  %419 = load i8*, i8** %22, align 8
  %420 = call i32 @strncmp(i8* %419, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @decode_switches.posix_prefix, i64 0, i64 0), i64 6) #17
  %421 = icmp eq i32 %420, 0
  br i1 %421, label %422, label %429

422:                                              ; preds = %418
  %423 = call zeroext i1 @hard_locale(i32 2)
  br i1 %423, label %426, label %424

424:                                              ; preds = %422
  %425 = load i32, i32* @optind, align 4
  store i32 %425, i32* %3, align 4
  br label %512

426:                                              ; preds = %422
  %427 = load i8*, i8** %22, align 8
  %428 = getelementptr inbounds i8, i8* %427, i64 6
  store i8* %428, i8** %22, align 8
  br label %418, !llvm.loop !10

429:                                              ; preds = %418
  %430 = load i8*, i8** %22, align 8
  %431 = load i8, i8* %430, align 1
  %432 = sext i8 %431 to i32
  %433 = icmp eq i32 %432, 43
  br i1 %433, label %434, label %458

434:                                              ; preds = %429
  %435 = load i8*, i8** %22, align 8
  %436 = getelementptr inbounds i8, i8* %435, i64 1
  store i8* %436, i8** %23, align 8
  %437 = load i8*, i8** %23, align 8
  %438 = call i8* @strchr(i8* %437, i32 10) #17
  store i8* %438, i8** %24, align 8
  %439 = load i8*, i8** %24, align 8
  %440 = icmp ne i8* %439, null
  br i1 %440, label %443, label %441

441:                                              ; preds = %434
  %442 = load i8*, i8** %23, align 8
  store i8* %442, i8** %24, align 8
  br label %455

443:                                              ; preds = %434
  %444 = load i8*, i8** %24, align 8
  %445 = getelementptr inbounds i8, i8* %444, i64 1
  %446 = call i8* @strchr(i8* %445, i32 10) #17
  %447 = icmp ne i8* %446, null
  br i1 %447, label %448, label %452

448:                                              ; preds = %443
  %449 = call i8* @gettext(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.89, i64 0, i64 0)) #14
  %450 = load i8*, i8** %23, align 8
  %451 = call i8* @quote(i8* %450)
  call void (i32, i32, i8*, ...) @error(i32 2, i32 0, i8* %449, i8* %451)
  unreachable

452:                                              ; preds = %443
  %453 = load i8*, i8** %24, align 8
  %454 = getelementptr inbounds i8, i8* %453, i32 1
  store i8* %454, i8** %24, align 8
  store i8 0, i8* %453, align 1
  br label %455

455:                                              ; preds = %452, %441
  %456 = load i8*, i8** %23, align 8
  store i8* %456, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 0), align 16
  %457 = load i8*, i8** %24, align 8
  store i8* %457, i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 1), align 8
  br label %509

458:                                              ; preds = %429
  %459 = load i8*, i8** %22, align 8
  %460 = call i64 @argmatch(i8* %459, i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @time_style_args, i64 0, i64 0), i8* bitcast ([4 x i32]* @time_style_types to i8*), i64 4) #17
  store i64 %460, i64* %25, align 8
  %461 = load i64, i64* %25, align 8
  %462 = icmp slt i64 %461, 0
  br i1 %462, label %463, label %483

463:                                              ; preds = %458
  %464 = load i8*, i8** %22, align 8
  %465 = load i64, i64* %25, align 8
  call void @argmatch_invalid(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.90, i64 0, i64 0), i8* %464, i64 %465)
  %466 = call i8* @gettext(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.91, i64 0, i64 0)) #14
  %467 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %468 = call i32 @fputs_unlocked(i8* %466, %struct._IO_FILE* %467)
  store i8** getelementptr inbounds ([5 x i8*], [5 x i8*]* @time_style_args, i64 0, i64 0), i8*** %26, align 8
  br label %469

469:                                              ; preds = %473, %463
  %470 = load i8**, i8*** %26, align 8
  %471 = load i8*, i8** %470, align 8
  %472 = icmp ne i8* %471, null
  br i1 %472, label %473, label %479

473:                                              ; preds = %469
  %474 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %475 = load i8**, i8*** %26, align 8
  %476 = getelementptr inbounds i8*, i8** %475, i32 1
  store i8** %476, i8*** %26, align 8
  %477 = load i8*, i8** %475, align 8
  %478 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %474, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.92, i64 0, i64 0), i8* %477)
  br label %469, !llvm.loop !11

479:                                              ; preds = %469
  %480 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.93, i64 0, i64 0)) #14
  %481 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %482 = call i32 @fputs_unlocked(i8* %480, %struct._IO_FILE* %481)
  call void @usage(i32 2) #15
  unreachable

483:                                              ; preds = %458
  %484 = load i64, i64* %25, align 8
  switch i64 %484, label %508 [
    i64 0, label %485
    i64 1, label %486
    i64 2, label %487
    i64 3, label %488
  ]

485:                                              ; preds = %483
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.94, i64 0, i64 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 1), align 8
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.94, i64 0, i64 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 0), align 16
  br label %508

486:                                              ; preds = %483
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.95, i64 0, i64 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 1), align 8
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.95, i64 0, i64 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 0), align 16
  br label %508

487:                                              ; preds = %483
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.96, i64 0, i64 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 0), align 16
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.97, i64 0, i64 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 1), align 8
  br label %508

488:                                              ; preds = %483
  %489 = call zeroext i1 @hard_locale(i32 2)
  br i1 %489, label %490, label %507

490:                                              ; preds = %488
  store i32 0, i32* %27, align 4
  br label %491

491:                                              ; preds = %503, %490
  %492 = load i32, i32* %27, align 4
  %493 = icmp slt i32 %492, 2
  br i1 %493, label %494, label %506

494:                                              ; preds = %491
  %495 = load i32, i32* %27, align 4
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds [2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 %496
  %498 = load i8*, i8** %497, align 8
  %499 = call i8* @dcgettext(i8* null, i8* %498, i32 2) #14
  %500 = load i32, i32* %27, align 4
  %501 = sext i32 %500 to i64
  %502 = getelementptr inbounds [2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 %501
  store i8* %499, i8** %502, align 8
  br label %503

503:                                              ; preds = %494
  %504 = load i32, i32* %27, align 4
  %505 = add nsw i32 %504, 1
  store i32 %505, i32* %27, align 4
  br label %491, !llvm.loop !12

506:                                              ; preds = %491
  br label %507

507:                                              ; preds = %506, %488
  br label %508

508:                                              ; preds = %507, %487, %486, %485, %483
  br label %509

509:                                              ; preds = %508, %455
  call void @abformat_init()
  br label %510

510:                                              ; preds = %509, %404
  %511 = load i32, i32* @optind, align 4
  store i32 %511, i32* %3, align 4
  br label %512

512:                                              ; preds = %510, %424
  %513 = load i32, i32* %3, align 4
  ret i32 %513
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @parse_ls_color() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca [3 x i8], align 1
  %5 = alloca %struct.color_ext_type*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.color_ext_type*, align 8
  %9 = alloca %struct.color_ext_type*, align 8
  %10 = call i8* @getenv(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.172, i64 0, i64 0)) #14
  store i8* %10, i8** %1, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %17, label %12

12:                                               ; preds = %0
  %13 = load i8*, i8** %1, align 8
  %14 = load i8, i8* %13, align 1
  %15 = sext i8 %14 to i32
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %30

17:                                               ; preds = %12, %0
  %18 = call i8* @getenv(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.173, i64 0, i64 0)) #14
  store i8* %18, i8** %6, align 8
  %19 = load i8*, i8** %6, align 8
  %20 = icmp ne i8* %19, null
  br i1 %20, label %21, label %26

21:                                               ; preds = %17
  %22 = load i8*, i8** %6, align 8
  %23 = load i8, i8* %22, align 1
  %24 = sext i8 %23 to i32
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %21, %17
  %27 = call zeroext i1 @known_term_type()
  br i1 %27, label %29, label %28

28:                                               ; preds = %26
  store i8 0, i8* @print_with_color, align 1
  br label %29

29:                                               ; preds = %28, %26, %21
  br label %176

30:                                               ; preds = %12
  store %struct.color_ext_type* null, %struct.color_ext_type** %5, align 8
  %31 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i64 0, i64 0
  %32 = call i8* @strcpy(i8* %31, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.174, i64 0, i64 0)) #14
  %33 = load i8*, i8** %1, align 8
  %34 = call noalias i8* @xstrdup(i8* %33)
  store i8* %34, i8** @color_buf, align 8
  store i8* %34, i8** %2, align 8
  store i32 1, i32* %7, align 4
  br label %35

35:                                               ; preds = %149, %30
  %36 = load i32, i32* %7, align 4
  switch i32 %36, label %148 [
    i32 1, label %37
    i32 2, label %70
    i32 3, label %81
    i32 4, label %128
    i32 6, label %147
  ]

37:                                               ; preds = %35
  %38 = load i8*, i8** %1, align 8
  %39 = load i8, i8* %38, align 1
  %40 = sext i8 %39 to i32
  switch i32 %40, label %64 [
    i32 58, label %41
    i32 42, label %44
    i32 0, label %63
  ]

41:                                               ; preds = %37
  %42 = load i8*, i8** %1, align 8
  %43 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %43, i8** %1, align 8
  br label %69

44:                                               ; preds = %37
  %45 = call noalias i8* @xmalloc(i64 40)
  %46 = bitcast i8* %45 to %struct.color_ext_type*
  store %struct.color_ext_type* %46, %struct.color_ext_type** %5, align 8
  %47 = load %struct.color_ext_type*, %struct.color_ext_type** @color_ext_list, align 8
  %48 = load %struct.color_ext_type*, %struct.color_ext_type** %5, align 8
  %49 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %48, i32 0, i32 2
  store %struct.color_ext_type* %47, %struct.color_ext_type** %49, align 8
  %50 = load %struct.color_ext_type*, %struct.color_ext_type** %5, align 8
  store %struct.color_ext_type* %50, %struct.color_ext_type** @color_ext_list, align 8
  %51 = load i8*, i8** %1, align 8
  %52 = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %52, i8** %1, align 8
  %53 = load i8*, i8** %2, align 8
  %54 = load %struct.color_ext_type*, %struct.color_ext_type** %5, align 8
  %55 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %54, i32 0, i32 0
  %56 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %55, i32 0, i32 1
  store i8* %53, i8** %56, align 8
  %57 = load %struct.color_ext_type*, %struct.color_ext_type** %5, align 8
  %58 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %57, i32 0, i32 0
  %59 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %58, i32 0, i32 0
  %60 = call zeroext i1 @get_funky_string(i8** %2, i8** %1, i1 zeroext true, i64* %59)
  %61 = zext i1 %60 to i64
  %62 = select i1 %60, i32 4, i32 6
  store i32 %62, i32* %7, align 4
  br label %69

63:                                               ; preds = %37
  store i32 5, i32* %7, align 4
  br label %150

64:                                               ; preds = %37
  %65 = load i8*, i8** %1, align 8
  %66 = getelementptr inbounds i8, i8* %65, i32 1
  store i8* %66, i8** %1, align 8
  %67 = load i8, i8* %65, align 1
  %68 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i64 0, i64 0
  store i8 %67, i8* %68, align 1
  store i32 2, i32* %7, align 4
  br label %69

69:                                               ; preds = %64, %44, %41
  br label %149

70:                                               ; preds = %35
  %71 = load i8*, i8** %1, align 8
  %72 = load i8, i8* %71, align 1
  %73 = icmp ne i8 %72, 0
  br i1 %73, label %74, label %79

74:                                               ; preds = %70
  %75 = load i8*, i8** %1, align 8
  %76 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %76, i8** %1, align 8
  %77 = load i8, i8* %75, align 1
  %78 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i64 0, i64 1
  store i8 %77, i8* %78, align 1
  store i32 3, i32* %7, align 4
  br label %80

79:                                               ; preds = %70
  store i32 6, i32* %7, align 4
  br label %80

80:                                               ; preds = %79, %74
  br label %149

81:                                               ; preds = %35
  store i32 6, i32* %7, align 4
  %82 = load i8*, i8** %1, align 8
  %83 = getelementptr inbounds i8, i8* %82, i32 1
  store i8* %83, i8** %1, align 8
  %84 = load i8, i8* %82, align 1
  %85 = sext i8 %84 to i32
  %86 = icmp eq i32 %85, 61
  br i1 %86, label %87, label %127

87:                                               ; preds = %81
  store i32 0, i32* %3, align 4
  br label %88

88:                                               ; preds = %116, %87
  %89 = load i32, i32* %3, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds [25 x i8*], [25 x i8*]* @indicator_name, i64 0, i64 %90
  %92 = load i8*, i8** %91, align 8
  %93 = icmp ne i8* %92, null
  br i1 %93, label %94, label %119

94:                                               ; preds = %88
  %95 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i64 0, i64 0
  %96 = load i32, i32* %3, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds [25 x i8*], [25 x i8*]* @indicator_name, i64 0, i64 %97
  %99 = load i8*, i8** %98, align 8
  %100 = call i32 @strcmp(i8* %95, i8* %99) #17
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %115

102:                                              ; preds = %94
  %103 = load i8*, i8** %2, align 8
  %104 = load i32, i32* %3, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds [24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 %105
  %107 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %106, i32 0, i32 1
  store i8* %103, i8** %107, align 8
  %108 = load i32, i32* %3, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds [24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 %109
  %111 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %110, i32 0, i32 0
  %112 = call zeroext i1 @get_funky_string(i8** %2, i8** %1, i1 zeroext false, i64* %111)
  %113 = zext i1 %112 to i64
  %114 = select i1 %112, i32 1, i32 6
  store i32 %114, i32* %7, align 4
  br label %119

115:                                              ; preds = %94
  br label %116

116:                                              ; preds = %115
  %117 = load i32, i32* %3, align 4
  %118 = add nsw i32 %117, 1
  store i32 %118, i32* %3, align 4
  br label %88, !llvm.loop !13

119:                                              ; preds = %102, %88
  %120 = load i32, i32* %7, align 4
  %121 = icmp eq i32 %120, 6
  br i1 %121, label %122, label %126

122:                                              ; preds = %119
  %123 = call i8* @gettext(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.175, i64 0, i64 0)) #14
  %124 = getelementptr inbounds [3 x i8], [3 x i8]* %4, i64 0, i64 0
  %125 = call i8* @quote(i8* %124)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %123, i8* %125)
  br label %126

126:                                              ; preds = %122, %119
  br label %127

127:                                              ; preds = %126, %81
  br label %149

128:                                              ; preds = %35
  %129 = load i8*, i8** %1, align 8
  %130 = getelementptr inbounds i8, i8* %129, i32 1
  store i8* %130, i8** %1, align 8
  %131 = load i8, i8* %129, align 1
  %132 = sext i8 %131 to i32
  %133 = icmp eq i32 %132, 61
  br i1 %133, label %134, label %145

134:                                              ; preds = %128
  %135 = load i8*, i8** %2, align 8
  %136 = load %struct.color_ext_type*, %struct.color_ext_type** %5, align 8
  %137 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %136, i32 0, i32 1
  %138 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %137, i32 0, i32 1
  store i8* %135, i8** %138, align 8
  %139 = load %struct.color_ext_type*, %struct.color_ext_type** %5, align 8
  %140 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %139, i32 0, i32 1
  %141 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %140, i32 0, i32 0
  %142 = call zeroext i1 @get_funky_string(i8** %2, i8** %1, i1 zeroext false, i64* %141)
  %143 = zext i1 %142 to i64
  %144 = select i1 %142, i32 1, i32 6
  store i32 %144, i32* %7, align 4
  br label %146

145:                                              ; preds = %128
  store i32 6, i32* %7, align 4
  br label %146

146:                                              ; preds = %145, %134
  br label %149

147:                                              ; preds = %35
  br label %150

148:                                              ; preds = %35
  call void @abort() #16
  unreachable

149:                                              ; preds = %146, %127, %80, %69
  br label %35

150:                                              ; preds = %147, %63
  %151 = load i32, i32* %7, align 4
  %152 = icmp eq i32 %151, 6
  br i1 %152, label %153, label %168

153:                                              ; preds = %150
  %154 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.176, i64 0, i64 0)) #14
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %154)
  %155 = load i8*, i8** @color_buf, align 8
  call void @free(i8* %155) #14
  %156 = load %struct.color_ext_type*, %struct.color_ext_type** @color_ext_list, align 8
  store %struct.color_ext_type* %156, %struct.color_ext_type** %8, align 8
  br label %157

157:                                              ; preds = %160, %153
  %158 = load %struct.color_ext_type*, %struct.color_ext_type** %8, align 8
  %159 = icmp ne %struct.color_ext_type* %158, null
  br i1 %159, label %160, label %167

160:                                              ; preds = %157
  %161 = load %struct.color_ext_type*, %struct.color_ext_type** %8, align 8
  store %struct.color_ext_type* %161, %struct.color_ext_type** %9, align 8
  %162 = load %struct.color_ext_type*, %struct.color_ext_type** %8, align 8
  %163 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %162, i32 0, i32 2
  %164 = load %struct.color_ext_type*, %struct.color_ext_type** %163, align 8
  store %struct.color_ext_type* %164, %struct.color_ext_type** %8, align 8
  %165 = load %struct.color_ext_type*, %struct.color_ext_type** %9, align 8
  %166 = bitcast %struct.color_ext_type* %165 to i8*
  call void @free(i8* %166) #14
  br label %157, !llvm.loop !14

167:                                              ; preds = %157
  store i8 0, i8* @print_with_color, align 1
  br label %168

168:                                              ; preds = %167, %150
  %169 = load i64, i64* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 7, i32 0), align 16
  %170 = icmp eq i64 %169, 6
  br i1 %170, label %171, label %176

171:                                              ; preds = %168
  %172 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 7, i32 1), align 8
  %173 = call i32 @strncmp(i8* %172, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.177, i64 0, i64 0), i64 6) #17
  %174 = icmp ne i32 %173, 0
  br i1 %174, label %176, label %175

175:                                              ; preds = %171
  store i8 1, i8* @color_symlink_as_referent, align 1
  br label %176

176:                                              ; preds = %175, %171, %168, %29
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @is_colored(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  store i32 %0, i32* %2, align 4
  %5 = load i32, i32* %2, align 4
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 %6
  %8 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %7, i32 0, i32 0
  %9 = load i64, i64* %8, align 16
  store i64 %9, i64* %3, align 8
  %10 = load i32, i32* %2, align 4
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds [24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 %11
  %13 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %12, i32 0, i32 1
  %14 = load i8*, i8** %13, align 8
  store i8* %14, i8** %4, align 8
  %15 = load i64, i64* %3, align 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %33, label %17

17:                                               ; preds = %1
  %18 = load i64, i64* %3, align 8
  %19 = icmp eq i64 %18, 1
  br i1 %19, label %20, label %24

20:                                               ; preds = %17
  %21 = load i8*, i8** %4, align 8
  %22 = call i32 @strncmp(i8* %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.45, i64 0, i64 0), i64 1) #17
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %33, label %24

24:                                               ; preds = %20, %17
  %25 = load i64, i64* %3, align 8
  %26 = icmp eq i64 %25, 2
  br i1 %26, label %27, label %31

27:                                               ; preds = %24
  %28 = load i8*, i8** %4, align 8
  %29 = call i32 @strncmp(i8* %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.46, i64 0, i64 0), i64 2) #17
  %30 = icmp eq i32 %29, 0
  br label %31

31:                                               ; preds = %27, %24
  %32 = phi i1 [ false, %24 ], [ %30, %27 ]
  br label %33

33:                                               ; preds = %31, %20, %1
  %34 = phi i1 [ true, %20 ], [ true, %1 ], [ %32, %31 ]
  %35 = xor i1 %34, true
  ret i1 %35
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @dev_ino_hash(i8* %0, i64 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca %struct.dev_ino*, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %6 = load i8*, i8** %3, align 8
  %7 = bitcast i8* %6 to %struct.dev_ino*
  store %struct.dev_ino* %7, %struct.dev_ino** %5, align 8
  %8 = load %struct.dev_ino*, %struct.dev_ino** %5, align 8
  %9 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %8, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = load i64, i64* %4, align 8
  %12 = urem i64 %10, %11
  ret i64 %12
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @dev_ino_compare(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.dev_ino*, align 8
  %6 = alloca %struct.dev_ino*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.dev_ino*
  store %struct.dev_ino* %8, %struct.dev_ino** %5, align 8
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.dev_ino*
  store %struct.dev_ino* %10, %struct.dev_ino** %6, align 8
  %11 = load %struct.dev_ino*, %struct.dev_ino** %5, align 8
  %12 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %11, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load %struct.dev_ino*, %struct.dev_ino** %6, align 8
  %15 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %14, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %13, %16
  br i1 %17, label %18, label %26

18:                                               ; preds = %2
  %19 = load %struct.dev_ino*, %struct.dev_ino** %5, align 8
  %20 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %19, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = load %struct.dev_ino*, %struct.dev_ino** %6, align 8
  %23 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %22, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %21, %24
  br label %26

26:                                               ; preds = %18, %2
  %27 = phi i1 [ false, %2 ], [ %25, %18 ]
  %28 = zext i1 %27 to i64
  %29 = select i1 %27, i32 1, i32 0
  %30 = icmp ne i32 %29, 0
  ret i1 %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @dev_ino_free(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  call void @free(i8* %3) #14
  ret void
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #1

; Function Attrs: nounwind
declare dso_local void @free(i8*) #1

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @file_escape_init() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  br label %2

2:                                                ; preds = %30, %0
  %3 = load i32, i32* %1, align 4
  %4 = icmp slt i32 %3, 256
  br i1 %4, label %5, label %33

5:                                                ; preds = %2
  %6 = load i32, i32* %1, align 4
  %7 = call zeroext i1 @c_isalnum(i32 %6)
  br i1 %7, label %20, label %8

8:                                                ; preds = %5
  %9 = load i32, i32* %1, align 4
  %10 = icmp eq i32 %9, 126
  br i1 %10, label %20, label %11

11:                                               ; preds = %8
  %12 = load i32, i32* %1, align 4
  %13 = icmp eq i32 %12, 45
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = load i32, i32* %1, align 4
  %16 = icmp eq i32 %15, 46
  br i1 %16, label %20, label %17

17:                                               ; preds = %14
  %18 = load i32, i32* %1, align 4
  %19 = icmp eq i32 %18, 95
  br label %20

20:                                               ; preds = %17, %14, %11, %8, %5
  %21 = phi i1 [ true, %14 ], [ true, %11 ], [ true, %8 ], [ true, %5 ], [ %19, %17 ]
  %22 = zext i1 %21 to i32
  %23 = load i32, i32* %1, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds [256 x i8], [256 x i8]* @RFC3986, i64 0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = sext i8 %26 to i32
  %28 = or i32 %27, %22
  %29 = trunc i32 %28 to i8
  store i8 %29, i8* %25, align 1
  br label %30

30:                                               ; preds = %20
  %31 = load i32, i32* %1, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %1, align 4
  br label %2, !llvm.loop !15

33:                                               ; preds = %2
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_files() #0 {
  %1 = alloca i64, align 8
  %2 = alloca %struct.fileinfo*, align 8
  store i64 0, i64* %1, align 8
  br label %3

3:                                                ; preds = %14, %0
  %4 = load i64, i64* %1, align 8
  %5 = load i64, i64* @cwd_n_used, align 8
  %6 = icmp ult i64 %4, %5
  br i1 %6, label %7, label %17

7:                                                ; preds = %3
  %8 = load i8**, i8*** @sorted_file, align 8
  %9 = load i64, i64* %1, align 8
  %10 = getelementptr inbounds i8*, i8** %8, i64 %9
  %11 = load i8*, i8** %10, align 8
  %12 = bitcast i8* %11 to %struct.fileinfo*
  store %struct.fileinfo* %12, %struct.fileinfo** %2, align 8
  %13 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  call void @free_ent(%struct.fileinfo* %13)
  br label %14

14:                                               ; preds = %7
  %15 = load i64, i64* %1, align 8
  %16 = add i64 %15, 1
  store i64 %16, i64* %1, align 8
  br label %3, !llvm.loop !16

17:                                               ; preds = %3
  store i64 0, i64* @cwd_n_used, align 8
  store i8 0, i8* @cwd_some_quoted, align 1
  store i8 0, i8* @any_has_acl, align 1
  store i32 0, i32* @inode_number_width, align 4
  store i32 0, i32* @block_size_width, align 4
  store i32 0, i32* @nlink_width, align 4
  store i32 0, i32* @owner_width, align 4
  store i32 0, i32* @group_width, align 4
  store i32 0, i32* @author_width, align 4
  store i32 0, i32* @scontext_width, align 4
  store i32 0, i32* @major_device_number_width, align 4
  store i32 0, i32* @minor_device_number_width, align 4
  store i32 0, i32* @file_size_width, align 4
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @gobble_file(i8* %0, i32 %1, i64 %2, i1 zeroext %3, i8* %4) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i8, align 1
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca %struct.fileinfo*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8, align 1
  %16 = alloca i32, align 4
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca %struct.stat, align 8
  %23 = alloca i8*, align 8
  %24 = alloca [652 x i8], align 16
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca [21 x i8], align 16
  %31 = alloca i32, align 4
  %32 = alloca [21 x i8], align 16
  %33 = alloca i32, align 4
  %34 = alloca [652 x i8], align 16
  %35 = alloca i64, align 8
  %36 = alloca i32, align 4
  %37 = alloca [21 x i8], align 16
  %38 = alloca i32, align 4
  store i8* %0, i8** %7, align 8
  store i32 %1, i32* %8, align 4
  store i64 %2, i64* %9, align 8
  %39 = zext i1 %3 to i8
  store i8 %39, i8* %10, align 1
  store i8* %4, i8** %11, align 8
  store i64 0, i64* %12, align 8
  %40 = load i8, i8* %10, align 1
  %41 = trunc i8 %40 to i1
  br i1 %41, label %42, label %45

42:                                               ; preds = %5
  %43 = load i64, i64* %9, align 8
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %42, %5
  br label %47

46:                                               ; preds = %42
  call void @__assert_fail(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.216, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 3115, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @__PRETTY_FUNCTION__.gobble_file, i64 0, i64 0)) #16
  unreachable

47:                                               ; preds = %45
  %48 = load i64, i64* @cwd_n_used, align 8
  %49 = load i64, i64* @cwd_n_alloc, align 8
  %50 = icmp eq i64 %48, %49
  br i1 %50, label %51, label %59

51:                                               ; preds = %47
  %52 = load %struct.fileinfo*, %struct.fileinfo** @cwd_file, align 8
  %53 = bitcast %struct.fileinfo* %52 to i8*
  %54 = load i64, i64* @cwd_n_alloc, align 8
  %55 = call i8* @xnrealloc(i8* %53, i64 %54, i64 400)
  %56 = bitcast i8* %55 to %struct.fileinfo*
  store %struct.fileinfo* %56, %struct.fileinfo** @cwd_file, align 8
  %57 = load i64, i64* @cwd_n_alloc, align 8
  %58 = mul i64 %57, 2
  store i64 %58, i64* @cwd_n_alloc, align 8
  br label %59

59:                                               ; preds = %51, %47
  %60 = load %struct.fileinfo*, %struct.fileinfo** @cwd_file, align 8
  %61 = load i64, i64* @cwd_n_used, align 8
  %62 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %60, i64 %61
  store %struct.fileinfo* %62, %struct.fileinfo** %13, align 8
  %63 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %64 = bitcast %struct.fileinfo* %63 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %64, i8 0, i64 200, i1 false)
  %65 = load i64, i64* %9, align 8
  %66 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %67 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %66, i32 0, i32 3
  %68 = getelementptr inbounds %struct.stat, %struct.stat* %67, i32 0, i32 1
  store i64 %65, i64* %68, align 8
  %69 = load i32, i32* %8, align 4
  %70 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %71 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %70, i32 0, i32 4
  store i32 %69, i32* %71, align 8
  %72 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %73 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %72, i32 0, i32 11
  store i32 -1, i32* %73, align 4
  %74 = load i8, i8* @cwd_some_quoted, align 1
  %75 = trunc i8 %74 to i1
  br i1 %75, label %91, label %76

76:                                               ; preds = %59
  %77 = load i8, i8* @align_variable_outer_quotes, align 1
  %78 = trunc i8 %77 to i1
  br i1 %78, label %79, label %91

79:                                               ; preds = %76
  %80 = load i8*, i8** %7, align 8
  %81 = call zeroext i1 @needs_quoting(i8* %80)
  %82 = zext i1 %81 to i32
  %83 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %84 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %83, i32 0, i32 11
  store i32 %82, i32* %84, align 4
  %85 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %86 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %85, i32 0, i32 11
  %87 = load i32, i32* %86, align 4
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %89, label %90

89:                                               ; preds = %79
  store i8 1, i8* @cwd_some_quoted, align 1
  br label %90

90:                                               ; preds = %89, %79
  br label %91

91:                                               ; preds = %90, %76, %59
  %92 = load i8, i8* %10, align 1
  %93 = trunc i8 %92 to i1
  br i1 %93, label %165, label %94

94:                                               ; preds = %91
  %95 = load i8, i8* @print_hyperlink, align 1
  %96 = trunc i8 %95 to i1
  br i1 %96, label %165, label %97

97:                                               ; preds = %94
  %98 = load i8, i8* @format_needs_stat, align 1
  %99 = trunc i8 %98 to i1
  br i1 %99, label %165, label %100

100:                                              ; preds = %97
  %101 = load i32, i32* %8, align 4
  %102 = icmp eq i32 %101, 3
  br i1 %102, label %103, label %112

103:                                              ; preds = %100
  %104 = load i8, i8* @print_with_color, align 1
  %105 = trunc i8 %104 to i1
  br i1 %105, label %106, label %112

106:                                              ; preds = %103
  %107 = call zeroext i1 @is_colored(i32 19)
  br i1 %107, label %165, label %108

108:                                              ; preds = %106
  %109 = call zeroext i1 @is_colored(i32 18)
  br i1 %109, label %165, label %110

110:                                              ; preds = %108
  %111 = call zeroext i1 @is_colored(i32 20)
  br i1 %111, label %165, label %112

112:                                              ; preds = %110, %103, %100
  %113 = load i8, i8* @print_inode, align 1
  %114 = trunc i8 %113 to i1
  br i1 %114, label %118, label %115

115:                                              ; preds = %112
  %116 = load i8, i8* @format_needs_type, align 1
  %117 = trunc i8 %116 to i1
  br i1 %117, label %118, label %133

118:                                              ; preds = %115, %112
  %119 = load i32, i32* %8, align 4
  %120 = icmp eq i32 %119, 6
  br i1 %120, label %124, label %121

121:                                              ; preds = %118
  %122 = load i32, i32* %8, align 4
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %133

124:                                              ; preds = %121, %118
  %125 = load i32, i32* @dereference, align 4
  %126 = icmp eq i32 %125, 5
  br i1 %126, label %165, label %127

127:                                              ; preds = %124
  %128 = load i8, i8* @color_symlink_as_referent, align 1
  %129 = trunc i8 %128 to i1
  br i1 %129, label %165, label %130

130:                                              ; preds = %127
  %131 = load i8, i8* @check_symlink_color, align 1
  %132 = trunc i8 %131 to i1
  br i1 %132, label %165, label %133

133:                                              ; preds = %130, %121, %115
  %134 = load i8, i8* @print_inode, align 1
  %135 = trunc i8 %134 to i1
  br i1 %135, label %136, label %139

136:                                              ; preds = %133
  %137 = load i64, i64* %9, align 8
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %165, label %139

139:                                              ; preds = %136, %133
  %140 = load i8, i8* @format_needs_type, align 1
  %141 = trunc i8 %140 to i1
  br i1 %141, label %142, label %691

142:                                              ; preds = %139
  %143 = load i32, i32* %8, align 4
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %165, label %145

145:                                              ; preds = %142
  %146 = load i8, i8* %10, align 1
  %147 = trunc i8 %146 to i1
  br i1 %147, label %165, label %148

148:                                              ; preds = %145
  %149 = load i32, i32* %8, align 4
  %150 = icmp eq i32 %149, 5
  br i1 %150, label %151, label %691

151:                                              ; preds = %148
  %152 = load i32, i32* @indicator_style, align 4
  %153 = icmp eq i32 %152, 3
  br i1 %153, label %165, label %154

154:                                              ; preds = %151
  %155 = load i8, i8* @print_with_color, align 1
  %156 = trunc i8 %155 to i1
  br i1 %156, label %157, label %691

157:                                              ; preds = %154
  %158 = call zeroext i1 @is_colored(i32 14)
  br i1 %158, label %165, label %159

159:                                              ; preds = %157
  %160 = call zeroext i1 @is_colored(i32 16)
  br i1 %160, label %165, label %161

161:                                              ; preds = %159
  %162 = call zeroext i1 @is_colored(i32 17)
  br i1 %162, label %165, label %163

163:                                              ; preds = %161
  %164 = call zeroext i1 @is_colored(i32 21)
  br i1 %164, label %165, label %691

165:                                              ; preds = %163, %161, %159, %157, %151, %145, %142, %136, %130, %127, %124, %110, %108, %106, %97, %94, %91
  %166 = load i8*, i8** %7, align 8
  %167 = getelementptr inbounds i8, i8* %166, i64 0
  %168 = load i8, i8* %167, align 1
  %169 = sext i8 %168 to i32
  %170 = icmp eq i32 %169, 47
  br i1 %170, label %177, label %171

171:                                              ; preds = %165
  %172 = load i8*, i8** %11, align 8
  %173 = getelementptr inbounds i8, i8* %172, i64 0
  %174 = load i8, i8* %173, align 1
  %175 = sext i8 %174 to i32
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %179

177:                                              ; preds = %171, %165
  %178 = load i8*, i8** %7, align 8
  store i8* %178, i8** %14, align 8
  br label %190

179:                                              ; preds = %171
  %180 = load i8*, i8** %7, align 8
  %181 = call i64 @strlen(i8* %180) #17
  %182 = load i8*, i8** %11, align 8
  %183 = call i64 @strlen(i8* %182) #17
  %184 = add i64 %181, %183
  %185 = add i64 %184, 2
  %186 = alloca i8, i64 %185, align 16
  store i8* %186, i8** %14, align 8
  %187 = load i8*, i8** %14, align 8
  %188 = load i8*, i8** %11, align 8
  %189 = load i8*, i8** %7, align 8
  call void @attach(i8* %187, i8* %188, i8* %189)
  br label %190

190:                                              ; preds = %179, %177
  %191 = load i8, i8* @print_hyperlink, align 1
  %192 = trunc i8 %191 to i1
  br i1 %192, label %193, label %208

193:                                              ; preds = %190
  %194 = load i8*, i8** %14, align 8
  %195 = call i8* @canonicalize_filename_mode(i8* %194, i32 2)
  %196 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %197 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %196, i32 0, i32 2
  store i8* %195, i8** %197, align 8
  %198 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %199 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %198, i32 0, i32 2
  %200 = load i8*, i8** %199, align 8
  %201 = icmp ne i8* %200, null
  br i1 %201, label %207, label %202

202:                                              ; preds = %193
  %203 = load i8, i8* %10, align 1
  %204 = trunc i8 %203 to i1
  %205 = call i8* @gettext(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.207, i64 0, i64 0)) #14
  %206 = load i8*, i8** %14, align 8
  call void @file_failure(i1 zeroext %204, i8* %205, i8* %206)
  br label %207

207:                                              ; preds = %202, %193
  br label %208

208:                                              ; preds = %207, %190
  %209 = load i32, i32* @dereference, align 4
  switch i32 %209, label %252 [
    i32 5, label %210
    i32 3, label %215
    i32 4, label %215
  ]

210:                                              ; preds = %208
  %211 = load i8*, i8** %14, align 8
  %212 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %213 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %212, i32 0, i32 3
  %214 = call i32 @stat(i8* %211, %struct.stat* %213) #14
  store i32 %214, i32* %16, align 4
  store i8 1, i8* %15, align 1
  br label %257

215:                                              ; preds = %208, %208
  %216 = load i8, i8* %10, align 1
  %217 = trunc i8 %216 to i1
  br i1 %217, label %218, label %251

218:                                              ; preds = %215
  %219 = load i8*, i8** %14, align 8
  %220 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %221 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %220, i32 0, i32 3
  %222 = call i32 @stat(i8* %219, %struct.stat* %221) #14
  store i32 %222, i32* %16, align 4
  store i8 1, i8* %15, align 1
  %223 = load i32, i32* @dereference, align 4
  %224 = icmp eq i32 %223, 3
  br i1 %224, label %225, label %226

225:                                              ; preds = %218
  br label %257

226:                                              ; preds = %218
  %227 = load i32, i32* %16, align 4
  %228 = icmp slt i32 %227, 0
  br i1 %228, label %229, label %234

229:                                              ; preds = %226
  %230 = call i32* @__errno_location() #18
  %231 = load i32, i32* %230, align 4
  %232 = icmp eq i32 %231, 2
  %233 = zext i1 %232 to i32
  br label %243

234:                                              ; preds = %226
  %235 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %236 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %235, i32 0, i32 3
  %237 = getelementptr inbounds %struct.stat, %struct.stat* %236, i32 0, i32 3
  %238 = load i32, i32* %237, align 8
  %239 = and i32 %238, 61440
  %240 = icmp eq i32 %239, 16384
  %241 = xor i1 %240, true
  %242 = zext i1 %241 to i32
  br label %243

243:                                              ; preds = %234, %229
  %244 = phi i32 [ %233, %229 ], [ %242, %234 ]
  %245 = icmp ne i32 %244, 0
  %246 = zext i1 %245 to i8
  store i8 %246, i8* %17, align 1
  %247 = load i8, i8* %17, align 1
  %248 = trunc i8 %247 to i1
  br i1 %248, label %250, label %249

249:                                              ; preds = %243
  br label %257

250:                                              ; preds = %243
  br label %251

251:                                              ; preds = %250, %215
  br label %252

252:                                              ; preds = %251, %208
  %253 = load i8*, i8** %14, align 8
  %254 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %255 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %254, i32 0, i32 3
  %256 = call i32 @lstat(i8* %253, %struct.stat* %255) #14
  store i32 %256, i32* %16, align 4
  store i8 0, i8* %15, align 1
  br label %257

257:                                              ; preds = %252, %249, %225, %210
  %258 = load i32, i32* %16, align 4
  %259 = icmp ne i32 %258, 0
  br i1 %259, label %260, label %275

260:                                              ; preds = %257
  %261 = load i8, i8* %10, align 1
  %262 = trunc i8 %261 to i1
  %263 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.217, i64 0, i64 0)) #14
  %264 = load i8*, i8** %14, align 8
  call void @file_failure(i1 zeroext %262, i8* %263, i8* %264)
  %265 = load i8, i8* %10, align 1
  %266 = trunc i8 %265 to i1
  br i1 %266, label %267, label %268

267:                                              ; preds = %260
  store i64 0, i64* %6, align 8
  br label %717

268:                                              ; preds = %260
  %269 = load i8*, i8** %7, align 8
  %270 = call noalias i8* @xstrdup(i8* %269)
  %271 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %272 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %271, i32 0, i32 0
  store i8* %270, i8** %272, align 8
  %273 = load i64, i64* @cwd_n_used, align 8
  %274 = add i64 %273, 1
  store i64 %274, i64* @cwd_n_used, align 8
  store i64 0, i64* %6, align 8
  br label %717

275:                                              ; preds = %257
  %276 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %277 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %276, i32 0, i32 7
  store i8 1, i8* %277, align 8
  %278 = load i32, i32* %8, align 4
  %279 = icmp eq i32 %278, 5
  br i1 %279, label %287, label %280

280:                                              ; preds = %275
  %281 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %282 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %281, i32 0, i32 3
  %283 = getelementptr inbounds %struct.stat, %struct.stat* %282, i32 0, i32 3
  %284 = load i32, i32* %283, align 8
  %285 = and i32 %284, 61440
  %286 = icmp eq i32 %285, 32768
  br i1 %286, label %287, label %299

287:                                              ; preds = %280, %275
  %288 = load i8, i8* @print_with_color, align 1
  %289 = trunc i8 %288 to i1
  br i1 %289, label %290, label %299

290:                                              ; preds = %287
  %291 = call zeroext i1 @is_colored(i32 21)
  br i1 %291, label %292, label %299

292:                                              ; preds = %290
  %293 = load i8*, i8** %14, align 8
  %294 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %295 = call zeroext i1 @has_capability_cache(i8* %293, %struct.fileinfo* %294)
  %296 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %297 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %296, i32 0, i32 10
  %298 = zext i1 %295 to i8
  store i8 %298, i8* %297, align 8
  br label %299

299:                                              ; preds = %292, %290, %287, %280
  %300 = load i32, i32* @format, align 4
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %305, label %302

302:                                              ; preds = %299
  %303 = load i8, i8* @print_scontext, align 1
  %304 = trunc i8 %303 to i1
  br i1 %304, label %305, label %404

305:                                              ; preds = %302, %299
  store i8 0, i8* %18, align 1
  store i8 0, i8* %19, align 1
  %306 = load i8*, i8** %14, align 8
  %307 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %308 = load i8, i8* %15, align 1
  %309 = trunc i8 %308 to i1
  %310 = call i32 @getfilecon_cache(i8* %306, %struct.fileinfo* %307, i1 zeroext %309)
  store i32 %310, i32* %20, align 4
  %311 = load i32, i32* %20, align 4
  %312 = icmp slt i32 %311, 0
  %313 = zext i1 %312 to i32
  store i32 %313, i32* %16, align 4
  %314 = load i32, i32* %16, align 4
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %316, label %335

316:                                              ; preds = %305
  %317 = call zeroext i1 @is_smack_enabled()
  br i1 %317, label %318, label %326

318:                                              ; preds = %316
  %319 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %320 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %319, i32 0, i32 6
  %321 = load i8*, i8** %320, align 8
  %322 = call i32 @strcmp(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.218, i64 0, i64 0), i8* %321) #17
  %323 = icmp eq i32 %322, 0
  %324 = xor i1 %323, true
  %325 = zext i1 %324 to i8
  store i8 %325, i8* %18, align 1
  br label %334

326:                                              ; preds = %316
  %327 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %328 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %327, i32 0, i32 6
  %329 = load i8*, i8** %328, align 8
  %330 = call i32 @strcmp(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.219, i64 0, i64 0), i8* %329) #17
  %331 = icmp eq i32 %330, 0
  %332 = xor i1 %331, true
  %333 = zext i1 %332 to i8
  store i8 %333, i8* %18, align 1
  br label %334

334:                                              ; preds = %326, %318
  br label %347

335:                                              ; preds = %305
  %336 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %337 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %336, i32 0, i32 6
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @UNKNOWN_SECURITY_CONTEXT, i64 0, i64 0), i8** %337, align 8
  %338 = call i32* @__errno_location() #18
  %339 = load i32, i32* %338, align 4
  %340 = call zeroext i1 @is_ENOTSUP(i32 %339)
  br i1 %340, label %345, label %341

341:                                              ; preds = %335
  %342 = call i32* @__errno_location() #18
  %343 = load i32, i32* %342, align 4
  %344 = icmp eq i32 %343, 61
  br i1 %344, label %345, label %346

345:                                              ; preds = %341, %335
  store i32 0, i32* %16, align 4
  br label %346

346:                                              ; preds = %345, %341
  br label %347

347:                                              ; preds = %346, %334
  %348 = load i32, i32* %16, align 4
  %349 = icmp eq i32 %348, 0
  br i1 %349, label %350, label %363

350:                                              ; preds = %347
  %351 = load i32, i32* @format, align 4
  %352 = icmp eq i32 %351, 0
  br i1 %352, label %353, label %363

353:                                              ; preds = %350
  %354 = load i8*, i8** %14, align 8
  %355 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %356 = call i32 @file_has_acl_cache(i8* %354, %struct.fileinfo* %355)
  store i32 %356, i32* %21, align 4
  %357 = load i32, i32* %21, align 4
  %358 = icmp slt i32 %357, 0
  %359 = zext i1 %358 to i32
  store i32 %359, i32* %16, align 4
  %360 = load i32, i32* %21, align 4
  %361 = icmp slt i32 0, %360
  %362 = zext i1 %361 to i8
  store i8 %362, i8* %19, align 1
  br label %363

363:                                              ; preds = %353, %350, %347
  %364 = load i8, i8* %18, align 1
  %365 = trunc i8 %364 to i1
  br i1 %365, label %370, label %366

366:                                              ; preds = %363
  %367 = load i8, i8* %19, align 1
  %368 = trunc i8 %367 to i1
  br i1 %368, label %370, label %369

369:                                              ; preds = %366
  br label %381

370:                                              ; preds = %366, %363
  %371 = load i8, i8* %18, align 1
  %372 = trunc i8 %371 to i1
  br i1 %372, label %373, label %377

373:                                              ; preds = %370
  %374 = load i8, i8* %19, align 1
  %375 = trunc i8 %374 to i1
  %376 = xor i1 %375, true
  br label %377

377:                                              ; preds = %373, %370
  %378 = phi i1 [ false, %370 ], [ %376, %373 ]
  %379 = zext i1 %378 to i64
  %380 = select i1 %378, i32 1, i32 2
  br label %381

381:                                              ; preds = %377, %369
  %382 = phi i32 [ 0, %369 ], [ %380, %377 ]
  %383 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %384 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %383, i32 0, i32 9
  store i32 %382, i32* %384, align 4
  %385 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %386 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %385, i32 0, i32 9
  %387 = load i32, i32* %386, align 4
  %388 = icmp ne i32 %387, 0
  %389 = zext i1 %388 to i32
  %390 = load i8, i8* @any_has_acl, align 1
  %391 = trunc i8 %390 to i1
  %392 = zext i1 %391 to i32
  %393 = or i32 %392, %389
  %394 = icmp ne i32 %393, 0
  %395 = zext i1 %394 to i8
  store i8 %395, i8* @any_has_acl, align 1
  %396 = load i32, i32* %16, align 4
  %397 = icmp ne i32 %396, 0
  br i1 %397, label %398, label %403

398:                                              ; preds = %381
  %399 = call i32* @__errno_location() #18
  %400 = load i32, i32* %399, align 4
  %401 = load i8*, i8** %14, align 8
  %402 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %401)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %400, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.170, i64 0, i64 0), i8* %402)
  br label %403

403:                                              ; preds = %398, %381
  br label %404

404:                                              ; preds = %403, %302
  %405 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %406 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %405, i32 0, i32 3
  %407 = getelementptr inbounds %struct.stat, %struct.stat* %406, i32 0, i32 3
  %408 = load i32, i32* %407, align 8
  %409 = and i32 %408, 61440
  %410 = icmp eq i32 %409, 40960
  br i1 %410, label %411, label %476

411:                                              ; preds = %404
  %412 = load i32, i32* @format, align 4
  %413 = icmp eq i32 %412, 0
  br i1 %413, label %417, label %414

414:                                              ; preds = %411
  %415 = load i8, i8* @check_symlink_color, align 1
  %416 = trunc i8 %415 to i1
  br i1 %416, label %417, label %476

417:                                              ; preds = %414, %411
  %418 = load i8*, i8** %14, align 8
  %419 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %420 = load i8, i8* %10, align 1
  %421 = trunc i8 %420 to i1
  call void @get_link_name(i8* %418, %struct.fileinfo* %419, i1 zeroext %421)
  %422 = load i8*, i8** %14, align 8
  %423 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %424 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %423, i32 0, i32 1
  %425 = load i8*, i8** %424, align 8
  %426 = call i8* @make_link_name(i8* %422, i8* %425)
  store i8* %426, i8** %23, align 8
  %427 = load i8*, i8** %23, align 8
  %428 = icmp ne i8* %427, null
  br i1 %428, label %429, label %442

429:                                              ; preds = %417
  %430 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %431 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %430, i32 0, i32 11
  %432 = load i32, i32* %431, align 4
  %433 = icmp eq i32 %432, 0
  br i1 %433, label %434, label %442

434:                                              ; preds = %429
  %435 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %436 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %435, i32 0, i32 1
  %437 = load i8*, i8** %436, align 8
  %438 = call zeroext i1 @needs_quoting(i8* %437)
  br i1 %438, label %439, label %442

439:                                              ; preds = %434
  %440 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %441 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %440, i32 0, i32 11
  store i32 -1, i32* %441, align 4
  br label %442

442:                                              ; preds = %439, %434, %429, %417
  %443 = load i8*, i8** %23, align 8
  %444 = icmp ne i8* %443, null
  br i1 %444, label %445, label %474

445:                                              ; preds = %442
  %446 = load i32, i32* @indicator_style, align 4
  %447 = icmp ule i32 2, %446
  br i1 %447, label %451, label %448

448:                                              ; preds = %445
  %449 = load i8, i8* @check_symlink_color, align 1
  %450 = trunc i8 %449 to i1
  br i1 %450, label %451, label %474

451:                                              ; preds = %448, %445
  %452 = load i8*, i8** %23, align 8
  %453 = call i32 @stat(i8* %452, %struct.stat* %22) #14
  %454 = icmp eq i32 %453, 0
  br i1 %454, label %455, label %474

455:                                              ; preds = %451
  %456 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %457 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %456, i32 0, i32 8
  store i8 1, i8* %457, align 1
  %458 = load i8, i8* %10, align 1
  %459 = trunc i8 %458 to i1
  br i1 %459, label %460, label %468

460:                                              ; preds = %455
  %461 = load i32, i32* @format, align 4
  %462 = icmp eq i32 %461, 0
  br i1 %462, label %468, label %463

463:                                              ; preds = %460
  %464 = getelementptr inbounds %struct.stat, %struct.stat* %22, i32 0, i32 3
  %465 = load i32, i32* %464, align 8
  %466 = and i32 %465, 61440
  %467 = icmp eq i32 %466, 16384
  br i1 %467, label %473, label %468

468:                                              ; preds = %463, %460, %455
  %469 = getelementptr inbounds %struct.stat, %struct.stat* %22, i32 0, i32 3
  %470 = load i32, i32* %469, align 8
  %471 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %472 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %471, i32 0, i32 5
  store i32 %470, i32* %472, align 4
  br label %473

473:                                              ; preds = %468, %463
  br label %474

474:                                              ; preds = %473, %451, %448, %442
  %475 = load i8*, i8** %23, align 8
  call void @free(i8* %475) #14
  br label %476

476:                                              ; preds = %474, %414, %404
  %477 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %478 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %477, i32 0, i32 3
  %479 = getelementptr inbounds %struct.stat, %struct.stat* %478, i32 0, i32 3
  %480 = load i32, i32* %479, align 8
  %481 = and i32 %480, 61440
  %482 = icmp eq i32 %481, 40960
  br i1 %482, label %483, label %486

483:                                              ; preds = %476
  %484 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %485 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %484, i32 0, i32 4
  store i32 6, i32* %485, align 8
  br label %510

486:                                              ; preds = %476
  %487 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %488 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %487, i32 0, i32 3
  %489 = getelementptr inbounds %struct.stat, %struct.stat* %488, i32 0, i32 3
  %490 = load i32, i32* %489, align 8
  %491 = and i32 %490, 61440
  %492 = icmp eq i32 %491, 16384
  br i1 %492, label %493, label %506

493:                                              ; preds = %486
  %494 = load i8, i8* %10, align 1
  %495 = trunc i8 %494 to i1
  br i1 %495, label %496, label %502

496:                                              ; preds = %493
  %497 = load i8, i8* @immediate_dirs, align 1
  %498 = trunc i8 %497 to i1
  br i1 %498, label %502, label %499

499:                                              ; preds = %496
  %500 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %501 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %500, i32 0, i32 4
  store i32 9, i32* %501, align 8
  br label %505

502:                                              ; preds = %496, %493
  %503 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %504 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %503, i32 0, i32 4
  store i32 3, i32* %504, align 8
  br label %505

505:                                              ; preds = %502, %499
  br label %509

506:                                              ; preds = %486
  %507 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %508 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %507, i32 0, i32 4
  store i32 5, i32* %508, align 8
  br label %509

509:                                              ; preds = %506, %505
  br label %510

510:                                              ; preds = %509, %483
  %511 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %512 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %511, i32 0, i32 3
  %513 = getelementptr inbounds %struct.stat, %struct.stat* %512, i32 0, i32 10
  %514 = load i64, i64* %513, align 8
  store i64 %514, i64* %12, align 8
  %515 = load i32, i32* @format, align 4
  %516 = icmp eq i32 %515, 0
  br i1 %516, label %520, label %517

517:                                              ; preds = %510
  %518 = load i8, i8* @print_block_size, align 1
  %519 = trunc i8 %518 to i1
  br i1 %519, label %520, label %533

520:                                              ; preds = %517, %510
  %521 = load i64, i64* %12, align 8
  %522 = getelementptr inbounds [652 x i8], [652 x i8]* %24, i64 0, i64 0
  %523 = load i32, i32* @human_output_opts, align 4
  %524 = load i64, i64* @output_block_size, align 8
  %525 = call i8* @human_readable(i64 %521, i8* %522, i32 %523, i64 512, i64 %524)
  %526 = call i32 @gnu_mbswidth(i8* %525, i32 0)
  store i32 %526, i32* %25, align 4
  %527 = load i32, i32* @block_size_width, align 4
  %528 = load i32, i32* %25, align 4
  %529 = icmp slt i32 %527, %528
  br i1 %529, label %530, label %532

530:                                              ; preds = %520
  %531 = load i32, i32* %25, align 4
  store i32 %531, i32* @block_size_width, align 4
  br label %532

532:                                              ; preds = %530, %520
  br label %533

533:                                              ; preds = %532, %517
  %534 = load i32, i32* @format, align 4
  %535 = icmp eq i32 %534, 0
  br i1 %535, label %536, label %582

536:                                              ; preds = %533
  %537 = load i8, i8* @print_owner, align 1
  %538 = trunc i8 %537 to i1
  br i1 %538, label %539, label %551

539:                                              ; preds = %536
  %540 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %541 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %540, i32 0, i32 3
  %542 = getelementptr inbounds %struct.stat, %struct.stat* %541, i32 0, i32 4
  %543 = load i32, i32* %542, align 4
  %544 = call i32 @format_user_width(i32 %543)
  store i32 %544, i32* %26, align 4
  %545 = load i32, i32* @owner_width, align 4
  %546 = load i32, i32* %26, align 4
  %547 = icmp slt i32 %545, %546
  br i1 %547, label %548, label %550

548:                                              ; preds = %539
  %549 = load i32, i32* %26, align 4
  store i32 %549, i32* @owner_width, align 4
  br label %550

550:                                              ; preds = %548, %539
  br label %551

551:                                              ; preds = %550, %536
  %552 = load i8, i8* @print_group, align 1
  %553 = trunc i8 %552 to i1
  br i1 %553, label %554, label %566

554:                                              ; preds = %551
  %555 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %556 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %555, i32 0, i32 3
  %557 = getelementptr inbounds %struct.stat, %struct.stat* %556, i32 0, i32 5
  %558 = load i32, i32* %557, align 8
  %559 = call i32 @format_group_width(i32 %558)
  store i32 %559, i32* %27, align 4
  %560 = load i32, i32* @group_width, align 4
  %561 = load i32, i32* %27, align 4
  %562 = icmp slt i32 %560, %561
  br i1 %562, label %563, label %565

563:                                              ; preds = %554
  %564 = load i32, i32* %27, align 4
  store i32 %564, i32* @group_width, align 4
  br label %565

565:                                              ; preds = %563, %554
  br label %566

566:                                              ; preds = %565, %551
  %567 = load i8, i8* @print_author, align 1
  %568 = trunc i8 %567 to i1
  br i1 %568, label %569, label %581

569:                                              ; preds = %566
  %570 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %571 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %570, i32 0, i32 3
  %572 = getelementptr inbounds %struct.stat, %struct.stat* %571, i32 0, i32 4
  %573 = load i32, i32* %572, align 4
  %574 = call i32 @format_user_width(i32 %573)
  store i32 %574, i32* %28, align 4
  %575 = load i32, i32* @author_width, align 4
  %576 = load i32, i32* %28, align 4
  %577 = icmp slt i32 %575, %576
  br i1 %577, label %578, label %580

578:                                              ; preds = %569
  %579 = load i32, i32* %28, align 4
  store i32 %579, i32* @author_width, align 4
  br label %580

580:                                              ; preds = %578, %569
  br label %581

581:                                              ; preds = %580, %566
  br label %582

582:                                              ; preds = %581, %533
  %583 = load i8, i8* @print_scontext, align 1
  %584 = trunc i8 %583 to i1
  br i1 %584, label %585, label %597

585:                                              ; preds = %582
  %586 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %587 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %586, i32 0, i32 6
  %588 = load i8*, i8** %587, align 8
  %589 = call i64 @strlen(i8* %588) #17
  %590 = trunc i64 %589 to i32
  store i32 %590, i32* %29, align 4
  %591 = load i32, i32* @scontext_width, align 4
  %592 = load i32, i32* %29, align 4
  %593 = icmp slt i32 %591, %592
  br i1 %593, label %594, label %596

594:                                              ; preds = %585
  %595 = load i32, i32* %29, align 4
  store i32 %595, i32* @scontext_width, align 4
  br label %596

596:                                              ; preds = %594, %585
  br label %597

597:                                              ; preds = %596, %582
  %598 = load i32, i32* @format, align 4
  %599 = icmp eq i32 %598, 0
  br i1 %599, label %600, label %690

600:                                              ; preds = %597
  %601 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %602 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %601, i32 0, i32 3
  %603 = getelementptr inbounds %struct.stat, %struct.stat* %602, i32 0, i32 2
  %604 = load i64, i64* %603, align 8
  %605 = getelementptr inbounds [21 x i8], [21 x i8]* %30, i64 0, i64 0
  %606 = call i8* @umaxtostr(i64 %604, i8* %605)
  %607 = call i64 @strlen(i8* %606) #17
  %608 = trunc i64 %607 to i32
  store i32 %608, i32* %31, align 4
  %609 = load i32, i32* @nlink_width, align 4
  %610 = load i32, i32* %31, align 4
  %611 = icmp slt i32 %609, %610
  br i1 %611, label %612, label %614

612:                                              ; preds = %600
  %613 = load i32, i32* %31, align 4
  store i32 %613, i32* @nlink_width, align 4
  br label %614

614:                                              ; preds = %612, %600
  %615 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %616 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %615, i32 0, i32 3
  %617 = getelementptr inbounds %struct.stat, %struct.stat* %616, i32 0, i32 3
  %618 = load i32, i32* %617, align 8
  %619 = and i32 %618, 61440
  %620 = icmp eq i32 %619, 8192
  br i1 %620, label %628, label %621

621:                                              ; preds = %614
  %622 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %623 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %622, i32 0, i32 3
  %624 = getelementptr inbounds %struct.stat, %struct.stat* %623, i32 0, i32 3
  %625 = load i32, i32* %624, align 8
  %626 = and i32 %625, 61440
  %627 = icmp eq i32 %626, 24576
  br i1 %627, label %628, label %671

628:                                              ; preds = %621, %614
  %629 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %630 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %629, i32 0, i32 3
  %631 = getelementptr inbounds %struct.stat, %struct.stat* %630, i32 0, i32 7
  %632 = load i64, i64* %631, align 8
  %633 = call i32 @gnu_dev_major(i64 %632) #18
  %634 = zext i32 %633 to i64
  %635 = getelementptr inbounds [21 x i8], [21 x i8]* %32, i64 0, i64 0
  %636 = call i8* @umaxtostr(i64 %634, i8* %635)
  %637 = call i64 @strlen(i8* %636) #17
  %638 = trunc i64 %637 to i32
  store i32 %638, i32* %33, align 4
  %639 = load i32, i32* @major_device_number_width, align 4
  %640 = load i32, i32* %33, align 4
  %641 = icmp slt i32 %639, %640
  br i1 %641, label %642, label %644

642:                                              ; preds = %628
  %643 = load i32, i32* %33, align 4
  store i32 %643, i32* @major_device_number_width, align 4
  br label %644

644:                                              ; preds = %642, %628
  %645 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %646 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %645, i32 0, i32 3
  %647 = getelementptr inbounds %struct.stat, %struct.stat* %646, i32 0, i32 7
  %648 = load i64, i64* %647, align 8
  %649 = call i32 @gnu_dev_minor(i64 %648) #18
  %650 = zext i32 %649 to i64
  %651 = getelementptr inbounds [21 x i8], [21 x i8]* %32, i64 0, i64 0
  %652 = call i8* @umaxtostr(i64 %650, i8* %651)
  %653 = call i64 @strlen(i8* %652) #17
  %654 = trunc i64 %653 to i32
  store i32 %654, i32* %33, align 4
  %655 = load i32, i32* @minor_device_number_width, align 4
  %656 = load i32, i32* %33, align 4
  %657 = icmp slt i32 %655, %656
  br i1 %657, label %658, label %660

658:                                              ; preds = %644
  %659 = load i32, i32* %33, align 4
  store i32 %659, i32* @minor_device_number_width, align 4
  br label %660

660:                                              ; preds = %658, %644
  %661 = load i32, i32* @major_device_number_width, align 4
  %662 = add nsw i32 %661, 2
  %663 = load i32, i32* @minor_device_number_width, align 4
  %664 = add nsw i32 %662, %663
  store i32 %664, i32* %33, align 4
  %665 = load i32, i32* @file_size_width, align 4
  %666 = load i32, i32* %33, align 4
  %667 = icmp slt i32 %665, %666
  br i1 %667, label %668, label %670

668:                                              ; preds = %660
  %669 = load i32, i32* %33, align 4
  store i32 %669, i32* @file_size_width, align 4
  br label %670

670:                                              ; preds = %668, %660
  br label %689

671:                                              ; preds = %621
  %672 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %673 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %672, i32 0, i32 3
  %674 = getelementptr inbounds %struct.stat, %struct.stat* %673, i32 0, i32 8
  %675 = load i64, i64* %674, align 8
  %676 = call i64 @unsigned_file_size(i64 %675)
  store i64 %676, i64* %35, align 8
  %677 = load i64, i64* %35, align 8
  %678 = getelementptr inbounds [652 x i8], [652 x i8]* %34, i64 0, i64 0
  %679 = load i32, i32* @file_human_output_opts, align 4
  %680 = load i64, i64* @file_output_block_size, align 8
  %681 = call i8* @human_readable(i64 %677, i8* %678, i32 %679, i64 1, i64 %680)
  %682 = call i32 @gnu_mbswidth(i8* %681, i32 0)
  store i32 %682, i32* %36, align 4
  %683 = load i32, i32* @file_size_width, align 4
  %684 = load i32, i32* %36, align 4
  %685 = icmp slt i32 %683, %684
  br i1 %685, label %686, label %688

686:                                              ; preds = %671
  %687 = load i32, i32* %36, align 4
  store i32 %687, i32* @file_size_width, align 4
  br label %688

688:                                              ; preds = %686, %671
  br label %689

689:                                              ; preds = %688, %670
  br label %690

690:                                              ; preds = %689, %597
  br label %691

691:                                              ; preds = %690, %163, %154, %148, %139
  %692 = load i8, i8* @print_inode, align 1
  %693 = trunc i8 %692 to i1
  br i1 %693, label %694, label %709

694:                                              ; preds = %691
  %695 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %696 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %695, i32 0, i32 3
  %697 = getelementptr inbounds %struct.stat, %struct.stat* %696, i32 0, i32 1
  %698 = load i64, i64* %697, align 8
  %699 = getelementptr inbounds [21 x i8], [21 x i8]* %37, i64 0, i64 0
  %700 = call i8* @umaxtostr(i64 %698, i8* %699)
  %701 = call i64 @strlen(i8* %700) #17
  %702 = trunc i64 %701 to i32
  store i32 %702, i32* %38, align 4
  %703 = load i32, i32* @inode_number_width, align 4
  %704 = load i32, i32* %38, align 4
  %705 = icmp slt i32 %703, %704
  br i1 %705, label %706, label %708

706:                                              ; preds = %694
  %707 = load i32, i32* %38, align 4
  store i32 %707, i32* @inode_number_width, align 4
  br label %708

708:                                              ; preds = %706, %694
  br label %709

709:                                              ; preds = %708, %691
  %710 = load i8*, i8** %7, align 8
  %711 = call noalias i8* @xstrdup(i8* %710)
  %712 = load %struct.fileinfo*, %struct.fileinfo** %13, align 8
  %713 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %712, i32 0, i32 0
  store i8* %711, i8** %713, align 8
  %714 = load i64, i64* @cwd_n_used, align 8
  %715 = add i64 %714, 1
  store i64 %715, i64* @cwd_n_used, align 8
  %716 = load i64, i64* %12, align 8
  store i64 %716, i64* %6, align 8
  br label %717

717:                                              ; preds = %709, %268, %267
  %718 = load i64, i64* %6, align 8
  ret i64 %718
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @queue_directory(i8* %0, i8* %1, i1 zeroext %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca %struct.pending*, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  %8 = zext i1 %2 to i8
  store i8 %8, i8* %6, align 1
  %9 = call noalias i8* @xmalloc(i64 32)
  %10 = bitcast i8* %9 to %struct.pending*
  store %struct.pending* %10, %struct.pending** %7, align 8
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ne i8* %11, null
  br i1 %12, label %13, label %16

13:                                               ; preds = %3
  %14 = load i8*, i8** %5, align 8
  %15 = call noalias i8* @xstrdup(i8* %14)
  br label %17

16:                                               ; preds = %3
  br label %17

17:                                               ; preds = %16, %13
  %18 = phi i8* [ %15, %13 ], [ null, %16 ]
  %19 = load %struct.pending*, %struct.pending** %7, align 8
  %20 = getelementptr inbounds %struct.pending, %struct.pending* %19, i32 0, i32 1
  store i8* %18, i8** %20, align 8
  %21 = load i8*, i8** %4, align 8
  %22 = icmp ne i8* %21, null
  br i1 %22, label %23, label %26

23:                                               ; preds = %17
  %24 = load i8*, i8** %4, align 8
  %25 = call noalias i8* @xstrdup(i8* %24)
  br label %27

26:                                               ; preds = %17
  br label %27

27:                                               ; preds = %26, %23
  %28 = phi i8* [ %25, %23 ], [ null, %26 ]
  %29 = load %struct.pending*, %struct.pending** %7, align 8
  %30 = getelementptr inbounds %struct.pending, %struct.pending* %29, i32 0, i32 0
  store i8* %28, i8** %30, align 8
  %31 = load i8, i8* %6, align 1
  %32 = trunc i8 %31 to i1
  %33 = load %struct.pending*, %struct.pending** %7, align 8
  %34 = getelementptr inbounds %struct.pending, %struct.pending* %33, i32 0, i32 2
  %35 = zext i1 %32 to i8
  store i8 %35, i8* %34, align 8
  %36 = load %struct.pending*, %struct.pending** @pending_dirs, align 8
  %37 = load %struct.pending*, %struct.pending** %7, align 8
  %38 = getelementptr inbounds %struct.pending, %struct.pending* %37, i32 0, i32 3
  store %struct.pending* %36, %struct.pending** %38, align 8
  %39 = load %struct.pending*, %struct.pending** %7, align 8
  store %struct.pending* %39, %struct.pending** @pending_dirs, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @sort_files() #0 {
  %1 = alloca i8, align 1
  %2 = load i64, i64* @sorted_file_alloc, align 8
  %3 = load i64, i64* @cwd_n_used, align 8
  %4 = load i64, i64* @cwd_n_used, align 8
  %5 = udiv i64 %4, 2
  %6 = add i64 %3, %5
  %7 = icmp ult i64 %2, %6
  br i1 %7, label %8, label %16

8:                                                ; preds = %0
  %9 = load i8**, i8*** @sorted_file, align 8
  %10 = bitcast i8** %9 to i8*
  call void @free(i8* %10) #14
  %11 = load i64, i64* @cwd_n_used, align 8
  %12 = call noalias i8* @xnmalloc(i64 %11, i64 24)
  %13 = bitcast i8* %12 to i8**
  store i8** %13, i8*** @sorted_file, align 8
  %14 = load i64, i64* @cwd_n_used, align 8
  %15 = mul i64 3, %14
  store i64 %15, i64* @sorted_file_alloc, align 8
  br label %16

16:                                               ; preds = %8, %0
  call void @initialize_ordering_vector()
  %17 = load i32, i32* @sort_type, align 4
  %18 = icmp eq i32 %17, -1
  br i1 %18, label %19, label %20

19:                                               ; preds = %16
  br label %57

20:                                               ; preds = %16
  %21 = call i32 @_setjmp(%struct.__jmp_buf_tag* getelementptr inbounds ([1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* @failed_strcoll, i64 0, i64 0)) #19
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %24, label %23

23:                                               ; preds = %20
  store i8 0, i8* %1, align 1
  br label %30

24:                                               ; preds = %20
  store i8 1, i8* %1, align 1
  %25 = load i32, i32* @sort_type, align 4
  %26 = icmp ne i32 %25, 3
  br i1 %26, label %27, label %28

27:                                               ; preds = %24
  br label %29

28:                                               ; preds = %24
  call void @__assert_fail(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.222, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 3816, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__PRETTY_FUNCTION__.sort_files, i64 0, i64 0)) #16
  unreachable

29:                                               ; preds = %27
  call void @initialize_ordering_vector()
  br label %30

30:                                               ; preds = %29, %23
  %31 = load i8**, i8*** @sorted_file, align 8
  %32 = load i64, i64* @cwd_n_used, align 8
  %33 = load i32, i32* @sort_type, align 4
  %34 = load i32, i32* @sort_type, align 4
  %35 = icmp eq i32 %34, 4
  br i1 %35, label %36, label %38

36:                                               ; preds = %30
  %37 = load i32, i32* @time_type, align 4
  br label %39

38:                                               ; preds = %30
  br label %39

39:                                               ; preds = %38, %36
  %40 = phi i32 [ %37, %36 ], [ 0, %38 ]
  %41 = add i32 %33, %40
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds [7 x [2 x [2 x [2 x i32 (i8*, i8*)*]]]], [7 x [2 x [2 x [2 x i32 (i8*, i8*)*]]]]* @sort_functions, i64 0, i64 %42
  %44 = load i8, i8* %1, align 1
  %45 = trunc i8 %44 to i1
  %46 = zext i1 %45 to i64
  %47 = getelementptr inbounds [2 x [2 x [2 x i32 (i8*, i8*)*]]], [2 x [2 x [2 x i32 (i8*, i8*)*]]]* %43, i64 0, i64 %46
  %48 = load i8, i8* @sort_reverse, align 1
  %49 = trunc i8 %48 to i1
  %50 = zext i1 %49 to i64
  %51 = getelementptr inbounds [2 x [2 x i32 (i8*, i8*)*]], [2 x [2 x i32 (i8*, i8*)*]]* %47, i64 0, i64 %50
  %52 = load i8, i8* @directories_first, align 1
  %53 = trunc i8 %52 to i1
  %54 = zext i1 %53 to i64
  %55 = getelementptr inbounds [2 x i32 (i8*, i8*)*], [2 x i32 (i8*, i8*)*]* %51, i64 0, i64 %54
  %56 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %55, align 8
  call void @mpsort(i8** %31, i64 %32, i32 (i8*, i8*)* %56)
  br label %57

57:                                               ; preds = %39, %19
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @extract_dirs_from_files(i8* %0, i1 zeroext %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8, align 1
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8, align 1
  %8 = alloca %struct.fileinfo*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca %struct.fileinfo*, align 8
  store i8* %0, i8** %3, align 8
  %11 = zext i1 %1 to i8
  store i8 %11, i8* %4, align 1
  %12 = load i8*, i8** %3, align 8
  %13 = icmp ne i8* %12, null
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %7, align 1
  %15 = load i8*, i8** %3, align 8
  %16 = icmp ne i8* %15, null
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8
  %19 = icmp ne %struct.hash_table* %18, null
  br i1 %19, label %20, label %22

20:                                               ; preds = %17
  %21 = load i8*, i8** %3, align 8
  call void @queue_directory(i8* null, i8* %21, i1 zeroext false)
  br label %22

22:                                               ; preds = %20, %17, %2
  %23 = load i64, i64* @cwd_n_used, align 8
  store i64 %23, i64* %5, align 8
  br label %24

24:                                               ; preds = %85, %22
  %25 = load i64, i64* %5, align 8
  %26 = add i64 %25, -1
  store i64 %26, i64* %5, align 8
  %27 = icmp ne i64 %25, 0
  br i1 %27, label %28, label %86

28:                                               ; preds = %24
  %29 = load i8**, i8*** @sorted_file, align 8
  %30 = load i64, i64* %5, align 8
  %31 = getelementptr inbounds i8*, i8** %29, i64 %30
  %32 = load i8*, i8** %31, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  store %struct.fileinfo* %33, %struct.fileinfo** %8, align 8
  %34 = load %struct.fileinfo*, %struct.fileinfo** %8, align 8
  %35 = call zeroext i1 @is_directory(%struct.fileinfo* %34)
  br i1 %35, label %36, label %85

36:                                               ; preds = %28
  %37 = load i8, i8* %7, align 1
  %38 = trunc i8 %37 to i1
  br i1 %38, label %39, label %44

39:                                               ; preds = %36
  %40 = load %struct.fileinfo*, %struct.fileinfo** %8, align 8
  %41 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %40, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = call zeroext i1 @basename_is_dot_or_dotdot(i8* %42)
  br i1 %43, label %85, label %44

44:                                               ; preds = %39, %36
  %45 = load i8*, i8** %3, align 8
  %46 = icmp ne i8* %45, null
  br i1 %46, label %47, label %55

47:                                               ; preds = %44
  %48 = load %struct.fileinfo*, %struct.fileinfo** %8, align 8
  %49 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %48, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds i8, i8* %50, i64 0
  %52 = load i8, i8* %51, align 1
  %53 = sext i8 %52 to i32
  %54 = icmp eq i32 %53, 47
  br i1 %54, label %55, label %64

55:                                               ; preds = %47, %44
  %56 = load %struct.fileinfo*, %struct.fileinfo** %8, align 8
  %57 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %56, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = load %struct.fileinfo*, %struct.fileinfo** %8, align 8
  %60 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %59, i32 0, i32 1
  %61 = load i8*, i8** %60, align 8
  %62 = load i8, i8* %4, align 1
  %63 = trunc i8 %62 to i1
  call void @queue_directory(i8* %58, i8* %61, i1 zeroext %63)
  br label %77

64:                                               ; preds = %47
  %65 = load i8*, i8** %3, align 8
  %66 = load %struct.fileinfo*, %struct.fileinfo** %8, align 8
  %67 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %66, i32 0, i32 0
  %68 = load i8*, i8** %67, align 8
  %69 = call i8* @file_name_concat(i8* %65, i8* %68, i8** null)
  store i8* %69, i8** %9, align 8
  %70 = load i8*, i8** %9, align 8
  %71 = load %struct.fileinfo*, %struct.fileinfo** %8, align 8
  %72 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %71, i32 0, i32 1
  %73 = load i8*, i8** %72, align 8
  %74 = load i8, i8* %4, align 1
  %75 = trunc i8 %74 to i1
  call void @queue_directory(i8* %70, i8* %73, i1 zeroext %75)
  %76 = load i8*, i8** %9, align 8
  call void @free(i8* %76) #14
  br label %77

77:                                               ; preds = %64, %55
  %78 = load %struct.fileinfo*, %struct.fileinfo** %8, align 8
  %79 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %78, i32 0, i32 4
  %80 = load i32, i32* %79, align 8
  %81 = icmp eq i32 %80, 9
  br i1 %81, label %82, label %84

82:                                               ; preds = %77
  %83 = load %struct.fileinfo*, %struct.fileinfo** %8, align 8
  call void @free_ent(%struct.fileinfo* %83)
  br label %84

84:                                               ; preds = %82, %77
  br label %85

85:                                               ; preds = %84, %39, %28
  br label %24, !llvm.loop !17

86:                                               ; preds = %24
  store i64 0, i64* %5, align 8
  store i64 0, i64* %6, align 8
  br label %87

87:                                               ; preds = %110, %86
  %88 = load i64, i64* %5, align 8
  %89 = load i64, i64* @cwd_n_used, align 8
  %90 = icmp ult i64 %88, %89
  br i1 %90, label %91, label %113

91:                                               ; preds = %87
  %92 = load i8**, i8*** @sorted_file, align 8
  %93 = load i64, i64* %5, align 8
  %94 = getelementptr inbounds i8*, i8** %92, i64 %93
  %95 = load i8*, i8** %94, align 8
  %96 = bitcast i8* %95 to %struct.fileinfo*
  store %struct.fileinfo* %96, %struct.fileinfo** %10, align 8
  %97 = load %struct.fileinfo*, %struct.fileinfo** %10, align 8
  %98 = bitcast %struct.fileinfo* %97 to i8*
  %99 = load i8**, i8*** @sorted_file, align 8
  %100 = load i64, i64* %6, align 8
  %101 = getelementptr inbounds i8*, i8** %99, i64 %100
  store i8* %98, i8** %101, align 8
  %102 = load %struct.fileinfo*, %struct.fileinfo** %10, align 8
  %103 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %102, i32 0, i32 4
  %104 = load i32, i32* %103, align 8
  %105 = icmp ne i32 %104, 9
  %106 = zext i1 %105 to i32
  %107 = sext i32 %106 to i64
  %108 = load i64, i64* %6, align 8
  %109 = add i64 %108, %107
  store i64 %109, i64* %6, align 8
  br label %110

110:                                              ; preds = %91
  %111 = load i64, i64* %5, align 8
  %112 = add i64 %111, 1
  store i64 %112, i64* %5, align 8
  br label %87, !llvm.loop !18

113:                                              ; preds = %87
  %114 = load i64, i64* %6, align 8
  store i64 %114, i64* @cwd_n_used, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_current_files() #0 {
  %1 = alloca i64, align 8
  %2 = load i32, i32* @format, align 4
  switch i32 %2, label %53 [
    i32 1, label %3
    i32 2, label %20
    i32 3, label %26
    i32 4, label %32
    i32 0, label %33
  ]

3:                                                ; preds = %0
  store i64 0, i64* %1, align 8
  br label %4

4:                                                ; preds = %16, %3
  %5 = load i64, i64* %1, align 8
  %6 = load i64, i64* @cwd_n_used, align 8
  %7 = icmp ult i64 %5, %6
  br i1 %7, label %8, label %19

8:                                                ; preds = %4
  %9 = load i8**, i8*** @sorted_file, align 8
  %10 = load i64, i64* %1, align 8
  %11 = getelementptr inbounds i8*, i8** %9, i64 %10
  %12 = load i8*, i8** %11, align 8
  %13 = bitcast i8* %12 to %struct.fileinfo*
  %14 = call i64 @print_file_name_and_frills(%struct.fileinfo* %13, i64 0)
  %15 = call i32 @putchar_unlocked(i32 10)
  br label %16

16:                                               ; preds = %8
  %17 = load i64, i64* %1, align 8
  %18 = add i64 %17, 1
  store i64 %18, i64* %1, align 8
  br label %4, !llvm.loop !19

19:                                               ; preds = %4
  br label %53

20:                                               ; preds = %0
  %21 = load i64, i64* @line_length, align 8
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %24, label %23

23:                                               ; preds = %20
  call void @print_with_separator(i8 signext 32)
  br label %25

24:                                               ; preds = %20
  call void @print_many_per_line()
  br label %25

25:                                               ; preds = %24, %23
  br label %53

26:                                               ; preds = %0
  %27 = load i64, i64* @line_length, align 8
  %28 = icmp ne i64 %27, 0
  br i1 %28, label %30, label %29

29:                                               ; preds = %26
  call void @print_with_separator(i8 signext 32)
  br label %31

30:                                               ; preds = %26
  call void @print_horizontal()
  br label %31

31:                                               ; preds = %30, %29
  br label %53

32:                                               ; preds = %0
  call void @print_with_separator(i8 signext 44)
  br label %53

33:                                               ; preds = %0
  store i64 0, i64* %1, align 8
  br label %34

34:                                               ; preds = %49, %33
  %35 = load i64, i64* %1, align 8
  %36 = load i64, i64* @cwd_n_used, align 8
  %37 = icmp ult i64 %35, %36
  br i1 %37, label %38, label %52

38:                                               ; preds = %34
  call void @set_normal_color()
  %39 = load i8**, i8*** @sorted_file, align 8
  %40 = load i64, i64* %1, align 8
  %41 = getelementptr inbounds i8*, i8** %39, i64 %40
  %42 = load i8*, i8** %41, align 8
  %43 = bitcast i8* %42 to %struct.fileinfo*
  call void @print_long_format(%struct.fileinfo* %43)
  br label %44

44:                                               ; preds = %38
  %45 = call i32 @putchar_unlocked(i32 10)
  %46 = load i64, i64* @dired_pos, align 8
  %47 = add i64 %46, 1
  store i64 %47, i64* @dired_pos, align 8
  br label %48

48:                                               ; preds = %44
  br label %49

49:                                               ; preds = %48
  %50 = load i64, i64* %1, align 8
  %51 = add i64 %50, 1
  store i64 %51, i64* %1, align 8
  br label %34, !llvm.loop !20

52:                                               ; preds = %34
  br label %53

53:                                               ; preds = %52, %32, %31, %25, %19, %0
  ret void
}

declare dso_local i32 @putchar_unlocked(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal { i64, i64 } @dev_ino_pop() #0 {
  %1 = alloca %struct.dev_ino, align 8
  %2 = alloca i8*, align 8
  %3 = alloca %struct.dev_ino*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.obstack*, align 8
  %6 = alloca i64, align 8
  store i32 16, i32* %4, align 4
  %7 = load i32, i32* %4, align 4
  %8 = sext i32 %7 to i64
  store %struct.obstack* @dev_ino_obstack, %struct.obstack** %5, align 8
  %9 = load %struct.obstack*, %struct.obstack** %5, align 8
  %10 = getelementptr inbounds %struct.obstack, %struct.obstack* %9, i32 0, i32 3
  %11 = load i8*, i8** %10, align 8
  %12 = load %struct.obstack*, %struct.obstack** %5, align 8
  %13 = getelementptr inbounds %struct.obstack, %struct.obstack* %12, i32 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = ptrtoint i8* %11 to i64
  %16 = ptrtoint i8* %14 to i64
  %17 = sub i64 %15, %16
  store i64 %17, i64* %6, align 8
  %18 = load i64, i64* %6, align 8
  %19 = icmp ule i64 %8, %18
  br i1 %19, label %20, label %21

20:                                               ; preds = %0
  br label %22

21:                                               ; preds = %0
  call void @__assert_fail(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 1027, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @__PRETTY_FUNCTION__.dev_ino_pop, i64 0, i64 0)) #16
  unreachable

22:                                               ; preds = %20
  %23 = load i32, i32* %4, align 4
  %24 = sub nsw i32 0, %23
  %25 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @dev_ino_obstack, i32 0, i32 3), align 8
  %26 = sext i32 %24 to i64
  %27 = getelementptr inbounds i8, i8* %25, i64 %26
  store i8* %27, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @dev_ino_obstack, i32 0, i32 3), align 8
  %28 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @dev_ino_obstack, i32 0, i32 3), align 8
  store i8* %28, i8** %2, align 8
  %29 = load i8*, i8** %2, align 8
  %30 = bitcast i8* %29 to %struct.dev_ino*
  store %struct.dev_ino* %30, %struct.dev_ino** %3, align 8
  %31 = load %struct.dev_ino*, %struct.dev_ino** %3, align 8
  %32 = bitcast %struct.dev_ino* %1 to i8*
  %33 = bitcast %struct.dev_ino* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 16, i1 false)
  %34 = bitcast %struct.dev_ino* %1 to { i64, i64 }*
  %35 = load { i64, i64 }, { i64, i64 }* %34, align 8
  ret { i64, i64 } %35
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @free_pending_ent(%struct.pending* %0) #0 {
  %2 = alloca %struct.pending*, align 8
  store %struct.pending* %0, %struct.pending** %2, align 8
  %3 = load %struct.pending*, %struct.pending** %2, align 8
  %4 = getelementptr inbounds %struct.pending, %struct.pending* %3, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  call void @free(i8* %5) #14
  %6 = load %struct.pending*, %struct.pending** %2, align 8
  %7 = getelementptr inbounds %struct.pending, %struct.pending* %6, i32 0, i32 1
  %8 = load i8*, i8** %7, align 8
  call void @free(i8* %8) #14
  %9 = load %struct.pending*, %struct.pending** %2, align 8
  %10 = bitcast %struct.pending* %9 to i8*
  call void @free(i8* %10) #14
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_dir(i8* %0, i8* %1, i1 zeroext %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca %struct.__dirstream*, align 8
  %8 = alloca %struct.dirent*, align 8
  %9 = alloca i64, align 8
  %10 = alloca %struct.stat, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca [652 x i8], align 16
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  %16 = zext i1 %2 to i8
  store i8 %16, i8* %6, align 1
  store i64 0, i64* %9, align 8
  %17 = call i32* @__errno_location() #18
  store i32 0, i32* %17, align 4
  %18 = load i8*, i8** %4, align 8
  %19 = call %struct.__dirstream* @opendir(i8* %18)
  store %struct.__dirstream* %19, %struct.__dirstream** %7, align 8
  %20 = load %struct.__dirstream*, %struct.__dirstream** %7, align 8
  %21 = icmp ne %struct.__dirstream* %20, null
  br i1 %21, label %27, label %22

22:                                               ; preds = %3
  %23 = load i8, i8* %6, align 1
  %24 = trunc i8 %23 to i1
  %25 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.203, i64 0, i64 0)) #14
  %26 = load i8*, i8** %4, align 8
  call void @file_failure(i1 zeroext %24, i8* %25, i8* %26)
  br label %264

27:                                               ; preds = %3
  %28 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8
  %29 = icmp ne %struct.hash_table* %28, null
  br i1 %29, label %30, label %68

30:                                               ; preds = %27
  %31 = load %struct.__dirstream*, %struct.__dirstream** %7, align 8
  %32 = call i32 @dirfd(%struct.__dirstream* %31) #14
  store i32 %32, i32* %11, align 4
  %33 = load i32, i32* %11, align 4
  %34 = icmp sle i32 0, %33
  br i1 %34, label %35, label %38

35:                                               ; preds = %30
  %36 = load i32, i32* %11, align 4
  %37 = call i32 @fstat(i32 %36, %struct.stat* %10) #14
  br label %41

38:                                               ; preds = %30
  %39 = load i8*, i8** %4, align 8
  %40 = call i32 @stat(i8* %39, %struct.stat* %10) #14
  br label %41

41:                                               ; preds = %38, %35
  %42 = phi i32 [ %37, %35 ], [ %40, %38 ]
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %44, label %51

44:                                               ; preds = %41
  %45 = load i8, i8* %6, align 1
  %46 = trunc i8 %45 to i1
  %47 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.204, i64 0, i64 0)) #14
  %48 = load i8*, i8** %4, align 8
  call void @file_failure(i1 zeroext %46, i8* %47, i8* %48)
  %49 = load %struct.__dirstream*, %struct.__dirstream** %7, align 8
  %50 = call i32 @closedir(%struct.__dirstream* %49)
  br label %264

51:                                               ; preds = %41
  %52 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = call zeroext i1 @visit_dir(i64 %53, i64 %55)
  br i1 %56, label %57, label %63

57:                                               ; preds = %51
  %58 = call i8* @gettext(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.205, i64 0, i64 0)) #14
  %59 = load i8*, i8** %4, align 8
  %60 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %59)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %58, i8* %60)
  %61 = load %struct.__dirstream*, %struct.__dirstream** %7, align 8
  %62 = call i32 @closedir(%struct.__dirstream* %61)
  call void @set_exit_status(i1 zeroext true)
  br label %264

63:                                               ; preds = %51
  %64 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 0
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  call void @dev_ino_push(i64 %65, i64 %67)
  br label %68

68:                                               ; preds = %63, %27
  call void @clear_files()
  %69 = load i8, i8* @recursive, align 1
  %70 = trunc i8 %69 to i1
  br i1 %70, label %74, label %71

71:                                               ; preds = %68
  %72 = load i8, i8* @print_dir_name, align 1
  %73 = trunc i8 %72 to i1
  br i1 %73, label %74, label %128

74:                                               ; preds = %71, %68
  %75 = load i8, i8* @print_dir.first, align 1
  %76 = trunc i8 %75 to i1
  br i1 %76, label %83, label %77

77:                                               ; preds = %74
  br label %78

78:                                               ; preds = %77
  %79 = call i32 @putchar_unlocked(i32 10)
  %80 = load i64, i64* @dired_pos, align 8
  %81 = add i64 %80, 1
  store i64 %81, i64* @dired_pos, align 8
  br label %82

82:                                               ; preds = %78
  br label %83

83:                                               ; preds = %82, %74
  store i8 0, i8* @print_dir.first, align 1
  br label %84

84:                                               ; preds = %83
  %85 = load i8, i8* @dired, align 1
  %86 = trunc i8 %85 to i1
  br i1 %86, label %87, label %94

87:                                               ; preds = %84
  br label %88

88:                                               ; preds = %87
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %90 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.206, i64 0, i64 0), %struct._IO_FILE* %89)
  %91 = load i64, i64* @dired_pos, align 8
  %92 = add i64 %91, 2
  store i64 %92, i64* @dired_pos, align 8
  br label %93

93:                                               ; preds = %88
  br label %94

94:                                               ; preds = %93, %84
  br label %95

95:                                               ; preds = %94
  store i8* null, i8** %12, align 8
  %96 = load i8, i8* @print_hyperlink, align 1
  %97 = trunc i8 %96 to i1
  br i1 %97, label %98, label %109

98:                                               ; preds = %95
  %99 = load i8*, i8** %4, align 8
  %100 = call i8* @canonicalize_filename_mode(i8* %99, i32 2)
  store i8* %100, i8** %12, align 8
  %101 = load i8*, i8** %12, align 8
  %102 = icmp ne i8* %101, null
  br i1 %102, label %108, label %103

103:                                              ; preds = %98
  %104 = load i8, i8* %6, align 1
  %105 = trunc i8 %104 to i1
  %106 = call i8* @gettext(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.207, i64 0, i64 0)) #14
  %107 = load i8*, i8** %4, align 8
  call void @file_failure(i1 zeroext %105, i8* %106, i8* %107)
  br label %108

108:                                              ; preds = %103, %98
  br label %109

109:                                              ; preds = %108, %95
  %110 = load i8*, i8** %5, align 8
  %111 = icmp ne i8* %110, null
  br i1 %111, label %112, label %114

112:                                              ; preds = %109
  %113 = load i8*, i8** %5, align 8
  br label %116

114:                                              ; preds = %109
  %115 = load i8*, i8** %4, align 8
  br label %116

116:                                              ; preds = %114, %112
  %117 = phi i8* [ %113, %112 ], [ %115, %114 ]
  %118 = load %struct.quoting_options*, %struct.quoting_options** @dirname_quoting_options, align 8
  %119 = load i8*, i8** %12, align 8
  %120 = call i64 @quote_name(i8* %117, %struct.quoting_options* %118, i32 -1, %struct.bin_str* null, i1 zeroext true, %struct.obstack* @subdired_obstack, i8* %119)
  %121 = load i8*, i8** %12, align 8
  call void @free(i8* %121) #14
  br label %122

122:                                              ; preds = %116
  %123 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %124 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.208, i64 0, i64 0), %struct._IO_FILE* %123)
  %125 = load i64, i64* @dired_pos, align 8
  %126 = add i64 %125, 2
  store i64 %126, i64* @dired_pos, align 8
  br label %127

127:                                              ; preds = %122
  br label %128

128:                                              ; preds = %127, %71
  br label %129

129:                                              ; preds = %192, %128
  %130 = call i32* @__errno_location() #18
  store i32 0, i32* %130, align 4
  %131 = load %struct.__dirstream*, %struct.__dirstream** %7, align 8
  %132 = call %struct.dirent* @readdir(%struct.__dirstream* %131)
  store %struct.dirent* %132, %struct.dirent** %8, align 8
  %133 = load %struct.dirent*, %struct.dirent** %8, align 8
  %134 = icmp ne %struct.dirent* %133, null
  br i1 %134, label %135, label %176

135:                                              ; preds = %129
  %136 = load %struct.dirent*, %struct.dirent** %8, align 8
  %137 = getelementptr inbounds %struct.dirent, %struct.dirent* %136, i32 0, i32 4
  %138 = getelementptr inbounds [256 x i8], [256 x i8]* %137, i64 0, i64 0
  %139 = call zeroext i1 @file_ignored(i8* %138)
  br i1 %139, label %175, label %140

140:                                              ; preds = %135
  store i32 0, i32* %13, align 4
  %141 = load %struct.dirent*, %struct.dirent** %8, align 8
  %142 = getelementptr inbounds %struct.dirent, %struct.dirent* %141, i32 0, i32 3
  %143 = load i8, i8* %142, align 2
  %144 = zext i8 %143 to i32
  switch i32 %144, label %153 [
    i32 6, label %145
    i32 2, label %146
    i32 4, label %147
    i32 1, label %148
    i32 10, label %149
    i32 8, label %150
    i32 12, label %151
    i32 14, label %152
  ]

145:                                              ; preds = %140
  store i32 4, i32* %13, align 4
  br label %153

146:                                              ; preds = %140
  store i32 2, i32* %13, align 4
  br label %153

147:                                              ; preds = %140
  store i32 3, i32* %13, align 4
  br label %153

148:                                              ; preds = %140
  store i32 1, i32* %13, align 4
  br label %153

149:                                              ; preds = %140
  store i32 6, i32* %13, align 4
  br label %153

150:                                              ; preds = %140
  store i32 5, i32* %13, align 4
  br label %153

151:                                              ; preds = %140
  store i32 7, i32* %13, align 4
  br label %153

152:                                              ; preds = %140
  store i32 8, i32* %13, align 4
  br label %153

153:                                              ; preds = %152, %151, %150, %149, %148, %147, %146, %145, %140
  %154 = load %struct.dirent*, %struct.dirent** %8, align 8
  %155 = getelementptr inbounds %struct.dirent, %struct.dirent* %154, i32 0, i32 4
  %156 = getelementptr inbounds [256 x i8], [256 x i8]* %155, i64 0, i64 0
  %157 = load i32, i32* %13, align 4
  %158 = load i8*, i8** %4, align 8
  %159 = call i64 @gobble_file(i8* %156, i32 %157, i64 0, i1 zeroext false, i8* %158)
  %160 = load i64, i64* %9, align 8
  %161 = add i64 %160, %159
  store i64 %161, i64* %9, align 8
  %162 = load i32, i32* @format, align 4
  %163 = icmp eq i32 %162, 1
  br i1 %163, label %164, label %174

164:                                              ; preds = %153
  %165 = load i32, i32* @sort_type, align 4
  %166 = icmp eq i32 %165, -1
  br i1 %166, label %167, label %174

167:                                              ; preds = %164
  %168 = load i8, i8* @print_block_size, align 1
  %169 = trunc i8 %168 to i1
  br i1 %169, label %174, label %170

170:                                              ; preds = %167
  %171 = load i8, i8* @recursive, align 1
  %172 = trunc i8 %171 to i1
  br i1 %172, label %174, label %173

173:                                              ; preds = %170
  call void @sort_files()
  call void @print_current_files()
  call void @clear_files()
  br label %174

174:                                              ; preds = %173, %170, %167, %164, %153
  br label %175

175:                                              ; preds = %174, %135
  br label %192

176:                                              ; preds = %129
  %177 = call i32* @__errno_location() #18
  %178 = load i32, i32* %177, align 4
  %179 = icmp ne i32 %178, 0
  br i1 %179, label %180, label %190

180:                                              ; preds = %176
  %181 = load i8, i8* %6, align 1
  %182 = trunc i8 %181 to i1
  %183 = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.209, i64 0, i64 0)) #14
  %184 = load i8*, i8** %4, align 8
  call void @file_failure(i1 zeroext %182, i8* %183, i8* %184)
  %185 = call i32* @__errno_location() #18
  %186 = load i32, i32* %185, align 4
  %187 = icmp ne i32 %186, 75
  br i1 %187, label %188, label %189

188:                                              ; preds = %180
  br label %193

189:                                              ; preds = %180
  br label %191

190:                                              ; preds = %176
  br label %193

191:                                              ; preds = %189
  br label %192

192:                                              ; preds = %191, %175
  call void @process_signals()
  br label %129

193:                                              ; preds = %190, %188
  %194 = load %struct.__dirstream*, %struct.__dirstream** %7, align 8
  %195 = call i32 @closedir(%struct.__dirstream* %194)
  %196 = icmp ne i32 %195, 0
  br i1 %196, label %197, label %202

197:                                              ; preds = %193
  %198 = load i8, i8* %6, align 1
  %199 = trunc i8 %198 to i1
  %200 = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.210, i64 0, i64 0)) #14
  %201 = load i8*, i8** %4, align 8
  call void @file_failure(i1 zeroext %199, i8* %200, i8* %201)
  br label %202

202:                                              ; preds = %197, %193
  call void @sort_files()
  %203 = load i8, i8* @recursive, align 1
  %204 = trunc i8 %203 to i1
  br i1 %204, label %205, label %207

205:                                              ; preds = %202
  %206 = load i8*, i8** %4, align 8
  call void @extract_dirs_from_files(i8* %206, i1 zeroext false)
  br label %207

207:                                              ; preds = %205, %202
  %208 = load i32, i32* @format, align 4
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %213, label %210

210:                                              ; preds = %207
  %211 = load i8, i8* @print_block_size, align 1
  %212 = trunc i8 %211 to i1
  br i1 %212, label %213, label %260

213:                                              ; preds = %210, %207
  br label %214

214:                                              ; preds = %213
  %215 = load i8, i8* @dired, align 1
  %216 = trunc i8 %215 to i1
  br i1 %216, label %217, label %224

217:                                              ; preds = %214
  br label %218

218:                                              ; preds = %217
  %219 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %220 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.206, i64 0, i64 0), %struct._IO_FILE* %219)
  %221 = load i64, i64* @dired_pos, align 8
  %222 = add i64 %221, 2
  store i64 %222, i64* @dired_pos, align 8
  br label %223

223:                                              ; preds = %218
  br label %224

224:                                              ; preds = %223, %214
  br label %225

225:                                              ; preds = %224
  %226 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.211, i64 0, i64 0)) #14
  store i8* %226, i8** %14, align 8
  br label %227

227:                                              ; preds = %225
  %228 = load i8*, i8** %14, align 8
  %229 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %230 = call i32 @fputs_unlocked(i8* %228, %struct._IO_FILE* %229)
  %231 = load i8*, i8** %14, align 8
  %232 = call i64 @strlen(i8* %231) #17
  %233 = load i64, i64* @dired_pos, align 8
  %234 = add i64 %233, %232
  store i64 %234, i64* @dired_pos, align 8
  br label %235

235:                                              ; preds = %227
  br label %236

236:                                              ; preds = %235
  %237 = call i32 @putchar_unlocked(i32 32)
  %238 = load i64, i64* @dired_pos, align 8
  %239 = add i64 %238, 1
  store i64 %239, i64* @dired_pos, align 8
  br label %240

240:                                              ; preds = %236
  %241 = load i64, i64* %9, align 8
  %242 = getelementptr inbounds [652 x i8], [652 x i8]* %15, i64 0, i64 0
  %243 = load i32, i32* @human_output_opts, align 4
  %244 = load i64, i64* @output_block_size, align 8
  %245 = call i8* @human_readable(i64 %241, i8* %242, i32 %243, i64 512, i64 %244)
  store i8* %245, i8** %14, align 8
  br label %246

246:                                              ; preds = %240
  %247 = load i8*, i8** %14, align 8
  %248 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %249 = call i32 @fputs_unlocked(i8* %247, %struct._IO_FILE* %248)
  %250 = load i8*, i8** %14, align 8
  %251 = call i64 @strlen(i8* %250) #17
  %252 = load i64, i64* @dired_pos, align 8
  %253 = add i64 %252, %251
  store i64 %253, i64* @dired_pos, align 8
  br label %254

254:                                              ; preds = %246
  br label %255

255:                                              ; preds = %254
  %256 = call i32 @putchar_unlocked(i32 10)
  %257 = load i64, i64* @dired_pos, align 8
  %258 = add i64 %257, 1
  store i64 %258, i64* @dired_pos, align 8
  br label %259

259:                                              ; preds = %255
  br label %260

260:                                              ; preds = %259, %210
  %261 = load i64, i64* @cwd_n_used, align 8
  %262 = icmp ne i64 %261, 0
  br i1 %262, label %263, label %264

263:                                              ; preds = %260
  call void @print_current_files()
  br label %264

264:                                              ; preds = %263, %260, %57, %44, %22
  ret void
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @restore_default_color() #0 {
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0))
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1))
  ret void
}

declare dso_local i32 @fflush_unlocked(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @signal_restore() #0 {
  call void @signal_setup(i1 zeroext false)
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @raise(i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @dired_dump_obstack(i8* %0, %struct.obstack* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca %struct.obstack*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.obstack*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64*, align 8
  %9 = alloca %struct.obstack*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store %struct.obstack* %1, %struct.obstack** %4, align 8
  %13 = load %struct.obstack*, %struct.obstack** %4, align 8
  store %struct.obstack* %13, %struct.obstack** %6, align 8
  %14 = load %struct.obstack*, %struct.obstack** %6, align 8
  %15 = getelementptr inbounds %struct.obstack, %struct.obstack* %14, i32 0, i32 3
  %16 = load i8*, i8** %15, align 8
  %17 = load %struct.obstack*, %struct.obstack** %6, align 8
  %18 = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 2
  %19 = load i8*, i8** %18, align 8
  %20 = ptrtoint i8* %16 to i64
  %21 = ptrtoint i8* %19 to i64
  %22 = sub i64 %20, %21
  store i64 %22, i64* %7, align 8
  %23 = load i64, i64* %7, align 8
  %24 = udiv i64 %23, 8
  store i64 %24, i64* %5, align 8
  %25 = load i64, i64* %5, align 8
  %26 = icmp ugt i64 %25, 0
  br i1 %26, label %27, label %115

27:                                               ; preds = %2
  %28 = load %struct.obstack*, %struct.obstack** %4, align 8
  store %struct.obstack* %28, %struct.obstack** %9, align 8
  %29 = load %struct.obstack*, %struct.obstack** %9, align 8
  %30 = getelementptr inbounds %struct.obstack, %struct.obstack* %29, i32 0, i32 2
  %31 = load i8*, i8** %30, align 8
  store i8* %31, i8** %10, align 8
  %32 = load %struct.obstack*, %struct.obstack** %9, align 8
  %33 = getelementptr inbounds %struct.obstack, %struct.obstack* %32, i32 0, i32 3
  %34 = load i8*, i8** %33, align 8
  %35 = load i8*, i8** %10, align 8
  %36 = icmp eq i8* %34, %35
  br i1 %36, label %37, label %43

37:                                               ; preds = %27
  %38 = load %struct.obstack*, %struct.obstack** %9, align 8
  %39 = getelementptr inbounds %struct.obstack, %struct.obstack* %38, i32 0, i32 10
  %40 = load i8, i8* %39, align 8
  %41 = and i8 %40, -3
  %42 = or i8 %41, 2
  store i8 %42, i8* %39, align 8
  br label %43

43:                                               ; preds = %37, %27
  %44 = load %struct.obstack*, %struct.obstack** %9, align 8
  %45 = getelementptr inbounds %struct.obstack, %struct.obstack* %44, i32 0, i32 3
  %46 = load i8*, i8** %45, align 8
  %47 = ptrtoint i8* %46 to i64
  %48 = sub i64 %47, 0
  %49 = load %struct.obstack*, %struct.obstack** %9, align 8
  %50 = getelementptr inbounds %struct.obstack, %struct.obstack* %49, i32 0, i32 6
  %51 = load i64, i64* %50, align 8
  %52 = add i64 %48, %51
  %53 = load %struct.obstack*, %struct.obstack** %9, align 8
  %54 = getelementptr inbounds %struct.obstack, %struct.obstack* %53, i32 0, i32 6
  %55 = load i64, i64* %54, align 8
  %56 = xor i64 %55, -1
  %57 = and i64 %52, %56
  %58 = getelementptr inbounds i8, i8* null, i64 %57
  %59 = load %struct.obstack*, %struct.obstack** %9, align 8
  %60 = getelementptr inbounds %struct.obstack, %struct.obstack* %59, i32 0, i32 3
  store i8* %58, i8** %60, align 8
  %61 = load %struct.obstack*, %struct.obstack** %9, align 8
  %62 = getelementptr inbounds %struct.obstack, %struct.obstack* %61, i32 0, i32 3
  %63 = load i8*, i8** %62, align 8
  %64 = load %struct.obstack*, %struct.obstack** %9, align 8
  %65 = getelementptr inbounds %struct.obstack, %struct.obstack* %64, i32 0, i32 1
  %66 = load %struct._obstack_chunk*, %struct._obstack_chunk** %65, align 8
  %67 = bitcast %struct._obstack_chunk* %66 to i8*
  %68 = ptrtoint i8* %63 to i64
  %69 = ptrtoint i8* %67 to i64
  %70 = sub i64 %68, %69
  %71 = load %struct.obstack*, %struct.obstack** %9, align 8
  %72 = getelementptr inbounds %struct.obstack, %struct.obstack* %71, i32 0, i32 4
  %73 = load i8*, i8** %72, align 8
  %74 = load %struct.obstack*, %struct.obstack** %9, align 8
  %75 = getelementptr inbounds %struct.obstack, %struct.obstack* %74, i32 0, i32 1
  %76 = load %struct._obstack_chunk*, %struct._obstack_chunk** %75, align 8
  %77 = bitcast %struct._obstack_chunk* %76 to i8*
  %78 = ptrtoint i8* %73 to i64
  %79 = ptrtoint i8* %77 to i64
  %80 = sub i64 %78, %79
  %81 = icmp ugt i64 %70, %80
  br i1 %81, label %82, label %88

82:                                               ; preds = %43
  %83 = load %struct.obstack*, %struct.obstack** %9, align 8
  %84 = getelementptr inbounds %struct.obstack, %struct.obstack* %83, i32 0, i32 4
  %85 = load i8*, i8** %84, align 8
  %86 = load %struct.obstack*, %struct.obstack** %9, align 8
  %87 = getelementptr inbounds %struct.obstack, %struct.obstack* %86, i32 0, i32 3
  store i8* %85, i8** %87, align 8
  br label %88

88:                                               ; preds = %82, %43
  %89 = load %struct.obstack*, %struct.obstack** %9, align 8
  %90 = getelementptr inbounds %struct.obstack, %struct.obstack* %89, i32 0, i32 3
  %91 = load i8*, i8** %90, align 8
  %92 = load %struct.obstack*, %struct.obstack** %9, align 8
  %93 = getelementptr inbounds %struct.obstack, %struct.obstack* %92, i32 0, i32 2
  store i8* %91, i8** %93, align 8
  %94 = load i8*, i8** %10, align 8
  store i8* %94, i8** %11, align 8
  %95 = load i8*, i8** %11, align 8
  %96 = bitcast i8* %95 to i64*
  store i64* %96, i64** %8, align 8
  %97 = load i8*, i8** %3, align 8
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %99 = call i32 @fputs_unlocked(i8* %97, %struct._IO_FILE* %98)
  store i64 0, i64* %12, align 8
  br label %100

100:                                              ; preds = %110, %88
  %101 = load i64, i64* %12, align 8
  %102 = load i64, i64* %5, align 8
  %103 = icmp ult i64 %101, %102
  br i1 %103, label %104, label %113

104:                                              ; preds = %100
  %105 = load i64*, i64** %8, align 8
  %106 = load i64, i64* %12, align 8
  %107 = getelementptr inbounds i64, i64* %105, i64 %106
  %108 = load i64, i64* %107, align 8
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.62, i64 0, i64 0), i64 %108)
  br label %110

110:                                              ; preds = %104
  %111 = load i64, i64* %12, align 8
  %112 = add i64 %111, 1
  store i64 %112, i64* %12, align 8
  br label %100, !llvm.loop !21

113:                                              ; preds = %100
  %114 = call i32 @putchar_unlocked(i32 10)
  br label %115

115:                                              ; preds = %113, %2
  ret void
}

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @signal_setup(i1 zeroext %0) #0 {
  %2 = alloca i8, align 1
  %3 = alloca i32, align 4
  %4 = alloca %struct.sigaction, align 8
  %5 = zext i1 %0 to i8
  store i8 %5, i8* %2, align 1
  %6 = load i8, i8* %2, align 1
  %7 = trunc i8 %6 to i1
  br i1 %7, label %8, label %67

8:                                                ; preds = %1
  %9 = call i32 @sigemptyset(%struct.__sigset_t* @caught_signals) #14
  store i32 0, i32* %3, align 4
  br label %10

10:                                               ; preds = %30, %8
  %11 = load i32, i32* %3, align 4
  %12 = icmp slt i32 %11, 12
  br i1 %12, label %13, label %33

13:                                               ; preds = %10
  %14 = load i32, i32* %3, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [12 x i32], [12 x i32]* @signal_setup.sig, i64 0, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = call i32 @sigaction(i32 %17, %struct.sigaction* null, %struct.sigaction* %4) #14
  %19 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %4, i32 0, i32 0
  %20 = bitcast %union.anon.2* %19 to void (i32)**
  %21 = load void (i32)*, void (i32)** %20, align 8
  %22 = icmp ne void (i32)* %21, inttoptr (i64 1 to void (i32)*)
  br i1 %22, label %23, label %29

23:                                               ; preds = %13
  %24 = load i32, i32* %3, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [12 x i32], [12 x i32]* @signal_setup.sig, i64 0, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = call i32 @sigaddset(%struct.__sigset_t* @caught_signals, i32 %27) #14
  br label %29

29:                                               ; preds = %23, %13
  br label %30

30:                                               ; preds = %29
  %31 = load i32, i32* %3, align 4
  %32 = add nsw i32 %31, 1
  store i32 %32, i32* %3, align 4
  br label %10, !llvm.loop !22

33:                                               ; preds = %10
  %34 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %4, i32 0, i32 1
  %35 = bitcast %struct.__sigset_t* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 bitcast (%struct.__sigset_t* @caught_signals to i8*), i64 128, i1 false)
  %36 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %4, i32 0, i32 2
  store i32 268435456, i32* %36, align 8
  store i32 0, i32* %3, align 4
  br label %37

37:                                               ; preds = %63, %33
  %38 = load i32, i32* %3, align 4
  %39 = icmp slt i32 %38, 12
  br i1 %39, label %40, label %66

40:                                               ; preds = %37
  %41 = load i32, i32* %3, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [12 x i32], [12 x i32]* @signal_setup.sig, i64 0, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = call i32 @sigismember(%struct.__sigset_t* @caught_signals, i32 %44) #14
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %62

47:                                               ; preds = %40
  %48 = load i32, i32* %3, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [12 x i32], [12 x i32]* @signal_setup.sig, i64 0, i64 %49
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, 20
  %53 = zext i1 %52 to i64
  %54 = select i1 %52, void (i32)* @stophandler, void (i32)* @sighandler
  %55 = getelementptr inbounds %struct.sigaction, %struct.sigaction* %4, i32 0, i32 0
  %56 = bitcast %union.anon.2* %55 to void (i32)**
  store void (i32)* %54, void (i32)** %56, align 8
  %57 = load i32, i32* %3, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [12 x i32], [12 x i32]* @signal_setup.sig, i64 0, i64 %58
  %60 = load i32, i32* %59, align 4
  %61 = call i32 @sigaction(i32 %60, %struct.sigaction* %4, %struct.sigaction* null) #14
  br label %62

62:                                               ; preds = %47, %40
  br label %63

63:                                               ; preds = %62
  %64 = load i32, i32* %3, align 4
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %3, align 4
  br label %37, !llvm.loop !23

66:                                               ; preds = %37
  br label %89

67:                                               ; preds = %1
  store i32 0, i32* %3, align 4
  br label %68

68:                                               ; preds = %85, %67
  %69 = load i32, i32* %3, align 4
  %70 = icmp slt i32 %69, 12
  br i1 %70, label %71, label %88

71:                                               ; preds = %68
  %72 = load i32, i32* %3, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [12 x i32], [12 x i32]* @signal_setup.sig, i64 0, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = call i32 @sigismember(%struct.__sigset_t* @caught_signals, i32 %75) #14
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %78, label %84

78:                                               ; preds = %71
  %79 = load i32, i32* %3, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [12 x i32], [12 x i32]* @signal_setup.sig, i64 0, i64 %80
  %82 = load i32, i32* %81, align 4
  %83 = call void (i32)* @signal(i32 %82, void (i32)* null) #14
  br label %84

84:                                               ; preds = %78, %71
  br label %85

85:                                               ; preds = %84
  %86 = load i32, i32* %3, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %3, align 4
  br label %68, !llvm.loop !24

88:                                               ; preds = %68
  br label %89

89:                                               ; preds = %88, %66
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @sigemptyset(%struct.__sigset_t*) #1

; Function Attrs: nounwind
declare dso_local i32 @sigaction(i32, %struct.sigaction*, %struct.sigaction*) #1

; Function Attrs: nounwind
declare dso_local i32 @sigaddset(%struct.__sigset_t*, i32) #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nounwind
declare dso_local i32 @sigismember(%struct.__sigset_t*, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @stophandler(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load volatile i32, i32* @interrupt_signal, align 4
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = load volatile i32, i32* @stop_signal_count, align 4
  %7 = add nsw i32 %6, 1
  store volatile i32 %7, i32* @stop_signal_count, align 4
  br label %8

8:                                                ; preds = %5, %1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @sighandler(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load volatile i32, i32* @interrupt_signal, align 4
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = load i32, i32* %2, align 4
  store volatile i32 %6, i32* @interrupt_signal, align 4
  br label %7

7:                                                ; preds = %5, %1
  ret void
}

; Function Attrs: nounwind
declare dso_local void (i32)* @signal(i32, void (i32)*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @put_indicator(%struct.bin_str* %0) #0 {
  %2 = alloca %struct.bin_str*, align 8
  store %struct.bin_str* %0, %struct.bin_str** %2, align 8
  %3 = load i8, i8* @used_color, align 1
  %4 = trunc i8 %3 to i1
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  store i8 1, i8* @used_color, align 1
  %6 = call i32 @tcgetpgrp(i32 1) #14
  %7 = icmp sle i32 0, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %5
  call void @signal_init()
  br label %9

9:                                                ; preds = %8, %5
  call void @prep_non_filename_text()
  br label %10

10:                                               ; preds = %9, %1
  %11 = load %struct.bin_str*, %struct.bin_str** %2, align 8
  %12 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %11, i32 0, i32 1
  %13 = load i8*, i8** %12, align 8
  %14 = load %struct.bin_str*, %struct.bin_str** %2, align 8
  %15 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %14, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %18 = call i64 @fwrite_unlocked(i8* %13, i64 %16, i64 1, %struct._IO_FILE* %17)
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @tcgetpgrp(i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @signal_init() #0 {
  call void @signal_setup(i1 zeroext true)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @prep_non_filename_text() #0 {
  %1 = load i8*, i8** getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2, i32 1), align 8
  %2 = icmp ne i8* %1, null
  br i1 %2, label %3, label %4

3:                                                ; preds = %0
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 2))
  br label %5

4:                                                ; preds = %0
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0))
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 3))
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1))
  br label %5

5:                                                ; preds = %4, %3
  ret void
}

declare dso_local i64 @fwrite_unlocked(i8*, i64, i64, %struct._IO_FILE*) #2

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #6

declare dso_local %struct.__dirstream* @opendir(i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @file_failure(i1 zeroext %0, i8* %1, i8* %2) #0 {
  %4 = alloca i8, align 1
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = zext i1 %0 to i8
  store i8 %7, i8* %4, align 1
  store i8* %1, i8** %5, align 8
  store i8* %2, i8** %6, align 8
  %8 = call i32* @__errno_location() #18
  %9 = load i32, i32* %8, align 4
  %10 = load i8*, i8** %5, align 8
  %11 = load i8*, i8** %6, align 8
  %12 = call i8* @quotearg_style(i32 4, i8* %11)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %9, i8* %10, i8* %12)
  %13 = load i8, i8* %4, align 1
  %14 = trunc i8 %13 to i1
  call void @set_exit_status(i1 zeroext %14)
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @dirfd(%struct.__dirstream*) #1

; Function Attrs: nounwind
declare dso_local i32 @fstat(i32, %struct.stat*) #1

; Function Attrs: nounwind
declare dso_local i32 @stat(i8*, %struct.stat*) #1

declare dso_local i32 @closedir(%struct.__dirstream*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @visit_dir(i64 %0, i64 %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %struct.dev_ino*, align 8
  %6 = alloca %struct.dev_ino*, align 8
  %7 = alloca i8, align 1
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %8 = call noalias i8* @xmalloc(i64 16)
  %9 = bitcast i8* %8 to %struct.dev_ino*
  store %struct.dev_ino* %9, %struct.dev_ino** %5, align 8
  %10 = load i64, i64* %4, align 8
  %11 = load %struct.dev_ino*, %struct.dev_ino** %5, align 8
  %12 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %11, i32 0, i32 0
  store i64 %10, i64* %12, align 8
  %13 = load i64, i64* %3, align 8
  %14 = load %struct.dev_ino*, %struct.dev_ino** %5, align 8
  %15 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %14, i32 0, i32 1
  store i64 %13, i64* %15, align 8
  %16 = load %struct.hash_table*, %struct.hash_table** @active_dir_set, align 8
  %17 = load %struct.dev_ino*, %struct.dev_ino** %5, align 8
  %18 = bitcast %struct.dev_ino* %17 to i8*
  %19 = call i8* @hash_insert(%struct.hash_table* %16, i8* %18)
  %20 = bitcast i8* %19 to %struct.dev_ino*
  store %struct.dev_ino* %20, %struct.dev_ino** %6, align 8
  %21 = load %struct.dev_ino*, %struct.dev_ino** %6, align 8
  %22 = icmp eq %struct.dev_ino* %21, null
  br i1 %22, label %23, label %24

23:                                               ; preds = %2
  call void @xalloc_die() #15
  unreachable

24:                                               ; preds = %2
  %25 = load %struct.dev_ino*, %struct.dev_ino** %6, align 8
  %26 = load %struct.dev_ino*, %struct.dev_ino** %5, align 8
  %27 = icmp ne %struct.dev_ino* %25, %26
  %28 = zext i1 %27 to i8
  store i8 %28, i8* %7, align 1
  %29 = load i8, i8* %7, align 1
  %30 = trunc i8 %29 to i1
  br i1 %30, label %31, label %34

31:                                               ; preds = %24
  %32 = load %struct.dev_ino*, %struct.dev_ino** %5, align 8
  %33 = bitcast %struct.dev_ino* %32 to i8*
  call void @free(i8* %33) #14
  br label %34

34:                                               ; preds = %31, %24
  %35 = load i8, i8* %7, align 1
  %36 = trunc i8 %35 to i1
  ret i1 %36
}

declare dso_local void @error(i32, i32, i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_exit_status(i1 zeroext %0) #0 {
  %2 = alloca i8, align 1
  %3 = zext i1 %0 to i8
  store i8 %3, i8* %2, align 1
  %4 = load i8, i8* %2, align 1
  %5 = trunc i8 %4 to i1
  br i1 %5, label %6, label %7

6:                                                ; preds = %1
  store i32 2, i32* @exit_status, align 4
  br label %12

7:                                                ; preds = %1
  %8 = load i32, i32* @exit_status, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  store i32 1, i32* @exit_status, align 4
  br label %11

11:                                               ; preds = %10, %7
  br label %12

12:                                               ; preds = %11, %6
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @dev_ino_push(i64 %0, i64 %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %struct.dev_ino*, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.obstack*, align 8
  %9 = alloca i64, align 8
  %10 = alloca %struct.obstack*, align 8
  %11 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  store i32 16, i32* %7, align 4
  store %struct.obstack* @dev_ino_obstack, %struct.obstack** %8, align 8
  %12 = load i32, i32* %7, align 4
  %13 = sext i32 %12 to i64
  store i64 %13, i64* %9, align 8
  %14 = load %struct.obstack*, %struct.obstack** %8, align 8
  store %struct.obstack* %14, %struct.obstack** %10, align 8
  %15 = load %struct.obstack*, %struct.obstack** %10, align 8
  %16 = getelementptr inbounds %struct.obstack, %struct.obstack* %15, i32 0, i32 4
  %17 = load i8*, i8** %16, align 8
  %18 = load %struct.obstack*, %struct.obstack** %10, align 8
  %19 = getelementptr inbounds %struct.obstack, %struct.obstack* %18, i32 0, i32 3
  %20 = load i8*, i8** %19, align 8
  %21 = ptrtoint i8* %17 to i64
  %22 = ptrtoint i8* %20 to i64
  %23 = sub i64 %21, %22
  store i64 %23, i64* %11, align 8
  %24 = load i64, i64* %11, align 8
  %25 = load i64, i64* %9, align 8
  %26 = icmp ult i64 %24, %25
  br i1 %26, label %27, label %30

27:                                               ; preds = %2
  %28 = load %struct.obstack*, %struct.obstack** %8, align 8
  %29 = load i64, i64* %9, align 8
  call void @_obstack_newchunk(%struct.obstack* %28, i64 %29)
  br label %30

30:                                               ; preds = %27, %2
  %31 = load i64, i64* %9, align 8
  %32 = load %struct.obstack*, %struct.obstack** %8, align 8
  %33 = getelementptr inbounds %struct.obstack, %struct.obstack* %32, i32 0, i32 3
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 %31
  store i8* %35, i8** %33, align 8
  %36 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @dev_ino_obstack, i32 0, i32 3), align 8
  store i8* %36, i8** %5, align 8
  %37 = load i8*, i8** %5, align 8
  %38 = bitcast i8* %37 to %struct.dev_ino*
  store %struct.dev_ino* %38, %struct.dev_ino** %6, align 8
  %39 = load %struct.dev_ino*, %struct.dev_ino** %6, align 8
  %40 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %39, i32 -1
  store %struct.dev_ino* %40, %struct.dev_ino** %6, align 8
  %41 = load i64, i64* %3, align 8
  %42 = load %struct.dev_ino*, %struct.dev_ino** %6, align 8
  %43 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %42, i32 0, i32 1
  store i64 %41, i64* %43, align 8
  %44 = load i64, i64* %4, align 8
  %45 = load %struct.dev_ino*, %struct.dev_ino** %6, align 8
  %46 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %45, i32 0, i32 0
  store i64 %44, i64* %46, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quote_name(i8* %0, %struct.quoting_options* %1, i32 %2, %struct.bin_str* %3, i1 zeroext %4, %struct.obstack* %5, i8* %6) #0 {
  %8 = alloca i8*, align 8
  %9 = alloca %struct.quoting_options*, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.bin_str*, align 8
  %12 = alloca i8, align 1
  %13 = alloca %struct.obstack*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca [8192 x i8], align 16
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca i8*, align 8
  %21 = alloca i8*, align 8
  %22 = alloca %struct.obstack*, align 8
  %23 = alloca i64, align 8
  %24 = alloca %struct.obstack*, align 8
  %25 = alloca i64, align 8
  %26 = alloca %struct.obstack*, align 8
  %27 = alloca i64, align 8
  %28 = alloca %struct.obstack*, align 8
  %29 = alloca i64, align 8
  store i8* %0, i8** %8, align 8
  store %struct.quoting_options* %1, %struct.quoting_options** %9, align 8
  store i32 %2, i32* %10, align 4
  store %struct.bin_str* %3, %struct.bin_str** %11, align 8
  %30 = zext i1 %4 to i8
  store i8 %30, i8* %12, align 1
  store %struct.obstack* %5, %struct.obstack** %13, align 8
  store i8* %6, i8** %14, align 8
  %31 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  store i8* %31, i8** %16, align 8
  %32 = load i8*, i8** %8, align 8
  %33 = load %struct.quoting_options*, %struct.quoting_options** %9, align 8
  %34 = load i32, i32* %10, align 4
  %35 = call i64 @quote_name_buf(i8** %16, i64 8192, i8* %32, %struct.quoting_options* %33, i32 %34, i64* null, i8* %18)
  store i64 %35, i64* %17, align 8
  %36 = load i8, i8* %18, align 1
  %37 = trunc i8 %36 to i1
  br i1 %37, label %38, label %47

38:                                               ; preds = %7
  %39 = load i8, i8* %12, align 1
  %40 = trunc i8 %39 to i1
  br i1 %40, label %41, label %47

41:                                               ; preds = %38
  br label %42

42:                                               ; preds = %41
  %43 = call i32 @putchar_unlocked(i32 32)
  %44 = load i64, i64* @dired_pos, align 8
  %45 = add i64 %44, 1
  store i64 %45, i64* @dired_pos, align 8
  br label %46

46:                                               ; preds = %42
  br label %47

47:                                               ; preds = %46, %38, %7
  %48 = load %struct.bin_str*, %struct.bin_str** %11, align 8
  %49 = icmp ne %struct.bin_str* %48, null
  br i1 %49, label %50, label %53

50:                                               ; preds = %47
  %51 = load %struct.bin_str*, %struct.bin_str** %11, align 8
  %52 = call zeroext i1 @print_color_indicator(%struct.bin_str* %51)
  br label %53

53:                                               ; preds = %50, %47
  store i8 0, i8* %19, align 1
  %54 = load i8*, i8** %14, align 8
  %55 = icmp ne i8* %54, null
  br i1 %55, label %56, label %86

56:                                               ; preds = %53
  %57 = load i8, i8* @align_variable_outer_quotes, align 1
  %58 = trunc i8 %57 to i1
  br i1 %58, label %59, label %70

59:                                               ; preds = %56
  %60 = load i8, i8* @cwd_some_quoted, align 1
  %61 = trunc i8 %60 to i1
  br i1 %61, label %62, label %70

62:                                               ; preds = %59
  %63 = load i8, i8* %18, align 1
  %64 = trunc i8 %63 to i1
  br i1 %64, label %70, label %65

65:                                               ; preds = %62
  store i8 1, i8* %19, align 1
  %66 = load i8*, i8** %16, align 8
  %67 = load i8, i8* %66, align 1
  %68 = sext i8 %67 to i32
  %69 = call i32 @putchar_unlocked(i32 %68)
  br label %70

70:                                               ; preds = %65, %62, %59, %56
  %71 = load i8*, i8** @hostname, align 8
  %72 = call i8* @file_escape(i8* %71, i1 zeroext false)
  store i8* %72, i8** %20, align 8
  %73 = load i8*, i8** %14, align 8
  %74 = call i8* @file_escape(i8* %73, i1 zeroext true)
  store i8* %74, i8** %21, align 8
  %75 = load i8*, i8** %20, align 8
  %76 = load i8*, i8** %21, align 8
  %77 = load i8, i8* %76, align 1
  %78 = sext i8 %77 to i32
  %79 = icmp eq i32 %78, 47
  %80 = zext i1 %79 to i64
  %81 = select i1 %79, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.213, i64 0, i64 0)
  %82 = load i8*, i8** %21, align 8
  %83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.212, i64 0, i64 0), i8* %75, i8* %81, i8* %82)
  %84 = load i8*, i8** %20, align 8
  call void @free(i8* %84) #14
  %85 = load i8*, i8** %21, align 8
  call void @free(i8* %85) #14
  br label %86

86:                                               ; preds = %70, %53
  %87 = load %struct.obstack*, %struct.obstack** %13, align 8
  %88 = icmp ne %struct.obstack* %87, null
  br i1 %88, label %89, label %123

89:                                               ; preds = %86
  br label %90

90:                                               ; preds = %89
  %91 = load i8, i8* @dired, align 1
  %92 = trunc i8 %91 to i1
  br i1 %92, label %93, label %121

93:                                               ; preds = %90
  %94 = load %struct.obstack*, %struct.obstack** %13, align 8
  store %struct.obstack* %94, %struct.obstack** %22, align 8
  store i64 8, i64* %23, align 8
  %95 = load %struct.obstack*, %struct.obstack** %22, align 8
  store %struct.obstack* %95, %struct.obstack** %24, align 8
  %96 = load %struct.obstack*, %struct.obstack** %24, align 8
  %97 = getelementptr inbounds %struct.obstack, %struct.obstack* %96, i32 0, i32 4
  %98 = load i8*, i8** %97, align 8
  %99 = load %struct.obstack*, %struct.obstack** %24, align 8
  %100 = getelementptr inbounds %struct.obstack, %struct.obstack* %99, i32 0, i32 3
  %101 = load i8*, i8** %100, align 8
  %102 = ptrtoint i8* %98 to i64
  %103 = ptrtoint i8* %101 to i64
  %104 = sub i64 %102, %103
  store i64 %104, i64* %25, align 8
  %105 = load i64, i64* %25, align 8
  %106 = load i64, i64* %23, align 8
  %107 = icmp ult i64 %105, %106
  br i1 %107, label %108, label %111

108:                                              ; preds = %93
  %109 = load %struct.obstack*, %struct.obstack** %22, align 8
  %110 = load i64, i64* %23, align 8
  call void @_obstack_newchunk(%struct.obstack* %109, i64 %110)
  br label %111

111:                                              ; preds = %108, %93
  %112 = load %struct.obstack*, %struct.obstack** %22, align 8
  %113 = getelementptr inbounds %struct.obstack, %struct.obstack* %112, i32 0, i32 3
  %114 = load i8*, i8** %113, align 8
  %115 = load i64, i64* %23, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %114, i8* align 8 bitcast (i64* @dired_pos to i8*), i64 %115, i1 false)
  %116 = load i64, i64* %23, align 8
  %117 = load %struct.obstack*, %struct.obstack** %22, align 8
  %118 = getelementptr inbounds %struct.obstack, %struct.obstack* %117, i32 0, i32 3
  %119 = load i8*, i8** %118, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 %116
  store i8* %120, i8** %118, align 8
  br label %121

121:                                              ; preds = %111, %90
  br label %122

122:                                              ; preds = %121
  br label %123

123:                                              ; preds = %122, %86
  %124 = load i8*, i8** %16, align 8
  %125 = load i8, i8* %19, align 1
  %126 = trunc i8 %125 to i1
  %127 = zext i1 %126 to i32
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds i8, i8* %124, i64 %128
  %130 = load i64, i64* %17, align 8
  %131 = load i8, i8* %19, align 1
  %132 = trunc i8 %131 to i1
  %133 = zext i1 %132 to i32
  %134 = mul nsw i32 %133, 2
  %135 = sext i32 %134 to i64
  %136 = sub i64 %130, %135
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %138 = call i64 @fwrite_unlocked(i8* %129, i64 1, i64 %136, %struct._IO_FILE* %137)
  %139 = load i64, i64* %17, align 8
  %140 = load i64, i64* @dired_pos, align 8
  %141 = add i64 %140, %139
  store i64 %141, i64* @dired_pos, align 8
  %142 = load %struct.obstack*, %struct.obstack** %13, align 8
  %143 = icmp ne %struct.obstack* %142, null
  br i1 %143, label %144, label %178

144:                                              ; preds = %123
  br label %145

145:                                              ; preds = %144
  %146 = load i8, i8* @dired, align 1
  %147 = trunc i8 %146 to i1
  br i1 %147, label %148, label %176

148:                                              ; preds = %145
  %149 = load %struct.obstack*, %struct.obstack** %13, align 8
  store %struct.obstack* %149, %struct.obstack** %26, align 8
  store i64 8, i64* %27, align 8
  %150 = load %struct.obstack*, %struct.obstack** %26, align 8
  store %struct.obstack* %150, %struct.obstack** %28, align 8
  %151 = load %struct.obstack*, %struct.obstack** %28, align 8
  %152 = getelementptr inbounds %struct.obstack, %struct.obstack* %151, i32 0, i32 4
  %153 = load i8*, i8** %152, align 8
  %154 = load %struct.obstack*, %struct.obstack** %28, align 8
  %155 = getelementptr inbounds %struct.obstack, %struct.obstack* %154, i32 0, i32 3
  %156 = load i8*, i8** %155, align 8
  %157 = ptrtoint i8* %153 to i64
  %158 = ptrtoint i8* %156 to i64
  %159 = sub i64 %157, %158
  store i64 %159, i64* %29, align 8
  %160 = load i64, i64* %29, align 8
  %161 = load i64, i64* %27, align 8
  %162 = icmp ult i64 %160, %161
  br i1 %162, label %163, label %166

163:                                              ; preds = %148
  %164 = load %struct.obstack*, %struct.obstack** %26, align 8
  %165 = load i64, i64* %27, align 8
  call void @_obstack_newchunk(%struct.obstack* %164, i64 %165)
  br label %166

166:                                              ; preds = %163, %148
  %167 = load %struct.obstack*, %struct.obstack** %26, align 8
  %168 = getelementptr inbounds %struct.obstack, %struct.obstack* %167, i32 0, i32 3
  %169 = load i8*, i8** %168, align 8
  %170 = load i64, i64* %27, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %169, i8* align 8 bitcast (i64* @dired_pos to i8*), i64 %170, i1 false)
  %171 = load i64, i64* %27, align 8
  %172 = load %struct.obstack*, %struct.obstack** %26, align 8
  %173 = getelementptr inbounds %struct.obstack, %struct.obstack* %172, i32 0, i32 3
  %174 = load i8*, i8** %173, align 8
  %175 = getelementptr inbounds i8, i8* %174, i64 %171
  store i8* %175, i8** %173, align 8
  br label %176

176:                                              ; preds = %166, %145
  br label %177

177:                                              ; preds = %176
  br label %178

178:                                              ; preds = %177, %123
  %179 = load i8*, i8** %14, align 8
  %180 = icmp ne i8* %179, null
  br i1 %180, label %181, label %195

181:                                              ; preds = %178
  %182 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %183 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.214, i64 0, i64 0), %struct._IO_FILE* %182)
  %184 = load i8, i8* %19, align 1
  %185 = trunc i8 %184 to i1
  br i1 %185, label %186, label %194

186:                                              ; preds = %181
  %187 = load i8*, i8** %16, align 8
  %188 = load i64, i64* %17, align 8
  %189 = getelementptr inbounds i8, i8* %187, i64 %188
  %190 = getelementptr inbounds i8, i8* %189, i64 -1
  %191 = load i8, i8* %190, align 1
  %192 = sext i8 %191 to i32
  %193 = call i32 @putchar_unlocked(i32 %192)
  br label %194

194:                                              ; preds = %186, %181
  br label %195

195:                                              ; preds = %194, %178
  %196 = load i8*, i8** %16, align 8
  %197 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  %198 = icmp ne i8* %196, %197
  br i1 %198, label %199, label %205

199:                                              ; preds = %195
  %200 = load i8*, i8** %16, align 8
  %201 = load i8*, i8** %8, align 8
  %202 = icmp ne i8* %200, %201
  br i1 %202, label %203, label %205

203:                                              ; preds = %199
  %204 = load i8*, i8** %16, align 8
  call void @free(i8* %204) #14
  br label %205

205:                                              ; preds = %203, %199, %195
  %206 = load i64, i64* %17, align 8
  %207 = load i8, i8* %18, align 1
  %208 = trunc i8 %207 to i1
  %209 = zext i1 %208 to i64
  %210 = add i64 %206, %209
  ret i64 %210
}

declare dso_local %struct.dirent* @readdir(%struct.__dirstream*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @file_ignored(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i32, i32* @ignore_mode, align 4
  %4 = icmp ne i32 %3, 2
  br i1 %4, label %5, label %27

5:                                                ; preds = %1
  %6 = load i8*, i8** %2, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 0
  %8 = load i8, i8* %7, align 1
  %9 = sext i8 %8 to i32
  %10 = icmp eq i32 %9, 46
  br i1 %10, label %11, label %27

11:                                               ; preds = %5
  %12 = load i32, i32* @ignore_mode, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %38, label %14

14:                                               ; preds = %11
  %15 = load i8*, i8** %2, align 8
  %16 = load i8*, i8** %2, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  %18 = load i8, i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = icmp eq i32 %19, 46
  %21 = zext i1 %20 to i32
  %22 = add nsw i32 1, %21
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %15, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = icmp ne i8 %25, 0
  br i1 %26, label %27, label %38

27:                                               ; preds = %14, %5, %1
  %28 = load i32, i32* @ignore_mode, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %34

30:                                               ; preds = %27
  %31 = load %struct.ignore_pattern*, %struct.ignore_pattern** @hide_patterns, align 8
  %32 = load i8*, i8** %2, align 8
  %33 = call zeroext i1 @patterns_match(%struct.ignore_pattern* %31, i8* %32)
  br i1 %33, label %38, label %34

34:                                               ; preds = %30, %27
  %35 = load %struct.ignore_pattern*, %struct.ignore_pattern** @ignore_patterns, align 8
  %36 = load i8*, i8** %2, align 8
  %37 = call zeroext i1 @patterns_match(%struct.ignore_pattern* %35, i8* %36)
  br label %38

38:                                               ; preds = %34, %30, %14, %11
  %39 = phi i1 [ true, %30 ], [ true, %14 ], [ true, %11 ], [ %37, %34 ]
  ret i1 %39
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @process_signals() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca %struct.__sigset_t, align 8
  br label %4

4:                                                ; preds = %30, %0
  %5 = load volatile i32, i32* @interrupt_signal, align 4
  %6 = icmp ne i32 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = load volatile i32, i32* @stop_signal_count, align 4
  %9 = icmp ne i32 %8, 0
  br label %10

10:                                               ; preds = %7, %4
  %11 = phi i1 [ true, %4 ], [ %9, %7 ]
  br i1 %11, label %12, label %34

12:                                               ; preds = %10
  %13 = load i8, i8* @used_color, align 1
  %14 = trunc i8 %13 to i1
  br i1 %14, label %15, label %16

15:                                               ; preds = %12
  call void @restore_default_color()
  br label %16

16:                                               ; preds = %15, %12
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %18 = call i32 @fflush_unlocked(%struct._IO_FILE* %17)
  %19 = call i32 @sigprocmask(i32 0, %struct.__sigset_t* @caught_signals, %struct.__sigset_t* %3) #14
  %20 = load volatile i32, i32* @interrupt_signal, align 4
  store i32 %20, i32* %1, align 4
  %21 = load volatile i32, i32* @stop_signal_count, align 4
  store i32 %21, i32* %2, align 4
  %22 = load i32, i32* %2, align 4
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %16
  %25 = load i32, i32* %2, align 4
  %26 = sub nsw i32 %25, 1
  store volatile i32 %26, i32* @stop_signal_count, align 4
  store i32 19, i32* %1, align 4
  br label %30

27:                                               ; preds = %16
  %28 = load i32, i32* %1, align 4
  %29 = call void (i32)* @signal(i32 %28, void (i32)* null) #14
  br label %30

30:                                               ; preds = %27, %24
  %31 = load i32, i32* %1, align 4
  %32 = call i32 @raise(i32 %31) #14
  %33 = call i32 @sigprocmask(i32 2, %struct.__sigset_t* %3, %struct.__sigset_t* null) #14
  br label %4, !llvm.loop !25

34:                                               ; preds = %10
  ret void
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #4

; Function Attrs: nounwind
declare dso_local i32 @sigprocmask(i32, %struct.__sigset_t*, %struct.__sigset_t*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @patterns_match(%struct.ignore_pattern* %0, i8* %1) #0 {
  %3 = alloca i1, align 1
  %4 = alloca %struct.ignore_pattern*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %struct.ignore_pattern*, align 8
  store %struct.ignore_pattern* %0, %struct.ignore_pattern** %4, align 8
  store i8* %1, i8** %5, align 8
  %7 = load %struct.ignore_pattern*, %struct.ignore_pattern** %4, align 8
  store %struct.ignore_pattern* %7, %struct.ignore_pattern** %6, align 8
  br label %8

8:                                                ; preds = %20, %2
  %9 = load %struct.ignore_pattern*, %struct.ignore_pattern** %6, align 8
  %10 = icmp ne %struct.ignore_pattern* %9, null
  br i1 %10, label %11, label %24

11:                                               ; preds = %8
  %12 = load %struct.ignore_pattern*, %struct.ignore_pattern** %6, align 8
  %13 = getelementptr inbounds %struct.ignore_pattern, %struct.ignore_pattern* %12, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = load i8*, i8** %5, align 8
  %16 = call i32 @fnmatch(i8* %14, i8* %15, i32 4)
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %11
  store i1 true, i1* %3, align 1
  br label %25

19:                                               ; preds = %11
  br label %20

20:                                               ; preds = %19
  %21 = load %struct.ignore_pattern*, %struct.ignore_pattern** %6, align 8
  %22 = getelementptr inbounds %struct.ignore_pattern, %struct.ignore_pattern* %21, i32 0, i32 1
  %23 = load %struct.ignore_pattern*, %struct.ignore_pattern** %22, align 8
  store %struct.ignore_pattern* %23, %struct.ignore_pattern** %6, align 8
  br label %8, !llvm.loop !26

24:                                               ; preds = %8
  store i1 false, i1* %3, align 1
  br label %25

25:                                               ; preds = %24, %18
  %26 = load i1, i1* %3, align 1
  ret i1 %26
}

declare dso_local i32 @fnmatch(i8*, i8*, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quote_name_buf(i8** %0, i64 %1, i8* %2, %struct.quoting_options* %3, i32 %4, i64* %5, i8* %6) #0 {
  %8 = alloca i8**, align 8
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca %struct.quoting_options*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i64*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i8, align 1
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  %21 = alloca i8*, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i8*, align 8
  %24 = alloca %struct.__mbstate_t, align 4
  %25 = alloca i32, align 4
  %26 = alloca i64, align 8
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i8*, align 8
  %30 = alloca i8*, align 8
  %31 = alloca i8*, align 8
  store i8** %0, i8*** %8, align 8
  store i64 %1, i64* %9, align 8
  store i8* %2, i8** %10, align 8
  store %struct.quoting_options* %3, %struct.quoting_options** %11, align 8
  store i32 %4, i32* %12, align 4
  store i64* %5, i64** %13, align 8
  store i8* %6, i8** %14, align 8
  %32 = load i8**, i8*** %8, align 8
  %33 = load i8*, i8** %32, align 8
  store i8* %33, i8** %15, align 8
  store i64 0, i64* %17, align 8
  %34 = load %struct.quoting_options*, %struct.quoting_options** %11, align 8
  %35 = call i32 @get_quoting_style(%struct.quoting_options* %34)
  store i32 %35, i32* %19, align 4
  %36 = load i8, i8* @qmark_funny_chars, align 1
  %37 = trunc i8 %36 to i1
  br i1 %37, label %38, label %49

38:                                               ; preds = %7
  %39 = load i32, i32* %19, align 4
  %40 = icmp eq i32 %39, 1
  br i1 %40, label %47, label %41

41:                                               ; preds = %38
  %42 = load i32, i32* %19, align 4
  %43 = icmp eq i32 %42, 2
  br i1 %43, label %47, label %44

44:                                               ; preds = %41
  %45 = load i32, i32* %19, align 4
  %46 = icmp eq i32 %45, 0
  br label %47

47:                                               ; preds = %44, %41, %38
  %48 = phi i1 [ true, %41 ], [ true, %38 ], [ %46, %44 ]
  br label %49

49:                                               ; preds = %47, %7
  %50 = phi i1 [ false, %7 ], [ %48, %47 ]
  %51 = zext i1 %50 to i8
  store i8 %51, i8* %20, align 1
  %52 = load i32, i32* %12, align 4
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %54, label %89

54:                                               ; preds = %49
  %55 = load i8*, i8** %15, align 8
  %56 = load i64, i64* %9, align 8
  %57 = load i8*, i8** %10, align 8
  %58 = load %struct.quoting_options*, %struct.quoting_options** %11, align 8
  %59 = call i64 @quotearg_buffer(i8* %55, i64 %56, i8* %57, i64 -1, %struct.quoting_options* %58)
  store i64 %59, i64* %17, align 8
  %60 = load i64, i64* %9, align 8
  %61 = load i64, i64* %17, align 8
  %62 = icmp ule i64 %60, %61
  br i1 %62, label %63, label %73

63:                                               ; preds = %54
  %64 = load i64, i64* %17, align 8
  %65 = add i64 %64, 1
  %66 = call noalias i8* @xmalloc(i64 %65)
  store i8* %66, i8** %15, align 8
  %67 = load i8*, i8** %15, align 8
  %68 = load i64, i64* %17, align 8
  %69 = add i64 %68, 1
  %70 = load i8*, i8** %10, align 8
  %71 = load %struct.quoting_options*, %struct.quoting_options** %11, align 8
  %72 = call i64 @quotearg_buffer(i8* %67, i64 %69, i8* %70, i64 -1, %struct.quoting_options* %71)
  br label %73

73:                                               ; preds = %63, %54
  %74 = load i8*, i8** %10, align 8
  %75 = load i8, i8* %74, align 1
  %76 = sext i8 %75 to i32
  %77 = load i8*, i8** %15, align 8
  %78 = load i8, i8* %77, align 1
  %79 = sext i8 %78 to i32
  %80 = icmp ne i32 %76, %79
  br i1 %80, label %86, label %81

81:                                               ; preds = %73
  %82 = load i8*, i8** %10, align 8
  %83 = call i64 @strlen(i8* %82) #17
  %84 = load i64, i64* %17, align 8
  %85 = icmp ne i64 %83, %84
  br label %86

86:                                               ; preds = %81, %73
  %87 = phi i1 [ true, %73 ], [ %85, %81 ]
  %88 = zext i1 %87 to i8
  store i8 %88, i8* %18, align 1
  br label %112

89:                                               ; preds = %49
  %90 = load i8, i8* %20, align 1
  %91 = trunc i8 %90 to i1
  br i1 %91, label %92, label %107

92:                                               ; preds = %89
  %93 = load i8*, i8** %10, align 8
  %94 = call i64 @strlen(i8* %93) #17
  store i64 %94, i64* %17, align 8
  %95 = load i64, i64* %9, align 8
  %96 = load i64, i64* %17, align 8
  %97 = icmp ule i64 %95, %96
  br i1 %97, label %98, label %102

98:                                               ; preds = %92
  %99 = load i64, i64* %17, align 8
  %100 = add i64 %99, 1
  %101 = call noalias i8* @xmalloc(i64 %100)
  store i8* %101, i8** %15, align 8
  br label %102

102:                                              ; preds = %98, %92
  %103 = load i8*, i8** %15, align 8
  %104 = load i8*, i8** %10, align 8
  %105 = load i64, i64* %17, align 8
  %106 = add i64 %105, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %103, i8* align 1 %104, i64 %106, i1 false)
  store i8 0, i8* %18, align 1
  br label %111

107:                                              ; preds = %89
  %108 = load i8*, i8** %10, align 8
  %109 = call i64 @strlen(i8* %108) #17
  store i64 %109, i64* %17, align 8
  %110 = load i8*, i8** %10, align 8
  store i8* %110, i8** %15, align 8
  store i8 0, i8* %18, align 1
  br label %111

111:                                              ; preds = %107, %102
  br label %112

112:                                              ; preds = %111, %86
  %113 = load i8, i8* %20, align 1
  %114 = trunc i8 %113 to i1
  br i1 %114, label %115, label %246

115:                                              ; preds = %112
  %116 = call i64 @__ctype_get_mb_cur_max() #14
  %117 = icmp ugt i64 %116, 1
  br i1 %117, label %118, label %216

118:                                              ; preds = %115
  %119 = load i8*, i8** %15, align 8
  store i8* %119, i8** %21, align 8
  %120 = load i8*, i8** %15, align 8
  %121 = load i64, i64* %17, align 8
  %122 = getelementptr inbounds i8, i8* %120, i64 %121
  store i8* %122, i8** %22, align 8
  %123 = load i8*, i8** %15, align 8
  store i8* %123, i8** %23, align 8
  store i64 0, i64* %16, align 8
  br label %124

124:                                              ; preds = %209, %118
  %125 = load i8*, i8** %21, align 8
  %126 = load i8*, i8** %22, align 8
  %127 = icmp ult i8* %125, %126
  br i1 %127, label %128, label %210

128:                                              ; preds = %124
  %129 = load i8*, i8** %21, align 8
  %130 = load i8, i8* %129, align 1
  %131 = sext i8 %130 to i32
  switch i32 %131, label %140 [
    i32 32, label %132
    i32 33, label %132
    i32 34, label %132
    i32 35, label %132
    i32 37, label %132
    i32 38, label %132
    i32 39, label %132
    i32 40, label %132
    i32 41, label %132
    i32 42, label %132
    i32 43, label %132
    i32 44, label %132
    i32 45, label %132
    i32 46, label %132
    i32 47, label %132
    i32 48, label %132
    i32 49, label %132
    i32 50, label %132
    i32 51, label %132
    i32 52, label %132
    i32 53, label %132
    i32 54, label %132
    i32 55, label %132
    i32 56, label %132
    i32 57, label %132
    i32 58, label %132
    i32 59, label %132
    i32 60, label %132
    i32 61, label %132
    i32 62, label %132
    i32 63, label %132
    i32 65, label %132
    i32 66, label %132
    i32 67, label %132
    i32 68, label %132
    i32 69, label %132
    i32 70, label %132
    i32 71, label %132
    i32 72, label %132
    i32 73, label %132
    i32 74, label %132
    i32 75, label %132
    i32 76, label %132
    i32 77, label %132
    i32 78, label %132
    i32 79, label %132
    i32 80, label %132
    i32 81, label %132
    i32 82, label %132
    i32 83, label %132
    i32 84, label %132
    i32 85, label %132
    i32 86, label %132
    i32 87, label %132
    i32 88, label %132
    i32 89, label %132
    i32 90, label %132
    i32 91, label %132
    i32 92, label %132
    i32 93, label %132
    i32 94, label %132
    i32 95, label %132
    i32 97, label %132
    i32 98, label %132
    i32 99, label %132
    i32 100, label %132
    i32 101, label %132
    i32 102, label %132
    i32 103, label %132
    i32 104, label %132
    i32 105, label %132
    i32 106, label %132
    i32 107, label %132
    i32 108, label %132
    i32 109, label %132
    i32 110, label %132
    i32 111, label %132
    i32 112, label %132
    i32 113, label %132
    i32 114, label %132
    i32 115, label %132
    i32 116, label %132
    i32 117, label %132
    i32 118, label %132
    i32 119, label %132
    i32 120, label %132
    i32 121, label %132
    i32 122, label %132
    i32 123, label %132
    i32 124, label %132
    i32 125, label %132
    i32 126, label %132
  ]

132:                                              ; preds
  %133 = load i8*, i8** %21, align 8
  %134 = getelementptr inbounds i8, i8* %133, i32 1
  store i8* %134, i8** %21, align 8
  %135 = load i8, i8* %133, align 1
  %136 = load i8*, i8** %23, align 8
  %137 = getelementptr inbounds i8, i8* %136, i32 1
  store i8* %137, i8** %23, align 8
  store i8 %135, i8* %136, align 1
  %138 = load i64, i64* %16, align 8
  %139 = add i64 %138, 1
  store i64 %139, i64* %16, align 8
  br label %209

140:                                              ; preds = %128
  %141 = bitcast %struct.__mbstate_t* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %141, i8 0, i64 8, i1 false)
  br label %142

142:                                              ; preds = %204, %140
  %143 = load i8*, i8** %21, align 8
  %144 = load i8*, i8** %22, align 8
  %145 = load i8*, i8** %21, align 8
  %146 = ptrtoint i8* %144 to i64
  %147 = ptrtoint i8* %145 to i64
  %148 = sub i64 %146, %147
  %149 = call i64 @rpl_mbrtowc(i32* %25, i8* %143, i64 %148, %struct.__mbstate_t* %24)
  store i64 %149, i64* %26, align 8
  %150 = load i64, i64* %26, align 8
  %151 = icmp eq i64 %150, -1
  br i1 %151, label %152, label %159

152:                                              ; preds = %142
  %153 = load i8*, i8** %21, align 8
  %154 = getelementptr inbounds i8, i8* %153, i32 1
  store i8* %154, i8** %21, align 8
  %155 = load i8*, i8** %23, align 8
  %156 = getelementptr inbounds i8, i8* %155, i32 1
  store i8* %156, i8** %23, align 8
  store i8 63, i8* %155, align 1
  %157 = load i64, i64* %16, align 8
  %158 = add i64 %157, 1
  store i64 %158, i64* %16, align 8
  br label %208

159:                                              ; preds = %142
  %160 = load i64, i64* %26, align 8
  %161 = icmp eq i64 %160, -2
  br i1 %161, label %162, label %168

162:                                              ; preds = %159
  %163 = load i8*, i8** %22, align 8
  store i8* %163, i8** %21, align 8
  %164 = load i8*, i8** %23, align 8
  %165 = getelementptr inbounds i8, i8* %164, i32 1
  store i8* %165, i8** %23, align 8
  store i8 63, i8* %164, align 1
  %166 = load i64, i64* %16, align 8
  %167 = add i64 %166, 1
  store i64 %167, i64* %16, align 8
  br label %208

168:                                              ; preds = %159
  %169 = load i64, i64* %26, align 8
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %171, label %172

171:                                              ; preds = %168
  store i64 1, i64* %26, align 8
  br label %172

172:                                              ; preds = %171, %168
  %173 = load i32, i32* %25, align 4
  %174 = call i32 @wcwidth(i32 %173) #14
  store i32 %174, i32* %27, align 4
  %175 = load i32, i32* %27, align 4
  %176 = icmp sge i32 %175, 0
  br i1 %176, label %177, label %195

177:                                              ; preds = %172
  br label %178

178:                                              ; preds = %187, %177
  %179 = load i64, i64* %26, align 8
  %180 = icmp ugt i64 %179, 0
  br i1 %180, label %181, label %190

181:                                              ; preds = %178
  %182 = load i8*, i8** %21, align 8
  %183 = getelementptr inbounds i8, i8* %182, i32 1
  store i8* %183, i8** %21, align 8
  %184 = load i8, i8* %182, align 1
  %185 = load i8*, i8** %23, align 8
  %186 = getelementptr inbounds i8, i8* %185, i32 1
  store i8* %186, i8** %23, align 8
  store i8 %184, i8* %185, align 1
  br label %187

187:                                              ; preds = %181
  %188 = load i64, i64* %26, align 8
  %189 = add i64 %188, -1
  store i64 %189, i64* %26, align 8
  br label %178, !llvm.loop !27

190:                                              ; preds = %178
  %191 = load i32, i32* %27, align 4
  %192 = sext i32 %191 to i64
  %193 = load i64, i64* %16, align 8
  %194 = add i64 %193, %192
  store i64 %194, i64* %16, align 8
  br label %203

195:                                              ; preds = %172
  %196 = load i64, i64* %26, align 8
  %197 = load i8*, i8** %21, align 8
  %198 = getelementptr inbounds i8, i8* %197, i64 %196
  store i8* %198, i8** %21, align 8
  %199 = load i8*, i8** %23, align 8
  %200 = getelementptr inbounds i8, i8* %199, i32 1
  store i8* %200, i8** %23, align 8
  store i8 63, i8* %199, align 1
  %201 = load i64, i64* %16, align 8
  %202 = add i64 %201, 1
  store i64 %202, i64* %16, align 8
  br label %203

203:                                              ; preds = %195, %190
  br label %204

204:                                              ; preds = %203
  %205 = call i32 @mbsinit(%struct.__mbstate_t* %24) #17
  %206 = icmp ne i32 %205, 0
  %207 = xor i1 %206, true
  br i1 %207, label %142, label %208, !llvm.loop !28

208:                                              ; preds = %204, %162, %152
  br label %209

209:                                              ; preds = %208, %132
  br label %124, !llvm.loop !29

210:                                              ; preds = %124
  %211 = load i8*, i8** %23, align 8
  %212 = load i8*, i8** %15, align 8
  %213 = ptrtoint i8* %211 to i64
  %214 = ptrtoint i8* %212 to i64
  %215 = sub i64 %213, %214
  store i64 %215, i64* %17, align 8
  br label %245

216:                                              ; preds = %115
  %217 = load i8*, i8** %15, align 8
  store i8* %217, i8** %28, align 8
  %218 = load i8*, i8** %15, align 8
  %219 = load i64, i64* %17, align 8
  %220 = getelementptr inbounds i8, i8* %218, i64 %219
  store i8* %220, i8** %29, align 8
  br label %221

221:                                              ; preds = %240, %216
  %222 = load i8*, i8** %28, align 8
  %223 = load i8*, i8** %29, align 8
  %224 = icmp ult i8* %222, %223
  br i1 %224, label %225, label %243

225:                                              ; preds = %221
  %226 = call i16** @__ctype_b_loc() #18
  %227 = load i16*, i16** %226, align 8
  %228 = load i8*, i8** %28, align 8
  %229 = load i8, i8* %228, align 1
  %230 = call zeroext i8 @to_uchar(i8 signext %229)
  %231 = zext i8 %230 to i32
  %232 = sext i32 %231 to i64
  %233 = getelementptr inbounds i16, i16* %227, i64 %232
  %234 = load i16, i16* %233, align 2
  %235 = zext i16 %234 to i32
  %236 = and i32 %235, 16384
  %237 = icmp ne i32 %236, 0
  br i1 %237, label %240, label %238

238:                                              ; preds = %225
  %239 = load i8*, i8** %28, align 8
  store i8 63, i8* %239, align 1
  br label %240

240:                                              ; preds = %238, %225
  %241 = load i8*, i8** %28, align 8
  %242 = getelementptr inbounds i8, i8* %241, i32 1
  store i8* %242, i8** %28, align 8
  br label %221, !llvm.loop !30

243:                                              ; preds = %221
  %244 = load i64, i64* %17, align 8
  store i64 %244, i64* %16, align 8
  br label %245

245:                                              ; preds = %243, %210
  br label %288

246:                                              ; preds = %112
  %247 = load i64*, i64** %13, align 8
  %248 = icmp ne i64* %247, null
  br i1 %248, label %249, label %287

249:                                              ; preds = %246
  %250 = call i64 @__ctype_get_mb_cur_max() #14
  %251 = icmp ugt i64 %250, 1
  br i1 %251, label %252, label %257

252:                                              ; preds = %249
  %253 = load i8*, i8** %15, align 8
  %254 = load i64, i64* %17, align 8
  %255 = call i32 @mbsnwidth(i8* %253, i64 %254, i32 0)
  %256 = sext i32 %255 to i64
  store i64 %256, i64* %16, align 8
  br label %286

257:                                              ; preds = %249
  %258 = load i8*, i8** %15, align 8
  store i8* %258, i8** %30, align 8
  %259 = load i8*, i8** %15, align 8
  %260 = load i64, i64* %17, align 8
  %261 = getelementptr inbounds i8, i8* %259, i64 %260
  store i8* %261, i8** %31, align 8
  store i64 0, i64* %16, align 8
  br label %262

262:                                              ; preds = %282, %257
  %263 = load i8*, i8** %30, align 8
  %264 = load i8*, i8** %31, align 8
  %265 = icmp ult i8* %263, %264
  br i1 %265, label %266, label %285

266:                                              ; preds = %262
  %267 = call i16** @__ctype_b_loc() #18
  %268 = load i16*, i16** %267, align 8
  %269 = load i8*, i8** %30, align 8
  %270 = load i8, i8* %269, align 1
  %271 = call zeroext i8 @to_uchar(i8 signext %270)
  %272 = zext i8 %271 to i32
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds i16, i16* %268, i64 %273
  %275 = load i16, i16* %274, align 2
  %276 = zext i16 %275 to i32
  %277 = and i32 %276, 16384
  %278 = icmp ne i32 %277, 0
  br i1 %278, label %279, label %282

279:                                              ; preds = %266
  %280 = load i64, i64* %16, align 8
  %281 = add i64 %280, 1
  store i64 %281, i64* %16, align 8
  br label %282

282:                                              ; preds = %279, %266
  %283 = load i8*, i8** %30, align 8
  %284 = getelementptr inbounds i8, i8* %283, i32 1
  store i8* %284, i8** %30, align 8
  br label %262, !llvm.loop !31

285:                                              ; preds = %262
  br label %286

286:                                              ; preds = %285, %252
  br label %287

287:                                              ; preds = %286, %246
  br label %288

288:                                              ; preds = %287, %245
  %289 = load i8, i8* @align_variable_outer_quotes, align 1
  %290 = trunc i8 %289 to i1
  br i1 %290, label %291, label %298

291:                                              ; preds = %288
  %292 = load i8, i8* @cwd_some_quoted, align 1
  %293 = trunc i8 %292 to i1
  br i1 %293, label %294, label %298

294:                                              ; preds = %291
  %295 = load i8, i8* %18, align 1
  %296 = trunc i8 %295 to i1
  %297 = xor i1 %296, true
  br label %298

298:                                              ; preds = %294, %291, %288
  %299 = phi i1 [ false, %291 ], [ false, %288 ], [ %297, %294 ]
  %300 = load i8*, i8** %14, align 8
  %301 = zext i1 %299 to i8
  store i8 %301, i8* %300, align 1
  %302 = load i64*, i64** %13, align 8
  %303 = icmp ne i64* %302, null
  br i1 %303, label %304, label %307

304:                                              ; preds = %298
  %305 = load i64, i64* %16, align 8
  %306 = load i64*, i64** %13, align 8
  store i64 %305, i64* %306, align 8
  br label %307

307:                                              ; preds = %304, %298
  %308 = load i8*, i8** %15, align 8
  %309 = load i8**, i8*** %8, align 8
  store i8* %308, i8** %309, align 8
  %310 = load i64, i64* %17, align 8
  ret i64 %310
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @print_color_indicator(%struct.bin_str* %0) #0 {
  %2 = alloca %struct.bin_str*, align 8
  store %struct.bin_str* %0, %struct.bin_str** %2, align 8
  %3 = load %struct.bin_str*, %struct.bin_str** %2, align 8
  %4 = icmp ne %struct.bin_str* %3, null
  br i1 %4, label %5, label %10

5:                                                ; preds = %1
  %6 = call zeroext i1 @is_colored(i32 4)
  br i1 %6, label %7, label %8

7:                                                ; preds = %5
  call void @restore_default_color()
  br label %8

8:                                                ; preds = %7, %5
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0))
  %9 = load %struct.bin_str*, %struct.bin_str** %2, align 8
  call void @put_indicator(%struct.bin_str* %9)
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1))
  br label %10

10:                                               ; preds = %8, %1
  %11 = load %struct.bin_str*, %struct.bin_str** %2, align 8
  %12 = icmp ne %struct.bin_str* %11, null
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @file_escape(i8* %0, i1 zeroext %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8, align 1
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  %7 = zext i1 %1 to i8
  store i8 %7, i8* %4, align 1
  %8 = load i8*, i8** %3, align 8
  %9 = call i64 @strlen(i8* %8) #17
  %10 = add i64 %9, 1
  %11 = call noalias i8* @xnmalloc(i64 3, i64 %10)
  store i8* %11, i8** %5, align 8
  %12 = load i8*, i8** %5, align 8
  store i8* %12, i8** %6, align 8
  br label %13

13:                                               ; preds = %56, %2
  %14 = load i8*, i8** %3, align 8
  %15 = load i8, i8* %14, align 1
  %16 = icmp ne i8 %15, 0
  br i1 %16, label %17, label %57

17:                                               ; preds = %13
  %18 = load i8, i8* %4, align 1
  %19 = trunc i8 %18 to i1
  br i1 %19, label %20, label %30

20:                                               ; preds = %17
  %21 = load i8*, i8** %3, align 8
  %22 = load i8, i8* %21, align 1
  %23 = sext i8 %22 to i32
  %24 = icmp eq i32 %23, 47
  br i1 %24, label %25, label %30

25:                                               ; preds = %20
  %26 = load i8*, i8** %6, align 8
  %27 = getelementptr inbounds i8, i8* %26, i32 1
  store i8* %27, i8** %6, align 8
  store i8 47, i8* %26, align 1
  %28 = load i8*, i8** %3, align 8
  %29 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %29, i8** %3, align 8
  br label %56

30:                                               ; preds = %20, %17
  %31 = load i8*, i8** %3, align 8
  %32 = load i8, i8* %31, align 1
  %33 = call zeroext i8 @to_uchar(i8 signext %32)
  %34 = zext i8 %33 to i64
  %35 = getelementptr inbounds [256 x i8], [256 x i8]* @RFC3986, i64 0, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = icmp ne i8 %36, 0
  br i1 %37, label %38, label %44

38:                                               ; preds = %30
  %39 = load i8*, i8** %3, align 8
  %40 = getelementptr inbounds i8, i8* %39, i32 1
  store i8* %40, i8** %3, align 8
  %41 = load i8, i8* %39, align 1
  %42 = load i8*, i8** %6, align 8
  %43 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %43, i8** %6, align 8
  store i8 %41, i8* %42, align 1
  br label %55

44:                                               ; preds = %30
  %45 = load i8*, i8** %6, align 8
  %46 = load i8*, i8** %3, align 8
  %47 = getelementptr inbounds i8, i8* %46, i32 1
  store i8* %47, i8** %3, align 8
  %48 = load i8, i8* %46, align 1
  %49 = call zeroext i8 @to_uchar(i8 signext %48)
  %50 = zext i8 %49 to i32
  %51 = call i32 (i8*, i8*, ...) @sprintf(i8* %45, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.215, i64 0, i64 0), i32 %50) #14
  %52 = load i8*, i8** %6, align 8
  %53 = sext i32 %51 to i64
  %54 = getelementptr inbounds i8, i8* %52, i64 %53
  store i8* %54, i8** %6, align 8
  br label %55

55:                                               ; preds = %44, %38
  br label %56

56:                                               ; preds = %55, %25
  br label %13, !llvm.loop !32

57:                                               ; preds = %13
  %58 = load i8*, i8** %6, align 8
  store i8 0, i8* %58, align 1
  %59 = load i8*, i8** %5, align 8
  ret i8* %59
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i8 @to_uchar(i8 signext %0) #0 {
  %2 = alloca i8, align 1
  store i8 %0, i8* %2, align 1
  %3 = load i8, i8* %2, align 1
  ret i8 %3
}

; Function Attrs: nounwind
declare dso_local i32 @sprintf(i8*, i8*, ...) #1

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

; Function Attrs: nounwind
declare dso_local i32 @wcwidth(i32) #1

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #4

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @print_file_name_and_frills(%struct.fileinfo* %0, i64 %1) #0 {
  %3 = alloca %struct.fileinfo*, align 8
  %4 = alloca i64, align 8
  %5 = alloca [652 x i8], align 16
  %6 = alloca i64, align 8
  store %struct.fileinfo* %0, %struct.fileinfo** %3, align 8
  store i64 %1, i64* %4, align 8
  call void @set_normal_color()
  %7 = load i8, i8* @print_inode, align 1
  %8 = trunc i8 %7 to i1
  br i1 %8, label %9, label %21

9:                                                ; preds = %2
  %10 = load i32, i32* @format, align 4
  %11 = icmp eq i32 %10, 4
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %15

13:                                               ; preds = %9
  %14 = load i32, i32* @inode_number_width, align 4
  br label %15

15:                                               ; preds = %13, %12
  %16 = phi i32 [ 0, %12 ], [ %14, %13 ]
  %17 = getelementptr inbounds [652 x i8], [652 x i8]* %5, i64 0, i64 0
  %18 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %19 = call i8* @format_inode(i8* %17, i64 652, %struct.fileinfo* %18)
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.224, i64 0, i64 0), i32 %16, i8* %19)
  br label %21

21:                                               ; preds = %15, %2
  %22 = load i8, i8* @print_block_size, align 1
  %23 = trunc i8 %22 to i1
  br i1 %23, label %24, label %49

24:                                               ; preds = %21
  %25 = load i32, i32* @format, align 4
  %26 = icmp eq i32 %25, 4
  br i1 %26, label %27, label %28

27:                                               ; preds = %24
  br label %30

28:                                               ; preds = %24
  %29 = load i32, i32* @block_size_width, align 4
  br label %30

30:                                               ; preds = %28, %27
  %31 = phi i32 [ 0, %27 ], [ %29, %28 ]
  %32 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %33 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i32 0, i32 7
  %34 = load i8, i8* %33, align 8
  %35 = trunc i8 %34 to i1
  br i1 %35, label %37, label %36

36:                                               ; preds = %30
  br label %46

37:                                               ; preds = %30
  %38 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %39 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %38, i32 0, i32 3
  %40 = getelementptr inbounds %struct.stat, %struct.stat* %39, i32 0, i32 10
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds [652 x i8], [652 x i8]* %5, i64 0, i64 0
  %43 = load i32, i32* @human_output_opts, align 4
  %44 = load i64, i64* @output_block_size, align 8
  %45 = call i8* @human_readable(i64 %41, i8* %42, i32 %43, i64 512, i64 %44)
  br label %46

46:                                               ; preds = %37, %36
  %47 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), %36 ], [ %45, %37 ]
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.224, i64 0, i64 0), i32 %31, i8* %47)
  br label %49

49:                                               ; preds = %46, %21
  %50 = load i8, i8* @print_scontext, align 1
  %51 = trunc i8 %50 to i1
  br i1 %51, label %52, label %64

52:                                               ; preds = %49
  %53 = load i32, i32* @format, align 4
  %54 = icmp eq i32 %53, 4
  br i1 %54, label %55, label %56

55:                                               ; preds = %52
  br label %58

56:                                               ; preds = %52
  %57 = load i32, i32* @scontext_width, align 4
  br label %58

58:                                               ; preds = %56, %55
  %59 = phi i32 [ 0, %55 ], [ %57, %56 ]
  %60 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %61 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %60, i32 0, i32 6
  %62 = load i8*, i8** %61, align 8
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.224, i64 0, i64 0), i32 %59, i8* %62)
  br label %64

64:                                               ; preds = %58, %49
  %65 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %66 = load i64, i64* %4, align 8
  %67 = call i64 @print_name_with_quoting(%struct.fileinfo* %65, i1 zeroext false, %struct.obstack* null, i64 %66)
  store i64 %67, i64* %6, align 8
  %68 = load i32, i32* @indicator_style, align 4
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %70, label %86

70:                                               ; preds = %64
  %71 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %72 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %71, i32 0, i32 7
  %73 = load i8, i8* %72, align 8
  %74 = trunc i8 %73 to i1
  %75 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %76 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %75, i32 0, i32 3
  %77 = getelementptr inbounds %struct.stat, %struct.stat* %76, i32 0, i32 3
  %78 = load i32, i32* %77, align 8
  %79 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %80 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %79, i32 0, i32 4
  %81 = load i32, i32* %80, align 8
  %82 = call zeroext i1 @print_type_indicator(i1 zeroext %74, i32 %78, i32 %81)
  %83 = zext i1 %82 to i64
  %84 = load i64, i64* %6, align 8
  %85 = add i64 %84, %83
  store i64 %85, i64* %6, align 8
  br label %86

86:                                               ; preds = %70, %64
  %87 = load i64, i64* %6, align 8
  ret i64 %87
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_with_separator(i8 signext %0) #0 {
  %2 = alloca i8, align 1
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %struct.fileinfo*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8, align 1
  store i8 %0, i8* %2, align 1
  store i64 0, i64* %4, align 8
  store i64 0, i64* %3, align 8
  br label %8

8:                                                ; preds = %62, %1
  %9 = load i64, i64* %3, align 8
  %10 = load i64, i64* @cwd_n_used, align 8
  %11 = icmp ult i64 %9, %10
  br i1 %11, label %12, label %65

12:                                               ; preds = %8
  %13 = load i8**, i8*** @sorted_file, align 8
  %14 = load i64, i64* %3, align 8
  %15 = getelementptr inbounds i8*, i8** %13, i64 %14
  %16 = load i8*, i8** %15, align 8
  %17 = bitcast i8* %16 to %struct.fileinfo*
  store %struct.fileinfo* %17, %struct.fileinfo** %5, align 8
  %18 = load i64, i64* @line_length, align 8
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %12
  %21 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %22 = call i64 @length_of_file_name_and_frills(%struct.fileinfo* %21)
  br label %24

23:                                               ; preds = %12
  br label %24

24:                                               ; preds = %23, %20
  %25 = phi i64 [ %22, %20 ], [ 0, %23 ]
  store i64 %25, i64* %6, align 8
  %26 = load i64, i64* %3, align 8
  %27 = icmp ne i64 %26, 0
  br i1 %27, label %28, label %55

28:                                               ; preds = %24
  %29 = load i64, i64* @line_length, align 8
  %30 = icmp ne i64 %29, 0
  br i1 %30, label %31, label %44

31:                                               ; preds = %28
  %32 = load i64, i64* %4, align 8
  %33 = load i64, i64* %6, align 8
  %34 = add i64 %32, %33
  %35 = add i64 %34, 2
  %36 = load i64, i64* @line_length, align 8
  %37 = icmp ult i64 %35, %36
  br i1 %37, label %38, label %47

38:                                               ; preds = %31
  %39 = load i64, i64* %4, align 8
  %40 = load i64, i64* %6, align 8
  %41 = sub i64 -1, %40
  %42 = sub i64 %41, 2
  %43 = icmp ule i64 %39, %42
  br i1 %43, label %44, label %47

44:                                               ; preds = %38, %28
  %45 = load i64, i64* %4, align 8
  %46 = add i64 %45, 2
  store i64 %46, i64* %4, align 8
  store i8 32, i8* %7, align 1
  br label %48

47:                                               ; preds = %38, %31
  store i64 0, i64* %4, align 8
  store i8 10, i8* %7, align 1
  br label %48

48:                                               ; preds = %47, %44
  %49 = load i8, i8* %2, align 1
  %50 = sext i8 %49 to i32
  %51 = call i32 @putchar_unlocked(i32 %50)
  %52 = load i8, i8* %7, align 1
  %53 = sext i8 %52 to i32
  %54 = call i32 @putchar_unlocked(i32 %53)
  br label %55

55:                                               ; preds = %48, %24
  %56 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %57 = load i64, i64* %4, align 8
  %58 = call i64 @print_file_name_and_frills(%struct.fileinfo* %56, i64 %57)
  %59 = load i64, i64* %6, align 8
  %60 = load i64, i64* %4, align 8
  %61 = add i64 %60, %59
  store i64 %61, i64* %4, align 8
  br label %62

62:                                               ; preds = %55
  %63 = load i64, i64* %3, align 8
  %64 = add i64 %63, 1
  store i64 %64, i64* %3, align 8
  br label %8, !llvm.loop !33

65:                                               ; preds = %8
  %66 = call i32 @putchar_unlocked(i32 10)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_many_per_line() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca %struct.column_info*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.fileinfo*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = call i64 @calculate_columns(i1 zeroext true)
  store i64 %11, i64* %2, align 8
  %12 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %13 = load i64, i64* %2, align 8
  %14 = sub i64 %13, 1
  %15 = getelementptr inbounds %struct.column_info, %struct.column_info* %12, i64 %14
  store %struct.column_info* %15, %struct.column_info** %3, align 8
  %16 = load i64, i64* @cwd_n_used, align 8
  %17 = load i64, i64* %2, align 8
  %18 = udiv i64 %16, %17
  %19 = load i64, i64* @cwd_n_used, align 8
  %20 = load i64, i64* %2, align 8
  %21 = urem i64 %19, %20
  %22 = icmp ne i64 %21, 0
  %23 = zext i1 %22 to i32
  %24 = sext i32 %23 to i64
  %25 = add i64 %18, %24
  store i64 %25, i64* %4, align 8
  store i64 0, i64* %1, align 8
  br label %26

26:                                               ; preds = %69, %0
  %27 = load i64, i64* %1, align 8
  %28 = load i64, i64* %4, align 8
  %29 = icmp ult i64 %27, %28
  br i1 %29, label %30, label %72

30:                                               ; preds = %26
  store i64 0, i64* %5, align 8
  %31 = load i64, i64* %1, align 8
  store i64 %31, i64* %6, align 8
  store i64 0, i64* %7, align 8
  br label %32

32:                                               ; preds = %57, %30
  %33 = load i8**, i8*** @sorted_file, align 8
  %34 = load i64, i64* %6, align 8
  %35 = getelementptr inbounds i8*, i8** %33, i64 %34
  %36 = load i8*, i8** %35, align 8
  %37 = bitcast i8* %36 to %struct.fileinfo*
  store %struct.fileinfo* %37, %struct.fileinfo** %8, align 8
  %38 = load %struct.fileinfo*, %struct.fileinfo** %8, align 8
  %39 = call i64 @length_of_file_name_and_frills(%struct.fileinfo* %38)
  store i64 %39, i64* %9, align 8
  %40 = load %struct.column_info*, %struct.column_info** %3, align 8
  %41 = getelementptr inbounds %struct.column_info, %struct.column_info* %40, i32 0, i32 2
  %42 = load i64*, i64** %41, align 8
  %43 = load i64, i64* %5, align 8
  %44 = add i64 %43, 1
  store i64 %44, i64* %5, align 8
  %45 = getelementptr inbounds i64, i64* %42, i64 %43
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %10, align 8
  %47 = load %struct.fileinfo*, %struct.fileinfo** %8, align 8
  %48 = load i64, i64* %7, align 8
  %49 = call i64 @print_file_name_and_frills(%struct.fileinfo* %47, i64 %48)
  %50 = load i64, i64* %4, align 8
  %51 = load i64, i64* %6, align 8
  %52 = add i64 %51, %50
  store i64 %52, i64* %6, align 8
  %53 = load i64, i64* %6, align 8
  %54 = load i64, i64* @cwd_n_used, align 8
  %55 = icmp uge i64 %53, %54
  br i1 %55, label %56, label %57

56:                                               ; preds = %32
  br label %67

57:                                               ; preds = %32
  %58 = load i64, i64* %7, align 8
  %59 = load i64, i64* %9, align 8
  %60 = add i64 %58, %59
  %61 = load i64, i64* %7, align 8
  %62 = load i64, i64* %10, align 8
  %63 = add i64 %61, %62
  call void @indent(i64 %60, i64 %63)
  %64 = load i64, i64* %10, align 8
  %65 = load i64, i64* %7, align 8
  %66 = add i64 %65, %64
  store i64 %66, i64* %7, align 8
  br label %32

67:                                               ; preds = %56
  %68 = call i32 @putchar_unlocked(i32 10)
  br label %69

69:                                               ; preds = %67
  %70 = load i64, i64* %1, align 8
  %71 = add i64 %70, 1
  store i64 %71, i64* %1, align 8
  br label %26, !llvm.loop !34

72:                                               ; preds = %26
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_horizontal() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca %struct.column_info*, align 8
  %5 = alloca %struct.fileinfo*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  store i64 0, i64* %2, align 8
  %9 = call i64 @calculate_columns(i1 zeroext false)
  store i64 %9, i64* %3, align 8
  %10 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %11 = load i64, i64* %3, align 8
  %12 = sub i64 %11, 1
  %13 = getelementptr inbounds %struct.column_info, %struct.column_info* %10, i64 %12
  store %struct.column_info* %13, %struct.column_info** %4, align 8
  %14 = load i8**, i8*** @sorted_file, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 0
  %16 = load i8*, i8** %15, align 8
  %17 = bitcast i8* %16 to %struct.fileinfo*
  store %struct.fileinfo* %17, %struct.fileinfo** %5, align 8
  %18 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %19 = call i64 @length_of_file_name_and_frills(%struct.fileinfo* %18)
  store i64 %19, i64* %6, align 8
  %20 = load %struct.column_info*, %struct.column_info** %4, align 8
  %21 = getelementptr inbounds %struct.column_info, %struct.column_info* %20, i32 0, i32 2
  %22 = load i64*, i64** %21, align 8
  %23 = getelementptr inbounds i64, i64* %22, i64 0
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %7, align 8
  %25 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %26 = call i64 @print_file_name_and_frills(%struct.fileinfo* %25, i64 0)
  store i64 1, i64* %1, align 8
  br label %27

27:                                               ; preds = %66, %0
  %28 = load i64, i64* %1, align 8
  %29 = load i64, i64* @cwd_n_used, align 8
  %30 = icmp ult i64 %28, %29
  br i1 %30, label %31, label %69

31:                                               ; preds = %27
  %32 = load i64, i64* %1, align 8
  %33 = load i64, i64* %3, align 8
  %34 = urem i64 %32, %33
  store i64 %34, i64* %8, align 8
  %35 = load i64, i64* %8, align 8
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %31
  %38 = call i32 @putchar_unlocked(i32 10)
  store i64 0, i64* %2, align 8
  br label %49

39:                                               ; preds = %31
  %40 = load i64, i64* %2, align 8
  %41 = load i64, i64* %6, align 8
  %42 = add i64 %40, %41
  %43 = load i64, i64* %2, align 8
  %44 = load i64, i64* %7, align 8
  %45 = add i64 %43, %44
  call void @indent(i64 %42, i64 %45)
  %46 = load i64, i64* %7, align 8
  %47 = load i64, i64* %2, align 8
  %48 = add i64 %47, %46
  store i64 %48, i64* %2, align 8
  br label %49

49:                                               ; preds = %39, %37
  %50 = load i8**, i8*** @sorted_file, align 8
  %51 = load i64, i64* %1, align 8
  %52 = getelementptr inbounds i8*, i8** %50, i64 %51
  %53 = load i8*, i8** %52, align 8
  %54 = bitcast i8* %53 to %struct.fileinfo*
  store %struct.fileinfo* %54, %struct.fileinfo** %5, align 8
  %55 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %56 = load i64, i64* %2, align 8
  %57 = call i64 @print_file_name_and_frills(%struct.fileinfo* %55, i64 %56)
  %58 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %59 = call i64 @length_of_file_name_and_frills(%struct.fileinfo* %58)
  store i64 %59, i64* %6, align 8
  %60 = load %struct.column_info*, %struct.column_info** %4, align 8
  %61 = getelementptr inbounds %struct.column_info, %struct.column_info* %60, i32 0, i32 2
  %62 = load i64*, i64** %61, align 8
  %63 = load i64, i64* %8, align 8
  %64 = getelementptr inbounds i64, i64* %62, i64 %63
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %7, align 8
  br label %66

66:                                               ; preds = %49
  %67 = load i64, i64* %1, align 8
  %68 = add i64 %67, 1
  store i64 %68, i64* %1, align 8
  br label %27, !llvm.loop !35

69:                                               ; preds = %27
  %70 = call i32 @putchar_unlocked(i32 10)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_normal_color() #0 {
  %1 = load i8, i8* @print_with_color, align 1
  %2 = trunc i8 %1 to i1
  br i1 %2, label %3, label %6

3:                                                ; preds = %0
  %4 = call zeroext i1 @is_colored(i32 4)
  br i1 %4, label %5, label %6

5:                                                ; preds = %3
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 0))
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 4))
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 1))
  br label %6

6:                                                ; preds = %5, %3, %0
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_long_format(%struct.fileinfo* %0) #0 {
  %2 = alloca %struct.fileinfo*, align 8
  %3 = alloca [12 x i8], align 1
  %4 = alloca [3643 x i8], align 16
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %struct.dev_ino, align 8
  %8 = alloca %struct.tm, align 8
  %9 = alloca %struct.dev_ino, align 8
  %10 = alloca %struct.dev_ino, align 8
  %11 = alloca %struct.dev_ino, align 8
  %12 = alloca [21 x i8], align 16
  %13 = alloca [652 x i8], align 16
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca [21 x i8], align 16
  %17 = alloca [21 x i8], align 16
  %18 = alloca [21 x i8], align 16
  %19 = alloca i32, align 4
  %20 = alloca [652 x i8], align 16
  %21 = alloca i8*, align 8
  %22 = alloca i32, align 4
  %23 = alloca %struct.dev_ino, align 8
  %24 = alloca i8, align 1
  %25 = alloca [21 x i8], align 16
  %26 = alloca i64, align 8
  store %struct.fileinfo* %0, %struct.fileinfo** %2, align 8
  %27 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %28 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %27, i32 0, i32 7
  %29 = load i8, i8* %28, align 8
  %30 = trunc i8 %29 to i1
  br i1 %30, label %31, label %35

31:                                               ; preds = %1
  %32 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %33 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %32, i32 0, i32 3
  %34 = getelementptr inbounds [12 x i8], [12 x i8]* %3, i64 0, i64 0
  call void @filemodestring(%struct.stat* %33, i8* %34)
  br label %46

35:                                               ; preds = %1
  %36 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %37 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %36, i32 0, i32 4
  %38 = load i32, i32* %37, align 8
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds [11 x i8], [11 x i8]* @filetype_letter, i64 0, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds [12 x i8], [12 x i8]* %3, i64 0, i64 0
  store i8 %41, i8* %42, align 1
  %43 = getelementptr inbounds [12 x i8], [12 x i8]* %3, i64 0, i64 0
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 63, i64 10, i1 false)
  %45 = getelementptr inbounds [12 x i8], [12 x i8]* %3, i64 0, i64 11
  store i8 0, i8* %45, align 1
  br label %46

46:                                               ; preds = %35, %31
  %47 = load i8, i8* @any_has_acl, align 1
  %48 = trunc i8 %47 to i1
  br i1 %48, label %51, label %49

49:                                               ; preds = %46
  %50 = getelementptr inbounds [12 x i8], [12 x i8]* %3, i64 0, i64 10
  store i8 0, i8* %50, align 1
  br label %67

51:                                               ; preds = %46
  %52 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %53 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %52, i32 0, i32 9
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %56, label %58

56:                                               ; preds = %51
  %57 = getelementptr inbounds [12 x i8], [12 x i8]* %3, i64 0, i64 10
  store i8 46, i8* %57, align 1
  br label %66

58:                                               ; preds = %51
  %59 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %60 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %59, i32 0, i32 9
  %61 = load i32, i32* %60, align 4
  %62 = icmp eq i32 %61, 2
  br i1 %62, label %63, label %65

63:                                               ; preds = %58
  %64 = getelementptr inbounds [12 x i8], [12 x i8]* %3, i64 0, i64 10
  store i8 43, i8* %64, align 1
  br label %65

65:                                               ; preds = %63, %58
  br label %66

66:                                               ; preds = %65, %56
  br label %67

67:                                               ; preds = %66, %49
  %68 = load i32, i32* @time_type, align 4
  switch i32 %68, label %102 [
    i32 1, label %69
    i32 0, label %80
    i32 2, label %91
  ]

69:                                               ; preds = %67
  %70 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %71 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %70, i32 0, i32 3
  %72 = call { i64, i64 } @get_stat_ctime(%struct.stat* %71) #17
  %73 = bitcast %struct.dev_ino* %9 to { i64, i64 }*
  %74 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %73, i32 0, i32 0
  %75 = extractvalue { i64, i64 } %72, 0
  store i64 %75, i64* %74, align 8
  %76 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %73, i32 0, i32 1
  %77 = extractvalue { i64, i64 } %72, 1
  store i64 %77, i64* %76, align 8
  %78 = bitcast %struct.dev_ino* %7 to i8*
  %79 = bitcast %struct.dev_ino* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 16, i1 false)
  br label %103

80:                                               ; preds = %67
  %81 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %82 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %81, i32 0, i32 3
  %83 = call { i64, i64 } @get_stat_mtime(%struct.stat* %82) #17
  %84 = bitcast %struct.dev_ino* %10 to { i64, i64 }*
  %85 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %84, i32 0, i32 0
  %86 = extractvalue { i64, i64 } %83, 0
  store i64 %86, i64* %85, align 8
  %87 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %84, i32 0, i32 1
  %88 = extractvalue { i64, i64 } %83, 1
  store i64 %88, i64* %87, align 8
  %89 = bitcast %struct.dev_ino* %7 to i8*
  %90 = bitcast %struct.dev_ino* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* align 8 %90, i64 16, i1 false)
  br label %103

91:                                               ; preds = %67
  %92 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %93 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %92, i32 0, i32 3
  %94 = call { i64, i64 } @get_stat_atime(%struct.stat* %93) #17
  %95 = bitcast %struct.dev_ino* %11 to { i64, i64 }*
  %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %95, i32 0, i32 0
  %97 = extractvalue { i64, i64 } %94, 0
  store i64 %97, i64* %96, align 8
  %98 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %95, i32 0, i32 1
  %99 = extractvalue { i64, i64 } %94, 1
  store i64 %99, i64* %98, align 8
  %100 = bitcast %struct.dev_ino* %7 to i8*
  %101 = bitcast %struct.dev_ino* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 16, i1 false)
  br label %103

102:                                              ; preds = %67
  call void @abort() #16
  unreachable

103:                                              ; preds = %91, %80, %69
  %104 = getelementptr inbounds [3643 x i8], [3643 x i8]* %4, i64 0, i64 0
  store i8* %104, i8** %6, align 8
  %105 = load i8, i8* @print_inode, align 1
  %106 = trunc i8 %105 to i1
  br i1 %106, label %107, label %118

107:                                              ; preds = %103
  %108 = load i8*, i8** %6, align 8
  %109 = load i32, i32* @inode_number_width, align 4
  %110 = getelementptr inbounds [21 x i8], [21 x i8]* %12, i64 0, i64 0
  %111 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %112 = call i8* @format_inode(i8* %110, i64 21, %struct.fileinfo* %111)
  %113 = call i32 (i8*, i8*, ...) @sprintf(i8* %108, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.224, i64 0, i64 0), i32 %109, i8* %112) #14
  %114 = load i8*, i8** %6, align 8
  %115 = call i64 @strlen(i8* %114) #17
  %116 = load i8*, i8** %6, align 8
  %117 = getelementptr inbounds i8, i8* %116, i64 %115
  store i8* %117, i8** %6, align 8
  br label %118

118:                                              ; preds = %107, %103
  %119 = load i8, i8* @print_block_size, align 1
  %120 = trunc i8 %119 to i1
  br i1 %120, label %121, label %163

121:                                              ; preds = %118
  %122 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %123 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %122, i32 0, i32 7
  %124 = load i8, i8* %123, align 8
  %125 = trunc i8 %124 to i1
  br i1 %125, label %127, label %126

126:                                              ; preds = %121
  br label %136

127:                                              ; preds = %121
  %128 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %129 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %128, i32 0, i32 3
  %130 = getelementptr inbounds %struct.stat, %struct.stat* %129, i32 0, i32 10
  %131 = load i64, i64* %130, align 8
  %132 = getelementptr inbounds [652 x i8], [652 x i8]* %13, i64 0, i64 0
  %133 = load i32, i32* @human_output_opts, align 4
  %134 = load i64, i64* @output_block_size, align 8
  %135 = call i8* @human_readable(i64 %131, i8* %132, i32 %133, i64 512, i64 %134)
  br label %136

136:                                              ; preds = %127, %126
  %137 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), %126 ], [ %135, %127 ]
  store i8* %137, i8** %14, align 8
  %138 = load i32, i32* @block_size_width, align 4
  %139 = load i8*, i8** %14, align 8
  %140 = call i32 @gnu_mbswidth(i8* %139, i32 0)
  %141 = sub nsw i32 %138, %140
  store i32 %141, i32* %15, align 4
  br label %142

142:                                              ; preds = %148, %136
  %143 = load i32, i32* %15, align 4
  %144 = icmp slt i32 0, %143
  br i1 %144, label %145, label %151

145:                                              ; preds = %142
  %146 = load i8*, i8** %6, align 8
  %147 = getelementptr inbounds i8, i8* %146, i32 1
  store i8* %147, i8** %6, align 8
  store i8 32, i8* %146, align 1
  br label %148

148:                                              ; preds = %145
  %149 = load i32, i32* %15, align 4
  %150 = add nsw i32 %149, -1
  store i32 %150, i32* %15, align 4
  br label %142, !llvm.loop !36

151:                                              ; preds = %142
  br label %152

152:                                              ; preds = %159, %151
  %153 = load i8*, i8** %14, align 8
  %154 = getelementptr inbounds i8, i8* %153, i32 1
  store i8* %154, i8** %14, align 8
  %155 = load i8, i8* %153, align 1
  %156 = load i8*, i8** %6, align 8
  %157 = getelementptr inbounds i8, i8* %156, i32 1
  store i8* %157, i8** %6, align 8
  store i8 %155, i8* %156, align 1
  %158 = icmp ne i8 %155, 0
  br i1 %158, label %159, label %160

159:                                              ; preds = %152
  br label %152, !llvm.loop !37

160:                                              ; preds = %152
  %161 = load i8*, i8** %6, align 8
  %162 = getelementptr inbounds i8, i8* %161, i64 -1
  store i8 32, i8* %162, align 1
  br label %163

163:                                              ; preds = %160, %118
  %164 = load i8*, i8** %6, align 8
  %165 = getelementptr inbounds [12 x i8], [12 x i8]* %3, i64 0, i64 0
  %166 = load i32, i32* @nlink_width, align 4
  %167 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %168 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %167, i32 0, i32 7
  %169 = load i8, i8* %168, align 8
  %170 = trunc i8 %169 to i1
  br i1 %170, label %172, label %171

171:                                              ; preds = %163
  br label %179

172:                                              ; preds = %163
  %173 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %174 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %173, i32 0, i32 3
  %175 = getelementptr inbounds %struct.stat, %struct.stat* %174, i32 0, i32 2
  %176 = load i64, i64* %175, align 8
  %177 = getelementptr inbounds [21 x i8], [21 x i8]* %16, i64 0, i64 0
  %178 = call i8* @umaxtostr(i64 %176, i8* %177)
  br label %179

179:                                              ; preds = %172, %171
  %180 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), %171 ], [ %178, %172 ]
  %181 = call i32 (i8*, i8*, ...) @sprintf(i8* %164, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.227, i64 0, i64 0), i8* %165, i32 %166, i8* %180) #14
  %182 = load i8*, i8** %6, align 8
  %183 = call i64 @strlen(i8* %182) #17
  %184 = load i8*, i8** %6, align 8
  %185 = getelementptr inbounds i8, i8* %184, i64 %183
  store i8* %185, i8** %6, align 8
  br label %186

186:                                              ; preds = %179
  %187 = load i8, i8* @dired, align 1
  %188 = trunc i8 %187 to i1
  br i1 %188, label %189, label %196

189:                                              ; preds = %186
  br label %190

190:                                              ; preds = %189
  %191 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %192 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.206, i64 0, i64 0), %struct._IO_FILE* %191)
  %193 = load i64, i64* @dired_pos, align 8
  %194 = add i64 %193, 2
  store i64 %194, i64* @dired_pos, align 8
  br label %195

195:                                              ; preds = %190
  br label %196

196:                                              ; preds = %195, %186
  br label %197

197:                                              ; preds = %196
  %198 = load i8, i8* @print_owner, align 1
  %199 = trunc i8 %198 to i1
  br i1 %199, label %209, label %200

200:                                              ; preds = %197
  %201 = load i8, i8* @print_group, align 1
  %202 = trunc i8 %201 to i1
  br i1 %202, label %209, label %203

203:                                              ; preds = %200
  %204 = load i8, i8* @print_author, align 1
  %205 = trunc i8 %204 to i1
  br i1 %205, label %209, label %206

206:                                              ; preds = %203
  %207 = load i8, i8* @print_scontext, align 1
  %208 = trunc i8 %207 to i1
  br i1 %208, label %209, label %270

209:                                              ; preds = %206, %203, %200, %197
  br label %210

210:                                              ; preds = %209
  %211 = getelementptr inbounds [3643 x i8], [3643 x i8]* %4, i64 0, i64 0
  %212 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %213 = call i32 @fputs_unlocked(i8* %211, %struct._IO_FILE* %212)
  %214 = load i8*, i8** %6, align 8
  %215 = getelementptr inbounds [3643 x i8], [3643 x i8]* %4, i64 0, i64 0
  %216 = ptrtoint i8* %214 to i64
  %217 = ptrtoint i8* %215 to i64
  %218 = sub i64 %216, %217
  %219 = load i64, i64* @dired_pos, align 8
  %220 = add i64 %219, %218
  store i64 %220, i64* @dired_pos, align 8
  br label %221

221:                                              ; preds = %210
  %222 = load i8, i8* @print_owner, align 1
  %223 = trunc i8 %222 to i1
  br i1 %223, label %224, label %234

224:                                              ; preds = %221
  %225 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %226 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %225, i32 0, i32 3
  %227 = getelementptr inbounds %struct.stat, %struct.stat* %226, i32 0, i32 4
  %228 = load i32, i32* %227, align 4
  %229 = load i32, i32* @owner_width, align 4
  %230 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %231 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %230, i32 0, i32 7
  %232 = load i8, i8* %231, align 8
  %233 = trunc i8 %232 to i1
  call void @format_user(i32 %228, i32 %229, i1 zeroext %233)
  br label %234

234:                                              ; preds = %224, %221
  %235 = load i8, i8* @print_group, align 1
  %236 = trunc i8 %235 to i1
  br i1 %236, label %237, label %247

237:                                              ; preds = %234
  %238 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %239 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %238, i32 0, i32 3
  %240 = getelementptr inbounds %struct.stat, %struct.stat* %239, i32 0, i32 5
  %241 = load i32, i32* %240, align 8
  %242 = load i32, i32* @group_width, align 4
  %243 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %244 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %243, i32 0, i32 7
  %245 = load i8, i8* %244, align 8
  %246 = trunc i8 %245 to i1
  call void @format_group(i32 %241, i32 %242, i1 zeroext %246)
  br label %247

247:                                              ; preds = %237, %234
  %248 = load i8, i8* @print_author, align 1
  %249 = trunc i8 %248 to i1
  br i1 %249, label %250, label %260

250:                                              ; preds = %247
  %251 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %252 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %251, i32 0, i32 3
  %253 = getelementptr inbounds %struct.stat, %struct.stat* %252, i32 0, i32 4
  %254 = load i32, i32* %253, align 4
  %255 = load i32, i32* @author_width, align 4
  %256 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %257 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %256, i32 0, i32 7
  %258 = load i8, i8* %257, align 8
  %259 = trunc i8 %258 to i1
  call void @format_user(i32 %254, i32 %255, i1 zeroext %259)
  br label %260

260:                                              ; preds = %250, %247
  %261 = load i8, i8* @print_scontext, align 1
  %262 = trunc i8 %261 to i1
  br i1 %262, label %263, label %268

263:                                              ; preds = %260
  %264 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %265 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %264, i32 0, i32 6
  %266 = load i8*, i8** %265, align 8
  %267 = load i32, i32* @scontext_width, align 4
  call void @format_user_or_group(i8* %266, i64 0, i32 %267)
  br label %268

268:                                              ; preds = %263, %260
  %269 = getelementptr inbounds [3643 x i8], [3643 x i8]* %4, i64 0, i64 0
  store i8* %269, i8** %6, align 8
  br label %270

270:                                              ; preds = %268, %206
  %271 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %272 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %271, i32 0, i32 7
  %273 = load i8, i8* %272, align 8
  %274 = trunc i8 %273 to i1
  br i1 %274, label %275, label %329

275:                                              ; preds = %270
  %276 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %277 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %276, i32 0, i32 3
  %278 = getelementptr inbounds %struct.stat, %struct.stat* %277, i32 0, i32 3
  %279 = load i32, i32* %278, align 8
  %280 = and i32 %279, 61440
  %281 = icmp eq i32 %280, 8192
  br i1 %281, label %289, label %282

282:                                              ; preds = %275
  %283 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %284 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %283, i32 0, i32 3
  %285 = getelementptr inbounds %struct.stat, %struct.stat* %284, i32 0, i32 3
  %286 = load i32, i32* %285, align 8
  %287 = and i32 %286, 61440
  %288 = icmp eq i32 %287, 24576
  br i1 %288, label %289, label %329

289:                                              ; preds = %282, %275
  %290 = load i32, i32* @file_size_width, align 4
  %291 = load i32, i32* @major_device_number_width, align 4
  %292 = add nsw i32 %291, 2
  %293 = load i32, i32* @minor_device_number_width, align 4
  %294 = add nsw i32 %292, %293
  %295 = sub nsw i32 %290, %294
  store i32 %295, i32* %19, align 4
  %296 = load i8*, i8** %6, align 8
  %297 = load i32, i32* @major_device_number_width, align 4
  %298 = load i32, i32* %19, align 4
  %299 = icmp sgt i32 0, %298
  br i1 %299, label %300, label %301

300:                                              ; preds = %289
  br label %303

301:                                              ; preds = %289
  %302 = load i32, i32* %19, align 4
  br label %303

303:                                              ; preds = %301, %300
  %304 = phi i32 [ 0, %300 ], [ %302, %301 ]
  %305 = add nsw i32 %297, %304
  %306 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %307 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %306, i32 0, i32 3
  %308 = getelementptr inbounds %struct.stat, %struct.stat* %307, i32 0, i32 7
  %309 = load i64, i64* %308, align 8
  %310 = call i32 @gnu_dev_major(i64 %309) #18
  %311 = zext i32 %310 to i64
  %312 = getelementptr inbounds [21 x i8], [21 x i8]* %17, i64 0, i64 0
  %313 = call i8* @umaxtostr(i64 %311, i8* %312)
  %314 = load i32, i32* @minor_device_number_width, align 4
  %315 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %316 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %315, i32 0, i32 3
  %317 = getelementptr inbounds %struct.stat, %struct.stat* %316, i32 0, i32 7
  %318 = load i64, i64* %317, align 8
  %319 = call i32 @gnu_dev_minor(i64 %318) #18
  %320 = zext i32 %319 to i64
  %321 = getelementptr inbounds [21 x i8], [21 x i8]* %18, i64 0, i64 0
  %322 = call i8* @umaxtostr(i64 %320, i8* %321)
  %323 = call i32 (i8*, i8*, ...) @sprintf(i8* %296, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.228, i64 0, i64 0), i32 %305, i8* %313, i32 %314, i8* %322) #14
  %324 = load i32, i32* @file_size_width, align 4
  %325 = add nsw i32 %324, 1
  %326 = load i8*, i8** %6, align 8
  %327 = sext i32 %325 to i64
  %328 = getelementptr inbounds i8, i8* %326, i64 %327
  store i8* %328, i8** %6, align 8
  br label %372

329:                                              ; preds = %282, %270
  %330 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %331 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %330, i32 0, i32 7
  %332 = load i8, i8* %331, align 8
  %333 = trunc i8 %332 to i1
  br i1 %333, label %335, label %334

334:                                              ; preds = %329
  br label %345

335:                                              ; preds = %329
  %336 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %337 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %336, i32 0, i32 3
  %338 = getelementptr inbounds %struct.stat, %struct.stat* %337, i32 0, i32 8
  %339 = load i64, i64* %338, align 8
  %340 = call i64 @unsigned_file_size(i64 %339)
  %341 = getelementptr inbounds [652 x i8], [652 x i8]* %20, i64 0, i64 0
  %342 = load i32, i32* @file_human_output_opts, align 4
  %343 = load i64, i64* @file_output_block_size, align 8
  %344 = call i8* @human_readable(i64 %340, i8* %341, i32 %342, i64 1, i64 %343)
  br label %345

345:                                              ; preds = %335, %334
  %346 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), %334 ], [ %344, %335 ]
  store i8* %346, i8** %21, align 8
  %347 = load i32, i32* @file_size_width, align 4
  %348 = load i8*, i8** %21, align 8
  %349 = call i32 @gnu_mbswidth(i8* %348, i32 0)
  %350 = sub nsw i32 %347, %349
  store i32 %350, i32* %22, align 4
  br label %351

351:                                              ; preds = %357, %345
  %352 = load i32, i32* %22, align 4
  %353 = icmp slt i32 0, %352
  br i1 %353, label %354, label %360

354:                                              ; preds = %351
  %355 = load i8*, i8** %6, align 8
  %356 = getelementptr inbounds i8, i8* %355, i32 1
  store i8* %356, i8** %6, align 8
  store i8 32, i8* %355, align 1
  br label %357

357:                                              ; preds = %354
  %358 = load i32, i32* %22, align 4
  %359 = add nsw i32 %358, -1
  store i32 %359, i32* %22, align 4
  br label %351, !llvm.loop !38

360:                                              ; preds = %351
  br label %361

361:                                              ; preds = %368, %360
  %362 = load i8*, i8** %21, align 8
  %363 = getelementptr inbounds i8, i8* %362, i32 1
  store i8* %363, i8** %21, align 8
  %364 = load i8, i8* %362, align 1
  %365 = load i8*, i8** %6, align 8
  %366 = getelementptr inbounds i8, i8* %365, i32 1
  store i8* %366, i8** %6, align 8
  store i8 %364, i8* %365, align 1
  %367 = icmp ne i8 %364, 0
  br i1 %367, label %368, label %369

368:                                              ; preds = %361
  br label %361, !llvm.loop !39

369:                                              ; preds = %361
  %370 = load i8*, i8** %6, align 8
  %371 = getelementptr inbounds i8, i8* %370, i64 -1
  store i8 32, i8* %371, align 1
  br label %372

372:                                              ; preds = %369, %303
  store i64 0, i64* %5, align 8
  %373 = load i8*, i8** %6, align 8
  store i8 1, i8* %373, align 1
  %374 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %375 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %374, i32 0, i32 7
  %376 = load i8, i8* %375, align 8
  %377 = trunc i8 %376 to i1
  br i1 %377, label %378, label %433

378:                                              ; preds = %372
  %379 = load %struct.tm_zone*, %struct.tm_zone** @localtz, align 8
  %380 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %7, i32 0, i32 0
  %381 = call %struct.tm* @localtime_rz(%struct.tm_zone* %379, i64* %380, %struct.tm* %8)
  %382 = icmp ne %struct.tm* %381, null
  br i1 %382, label %383, label %433

383:                                              ; preds = %378
  %384 = load i64, i64* getelementptr inbounds ({ i64, i64 }, { i64, i64 }* bitcast (%struct.dev_ino* @current_time to { i64, i64 }*), i32 0, i32 0), align 8
  %385 = load i64, i64* getelementptr inbounds ({ i64, i64 }, { i64, i64 }* bitcast (%struct.dev_ino* @current_time to { i64, i64 }*), i32 0, i32 1), align 8
  %386 = bitcast %struct.dev_ino* %7 to { i64, i64 }*
  %387 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %386, i32 0, i32 0
  %388 = load i64, i64* %387, align 8
  %389 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %386, i32 0, i32 1
  %390 = load i64, i64* %389, align 8
  %391 = call i32 @timespec_cmp(i64 %384, i64 %385, i64 %388, i64 %390) #17
  %392 = icmp slt i32 %391, 0
  br i1 %392, label %393, label %394

393:                                              ; preds = %383
  call void @gettime(%struct.dev_ino* @current_time)
  br label %394

394:                                              ; preds = %393, %383
  %395 = load i64, i64* getelementptr inbounds (%struct.dev_ino, %struct.dev_ino* @current_time, i32 0, i32 0), align 8
  %396 = sub nsw i64 %395, 15778476
  %397 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %23, i32 0, i32 0
  store i64 %396, i64* %397, align 8
  %398 = load i64, i64* getelementptr inbounds (%struct.dev_ino, %struct.dev_ino* @current_time, i32 0, i32 1), align 8
  %399 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %23, i32 0, i32 1
  store i64 %398, i64* %399, align 8
  %400 = bitcast %struct.dev_ino* %23 to { i64, i64 }*
  %401 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %400, i32 0, i32 0
  %402 = load i64, i64* %401, align 8
  %403 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %400, i32 0, i32 1
  %404 = load i64, i64* %403, align 8
  %405 = bitcast %struct.dev_ino* %7 to { i64, i64 }*
  %406 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %405, i32 0, i32 0
  %407 = load i64, i64* %406, align 8
  %408 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %405, i32 0, i32 1
  %409 = load i64, i64* %408, align 8
  %410 = call i32 @timespec_cmp(i64 %402, i64 %404, i64 %407, i64 %409) #17
  %411 = icmp slt i32 %410, 0
  br i1 %411, label %412, label %422

412:                                              ; preds = %394
  %413 = bitcast %struct.dev_ino* %7 to { i64, i64 }*
  %414 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %413, i32 0, i32 0
  %415 = load i64, i64* %414, align 8
  %416 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %413, i32 0, i32 1
  %417 = load i64, i64* %416, align 8
  %418 = load i64, i64* getelementptr inbounds ({ i64, i64 }, { i64, i64 }* bitcast (%struct.dev_ino* @current_time to { i64, i64 }*), i32 0, i32 0), align 8
  %419 = load i64, i64* getelementptr inbounds ({ i64, i64 }, { i64, i64 }* bitcast (%struct.dev_ino* @current_time to { i64, i64 }*), i32 0, i32 1), align 8
  %420 = call i32 @timespec_cmp(i64 %415, i64 %417, i64 %418, i64 %419) #17
  %421 = icmp slt i32 %420, 0
  br label %422

422:                                              ; preds = %412, %394
  %423 = phi i1 [ false, %394 ], [ %421, %412 ]
  %424 = zext i1 %423 to i8
  store i8 %424, i8* %24, align 1
  %425 = load i8*, i8** %6, align 8
  %426 = load i8, i8* %24, align 1
  %427 = trunc i8 %426 to i1
  %428 = load %struct.tm_zone*, %struct.tm_zone** @localtz, align 8
  %429 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %7, i32 0, i32 1
  %430 = load i64, i64* %429, align 8
  %431 = trunc i64 %430 to i32
  %432 = call i64 @align_nstrftime(i8* %425, i64 1001, i1 zeroext %427, %struct.tm* %8, %struct.tm_zone* %428, i32 %431)
  store i64 %432, i64* %5, align 8
  br label %433

433:                                              ; preds = %422, %378, %372
  %434 = load i64, i64* %5, align 8
  %435 = icmp ne i64 %434, 0
  br i1 %435, label %440, label %436

436:                                              ; preds = %433
  %437 = load i8*, i8** %6, align 8
  %438 = load i8, i8* %437, align 1
  %439 = icmp ne i8 %438, 0
  br i1 %439, label %447, label %440

440:                                              ; preds = %436, %433
  %441 = load i64, i64* %5, align 8
  %442 = load i8*, i8** %6, align 8
  %443 = getelementptr inbounds i8, i8* %442, i64 %441
  store i8* %443, i8** %6, align 8
  %444 = load i8*, i8** %6, align 8
  %445 = getelementptr inbounds i8, i8* %444, i32 1
  store i8* %445, i8** %6, align 8
  store i8 32, i8* %444, align 1
  %446 = load i8*, i8** %6, align 8
  store i8 0, i8* %446, align 1
  br label %467

447:                                              ; preds = %436
  %448 = load i8*, i8** %6, align 8
  %449 = call i32 @long_time_expected_width()
  %450 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %451 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %450, i32 0, i32 7
  %452 = load i8, i8* %451, align 8
  %453 = trunc i8 %452 to i1
  br i1 %453, label %455, label %454

454:                                              ; preds = %447
  br label %460

455:                                              ; preds = %447
  %456 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %7, i32 0, i32 0
  %457 = load i64, i64* %456, align 8
  %458 = getelementptr inbounds [21 x i8], [21 x i8]* %25, i64 0, i64 0
  %459 = call i8* @timetostr(i64 %457, i8* %458)
  br label %460

460:                                              ; preds = %455, %454
  %461 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), %454 ], [ %459, %455 ]
  %462 = call i32 (i8*, i8*, ...) @sprintf(i8* %448, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.224, i64 0, i64 0), i32 %449, i8* %461) #14
  %463 = load i8*, i8** %6, align 8
  %464 = call i64 @strlen(i8* %463) #17
  %465 = load i8*, i8** %6, align 8
  %466 = getelementptr inbounds i8, i8* %465, i64 %464
  store i8* %466, i8** %6, align 8
  br label %467

467:                                              ; preds = %460, %440
  br label %468

468:                                              ; preds = %467
  %469 = getelementptr inbounds [3643 x i8], [3643 x i8]* %4, i64 0, i64 0
  %470 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %471 = call i32 @fputs_unlocked(i8* %469, %struct._IO_FILE* %470)
  %472 = load i8*, i8** %6, align 8
  %473 = getelementptr inbounds [3643 x i8], [3643 x i8]* %4, i64 0, i64 0
  %474 = ptrtoint i8* %472 to i64
  %475 = ptrtoint i8* %473 to i64
  %476 = sub i64 %474, %475
  %477 = load i64, i64* @dired_pos, align 8
  %478 = add i64 %477, %476
  store i64 %478, i64* @dired_pos, align 8
  br label %479

479:                                              ; preds = %468
  %480 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %481 = load i8*, i8** %6, align 8
  %482 = getelementptr inbounds [3643 x i8], [3643 x i8]* %4, i64 0, i64 0
  %483 = ptrtoint i8* %481 to i64
  %484 = ptrtoint i8* %482 to i64
  %485 = sub i64 %483, %484
  %486 = call i64 @print_name_with_quoting(%struct.fileinfo* %480, i1 zeroext false, %struct.obstack* @dired_obstack, i64 %485)
  store i64 %486, i64* %26, align 8
  %487 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %488 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %487, i32 0, i32 4
  %489 = load i32, i32* %488, align 8
  %490 = icmp eq i32 %489, 6
  br i1 %490, label %491, label %522

491:                                              ; preds = %479
  %492 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %493 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %492, i32 0, i32 1
  %494 = load i8*, i8** %493, align 8
  %495 = icmp ne i8* %494, null
  br i1 %495, label %496, label %521

496:                                              ; preds = %491
  br label %497

497:                                              ; preds = %496
  %498 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %499 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.229, i64 0, i64 0), %struct._IO_FILE* %498)
  %500 = load i64, i64* @dired_pos, align 8
  %501 = add i64 %500, 4
  store i64 %501, i64* @dired_pos, align 8
  br label %502

502:                                              ; preds = %497
  %503 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %504 = load i8*, i8** %6, align 8
  %505 = getelementptr inbounds [3643 x i8], [3643 x i8]* %4, i64 0, i64 0
  %506 = ptrtoint i8* %504 to i64
  %507 = ptrtoint i8* %505 to i64
  %508 = sub i64 %506, %507
  %509 = load i64, i64* %26, align 8
  %510 = add i64 %508, %509
  %511 = add i64 %510, 4
  %512 = call i64 @print_name_with_quoting(%struct.fileinfo* %503, i1 zeroext true, %struct.obstack* null, i64 %511)
  %513 = load i32, i32* @indicator_style, align 4
  %514 = icmp ne i32 %513, 0
  br i1 %514, label %515, label %520

515:                                              ; preds = %502
  %516 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %517 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %516, i32 0, i32 5
  %518 = load i32, i32* %517, align 4
  %519 = call zeroext i1 @print_type_indicator(i1 zeroext true, i32 %518, i32 0)
  br label %520

520:                                              ; preds = %515, %502
  br label %521

521:                                              ; preds = %520, %491
  br label %539

522:                                              ; preds = %479
  %523 = load i32, i32* @indicator_style, align 4
  %524 = icmp ne i32 %523, 0
  br i1 %524, label %525, label %538

525:                                              ; preds = %522
  %526 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %527 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %526, i32 0, i32 7
  %528 = load i8, i8* %527, align 8
  %529 = trunc i8 %528 to i1
  %530 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %531 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %530, i32 0, i32 3
  %532 = getelementptr inbounds %struct.stat, %struct.stat* %531, i32 0, i32 3
  %533 = load i32, i32* %532, align 8
  %534 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %535 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %534, i32 0, i32 4
  %536 = load i32, i32* %535, align 8
  %537 = call zeroext i1 @print_type_indicator(i1 zeroext %529, i32 %533, i32 %536)
  br label %538

538:                                              ; preds = %525, %522
  br label %539

539:                                              ; preds = %538, %521
  ret void
}

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @format_inode(i8* %0, i64 %1, %struct.fileinfo* %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.fileinfo*, align 8
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  store %struct.fileinfo* %2, %struct.fileinfo** %6, align 8
  %7 = load i64, i64* %5, align 8
  %8 = icmp ule i64 21, %7
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  br label %11

10:                                               ; preds = %3
  call void @__assert_fail(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.226, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i32 4010, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @__PRETTY_FUNCTION__.format_inode, i64 0, i64 0)) #16
  unreachable

11:                                               ; preds = %9
  %12 = load %struct.fileinfo*, %struct.fileinfo** %6, align 8
  %13 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %12, i32 0, i32 7
  %14 = load i8, i8* %13, align 8
  %15 = trunc i8 %14 to i1
  br i1 %15, label %16, label %29

16:                                               ; preds = %11
  %17 = load %struct.fileinfo*, %struct.fileinfo** %6, align 8
  %18 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %17, i32 0, i32 3
  %19 = getelementptr inbounds %struct.stat, %struct.stat* %18, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = icmp ne i64 %20, 0
  br i1 %21, label %22, label %29

22:                                               ; preds = %16
  %23 = load %struct.fileinfo*, %struct.fileinfo** %6, align 8
  %24 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %23, i32 0, i32 3
  %25 = getelementptr inbounds %struct.stat, %struct.stat* %24, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = load i8*, i8** %4, align 8
  %28 = call i8* @umaxtostr(i64 %26, i8* %27)
  br label %30

29:                                               ; preds = %16, %11
  br label %30

30:                                               ; preds = %29, %22
  %31 = phi i8* [ %28, %22 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), %29 ]
  ret i8* %31
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @format_user(i32 %0, i32 %1, i1 zeroext %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8, align 1
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  %7 = zext i1 %2 to i8
  store i8 %7, i8* %6, align 1
  %8 = load i8, i8* %6, align 1
  %9 = trunc i8 %8 to i1
  br i1 %9, label %11, label %10

10:                                               ; preds = %3
  br label %20

11:                                               ; preds = %3
  %12 = load i8, i8* @numeric_ids, align 1
  %13 = trunc i8 %12 to i1
  br i1 %13, label %14, label %15

14:                                               ; preds = %11
  br label %18

15:                                               ; preds = %11
  %16 = load i32, i32* %4, align 4
  %17 = call i8* @getuser(i32 %16)
  br label %18

18:                                               ; preds = %15, %14
  %19 = phi i8* [ null, %14 ], [ %17, %15 ]
  br label %20

20:                                               ; preds = %18, %10
  %21 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), %10 ], [ %19, %18 ]
  %22 = load i32, i32* %4, align 4
  %23 = zext i32 %22 to i64
  %24 = load i32, i32* %5, align 4
  call void @format_user_or_group(i8* %21, i64 %23, i32 %24)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @format_group(i32 %0, i32 %1, i1 zeroext %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8, align 1
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  %7 = zext i1 %2 to i8
  store i8 %7, i8* %6, align 1
  %8 = load i8, i8* %6, align 1
  %9 = trunc i8 %8 to i1
  br i1 %9, label %11, label %10

10:                                               ; preds = %3
  br label %20

11:                                               ; preds = %3
  %12 = load i8, i8* @numeric_ids, align 1
  %13 = trunc i8 %12 to i1
  br i1 %13, label %14, label %15

14:                                               ; preds = %11
  br label %18

15:                                               ; preds = %11
  %16 = load i32, i32* %4, align 4
  %17 = call i8* @getgroup(i32 %16)
  br label %18

18:                                               ; preds = %15, %14
  %19 = phi i8* [ null, %14 ], [ %17, %15 ]
  br label %20

20:                                               ; preds = %18, %10
  %21 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), %10 ], [ %19, %18 ]
  %22 = load i32, i32* %4, align 4
  %23 = zext i32 %22 to i64
  %24 = load i32, i32* %5, align 4
  call void @format_user_or_group(i8* %21, i64 %23, i32 %24)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @format_user_or_group(i8* %0, i64 %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  store i32 %2, i32* %6, align 4
  %10 = load i8*, i8** %4, align 8
  %11 = icmp ne i8* %10, null
  br i1 %11, label %12, label %39

12:                                               ; preds = %3
  %13 = load i32, i32* %6, align 4
  %14 = load i8*, i8** %4, align 8
  %15 = call i32 @gnu_mbswidth(i8* %14, i32 0)
  %16 = sub nsw i32 %13, %15
  store i32 %16, i32* %8, align 4
  %17 = load i32, i32* %8, align 4
  %18 = icmp sgt i32 0, %17
  br i1 %18, label %19, label %20

19:                                               ; preds = %12
  br label %22

20:                                               ; preds = %12
  %21 = load i32, i32* %8, align 4
  br label %22

22:                                               ; preds = %20, %19
  %23 = phi i32 [ 0, %19 ], [ %21, %20 ]
  store i32 %23, i32* %9, align 4
  %24 = load i8*, i8** %4, align 8
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %26 = call i32 @fputs_unlocked(i8* %24, %struct._IO_FILE* %25)
  %27 = load i8*, i8** %4, align 8
  %28 = call i64 @strlen(i8* %27) #17
  %29 = load i32, i32* %9, align 4
  %30 = sext i32 %29 to i64
  %31 = add i64 %28, %30
  store i64 %31, i64* %7, align 8
  br label %32

32:                                               ; preds = %34, %22
  %33 = call i32 @putchar_unlocked(i32 32)
  br label %34

34:                                               ; preds = %32
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %35, -1
  store i32 %36, i32* %9, align 4
  %37 = icmp ne i32 %35, 0
  br i1 %37, label %32, label %38, !llvm.loop !40

38:                                               ; preds = %34
  br label %45

39:                                               ; preds = %3
  %40 = load i32, i32* %6, align 4
  %41 = load i64, i64* %5, align 8
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.230, i64 0, i64 0), i32 %40, i64 %41)
  %43 = load i32, i32* %6, align 4
  %44 = sext i32 %43 to i64
  store i64 %44, i64* %7, align 8
  br label %45

45:                                               ; preds = %39, %38
  %46 = load i64, i64* %7, align 8
  %47 = add i64 %46, 1
  %48 = load i64, i64* @dired_pos, align 8
  %49 = add i64 %48, %47
  store i64 %49, i64* @dired_pos, align 8
  ret void
}

; Function Attrs: nounwind readnone
declare dso_local i32 @gnu_dev_major(i64) #6

; Function Attrs: nounwind readnone
declare dso_local i32 @gnu_dev_minor(i64) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @unsigned_file_size(i64 %0) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = icmp slt i64 %4, 0
  %6 = zext i1 %5 to i32
  %7 = sext i32 %6 to i64
  %8 = mul i64 %7, 0
  %9 = add i64 %3, %8
  ret i64 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @align_nstrftime(i8* %0, i64 %1, i1 zeroext %2, %struct.tm* %3, %struct.tm_zone* %4, i32 %5) #0 {
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8, align 1
  %10 = alloca %struct.tm*, align 8
  %11 = alloca %struct.tm_zone*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  store i8* %0, i8** %7, align 8
  store i64 %1, i64* %8, align 8
  %14 = zext i1 %2 to i8
  store i8 %14, i8* %9, align 1
  store %struct.tm* %3, %struct.tm** %10, align 8
  store %struct.tm_zone* %4, %struct.tm_zone** %11, align 8
  store i32 %5, i32* %12, align 4
  %15 = load i8, i8* @use_abformat, align 1
  %16 = trunc i8 %15 to i1
  br i1 %16, label %17, label %28

17:                                               ; preds = %6
  %18 = load i8, i8* %9, align 1
  %19 = trunc i8 %18 to i1
  %20 = zext i1 %19 to i64
  %21 = getelementptr inbounds [2 x [12 x [128 x i8]]], [2 x [12 x [128 x i8]]]* @abformat, i64 0, i64 %20
  %22 = load %struct.tm*, %struct.tm** %10, align 8
  %23 = getelementptr inbounds %struct.tm, %struct.tm* %22, i32 0, i32 4
  %24 = load i32, i32* %23, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [12 x [128 x i8]], [12 x [128 x i8]]* %21, i64 0, i64 %25
  %27 = getelementptr inbounds [128 x i8], [128 x i8]* %26, i64 0, i64 0
  br label %34

28:                                               ; preds = %6
  %29 = load i8, i8* %9, align 1
  %30 = trunc i8 %29 to i1
  %31 = zext i1 %30 to i64
  %32 = getelementptr inbounds [2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 %31
  %33 = load i8*, i8** %32, align 8
  br label %34

34:                                               ; preds = %28, %17
  %35 = phi i8* [ %27, %17 ], [ %33, %28 ]
  store i8* %35, i8** %13, align 8
  %36 = load i8*, i8** %7, align 8
  %37 = load i64, i64* %8, align 8
  %38 = load i8*, i8** %13, align 8
  %39 = load %struct.tm*, %struct.tm** %10, align 8
  %40 = load %struct.tm_zone*, %struct.tm_zone** %11, align 8
  %41 = load i32, i32* %12, align 4
  %42 = call i64 @nstrftime(i8* %36, i64 %37, i8* %38, %struct.tm* %39, %struct.tm_zone* %40, i32 %41)
  ret i64 %42
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @long_time_expected_width() #0 {
  %1 = alloca i64, align 8
  %2 = alloca %struct.tm, align 8
  %3 = alloca [1001 x i8], align 16
  %4 = alloca i64, align 8
  %5 = load i32, i32* @long_time_expected_width.width, align 4
  %6 = icmp slt i32 %5, 0
  br i1 %6, label %7, label %27

7:                                                ; preds = %0
  store i64 0, i64* %1, align 8
  %8 = load %struct.tm_zone*, %struct.tm_zone** @localtz, align 8
  %9 = call %struct.tm* @localtime_rz(%struct.tm_zone* %8, i64* %1, %struct.tm* %2)
  %10 = icmp ne %struct.tm* %9, null
  br i1 %10, label %11, label %22

11:                                               ; preds = %7
  %12 = getelementptr inbounds [1001 x i8], [1001 x i8]* %3, i64 0, i64 0
  %13 = load %struct.tm_zone*, %struct.tm_zone** @localtz, align 8
  %14 = call i64 @align_nstrftime(i8* %12, i64 1001, i1 zeroext false, %struct.tm* %2, %struct.tm_zone* %13, i32 0)
  store i64 %14, i64* %4, align 8
  %15 = load i64, i64* %4, align 8
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %21

17:                                               ; preds = %11
  %18 = getelementptr inbounds [1001 x i8], [1001 x i8]* %3, i64 0, i64 0
  %19 = load i64, i64* %4, align 8
  %20 = call i32 @mbsnwidth(i8* %18, i64 %19, i32 0)
  store i32 %20, i32* @long_time_expected_width.width, align 4
  br label %21

21:                                               ; preds = %17, %11
  br label %22

22:                                               ; preds = %21, %7
  %23 = load i32, i32* @long_time_expected_width.width, align 4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %22
  store i32 0, i32* @long_time_expected_width.width, align 4
  br label %26

26:                                               ; preds = %25, %22
  br label %27

27:                                               ; preds = %26, %0
  %28 = load i32, i32* @long_time_expected_width.width, align 4
  ret i32 %28
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @timetostr(i64 %0, i8* %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  store i64 %0, i64* %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = load i8*, i8** %4, align 8
  %7 = call i8* @imaxtostr(i64 %5, i8* %6)
  ret i8* %7
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @print_name_with_quoting(%struct.fileinfo* %0, i1 zeroext %1, %struct.obstack* %2, i64 %3) #0 {
  %5 = alloca %struct.fileinfo*, align 8
  %6 = alloca i8, align 1
  %7 = alloca %struct.obstack*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca %struct.bin_str*, align 8
  %11 = alloca i8, align 1
  %12 = alloca i64, align 8
  store %struct.fileinfo* %0, %struct.fileinfo** %5, align 8
  %13 = zext i1 %1 to i8
  store i8 %13, i8* %6, align 1
  store %struct.obstack* %2, %struct.obstack** %7, align 8
  store i64 %3, i64* %8, align 8
  %14 = load i8, i8* %6, align 1
  %15 = trunc i8 %14 to i1
  br i1 %15, label %16, label %20

16:                                               ; preds = %4
  %17 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %18 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %17, i32 0, i32 1
  %19 = load i8*, i8** %18, align 8
  br label %24

20:                                               ; preds = %4
  %21 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %22 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %21, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  br label %24

24:                                               ; preds = %20, %16
  %25 = phi i8* [ %19, %16 ], [ %23, %20 ]
  store i8* %25, i8** %9, align 8
  %26 = load i8, i8* @print_with_color, align 1
  %27 = trunc i8 %26 to i1
  br i1 %27, label %28, label %33

28:                                               ; preds = %24
  %29 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %30 = load i8, i8* %6, align 1
  %31 = trunc i8 %30 to i1
  %32 = call %struct.bin_str* @get_color_indicator(%struct.fileinfo* %29, i1 zeroext %31)
  br label %34

33:                                               ; preds = %24
  br label %34

34:                                               ; preds = %33, %28
  %35 = phi %struct.bin_str* [ %32, %28 ], [ null, %33 ]
  store %struct.bin_str* %35, %struct.bin_str** %10, align 8
  %36 = load i8, i8* @print_with_color, align 1
  %37 = trunc i8 %36 to i1
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = load %struct.bin_str*, %struct.bin_str** %10, align 8
  %40 = icmp ne %struct.bin_str* %39, null
  br i1 %40, label %43, label %41

41:                                               ; preds = %38
  %42 = call zeroext i1 @is_colored(i32 4)
  br label %43

43:                                               ; preds = %41, %38
  %44 = phi i1 [ true, %38 ], [ %42, %41 ]
  br label %45

45:                                               ; preds = %43, %34
  %46 = phi i1 [ false, %34 ], [ %44, %43 ]
  %47 = zext i1 %46 to i8
  store i8 %47, i8* %11, align 1
  %48 = load i8*, i8** %9, align 8
  %49 = load %struct.quoting_options*, %struct.quoting_options** @filename_quoting_options, align 8
  %50 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %51 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %50, i32 0, i32 11
  %52 = load i32, i32* %51, align 4
  %53 = load %struct.bin_str*, %struct.bin_str** %10, align 8
  %54 = load i8, i8* %6, align 1
  %55 = trunc i8 %54 to i1
  %56 = xor i1 %55, true
  %57 = load %struct.obstack*, %struct.obstack** %7, align 8
  %58 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %59 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %58, i32 0, i32 2
  %60 = load i8*, i8** %59, align 8
  %61 = call i64 @quote_name(i8* %48, %struct.quoting_options* %49, i32 %52, %struct.bin_str* %53, i1 zeroext %56, %struct.obstack* %57, i8* %60)
  store i64 %61, i64* %12, align 8
  call void @process_signals()
  %62 = load i8, i8* %11, align 1
  %63 = trunc i8 %62 to i1
  br i1 %63, label %64, label %80

64:                                               ; preds = %45
  call void @prep_non_filename_text()
  %65 = load i64, i64* @line_length, align 8
  %66 = icmp ne i64 %65, 0
  br i1 %66, label %67, label %79

67:                                               ; preds = %64
  %68 = load i64, i64* %8, align 8
  %69 = load i64, i64* @line_length, align 8
  %70 = udiv i64 %68, %69
  %71 = load i64, i64* %8, align 8
  %72 = load i64, i64* %12, align 8
  %73 = add i64 %71, %72
  %74 = sub i64 %73, 1
  %75 = load i64, i64* @line_length, align 8
  %76 = udiv i64 %74, %75
  %77 = icmp ne i64 %70, %76
  br i1 %77, label %78, label %79

78:                                               ; preds = %67
  call void @put_indicator(%struct.bin_str* getelementptr inbounds ([24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 23))
  br label %79

79:                                               ; preds = %78, %67, %64
  br label %80

80:                                               ; preds = %79, %45
  %81 = load i64, i64* %12, align 8
  ret i64 %81
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @print_type_indicator(i1 zeroext %0, i32 %1, i32 %2) #0 {
  %4 = alloca i8, align 1
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = zext i1 %0 to i8
  store i8 %8, i8* %4, align 1
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %9 = load i8, i8* %4, align 1
  %10 = trunc i8 %9 to i1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %6, align 4
  %13 = call signext i8 @get_type_indicator(i1 zeroext %10, i32 %11, i32 %12)
  store i8 %13, i8* %7, align 1
  %14 = load i8, i8* %7, align 1
  %15 = icmp ne i8 %14, 0
  br i1 %15, label %16, label %24

16:                                               ; preds = %3
  br label %17

17:                                               ; preds = %16
  %18 = load i8, i8* %7, align 1
  %19 = sext i8 %18 to i32
  %20 = call i32 @putchar_unlocked(i32 %19)
  %21 = load i64, i64* @dired_pos, align 8
  %22 = add i64 %21, 1
  store i64 %22, i64* @dired_pos, align 8
  br label %23

23:                                               ; preds = %17
  br label %24

24:                                               ; preds = %23, %3
  %25 = load i8, i8* %7, align 1
  %26 = icmp ne i8 %25, 0
  %27 = xor i1 %26, true
  %28 = xor i1 %27, true
  ret i1 %28
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i8 @get_type_indicator(i1 zeroext %0, i32 %1, i32 %2) #0 {
  %4 = alloca i8, align 1
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = zext i1 %0 to i8
  store i8 %8, i8* %4, align 1
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %9 = load i8, i8* %4, align 1
  %10 = trunc i8 %9 to i1
  br i1 %10, label %11, label %15

11:                                               ; preds = %3
  %12 = load i32, i32* %5, align 4
  %13 = and i32 %12, 61440
  %14 = icmp eq i32 %13, 32768
  br i1 %14, label %18, label %31

15:                                               ; preds = %3
  %16 = load i32, i32* %6, align 4
  %17 = icmp eq i32 %16, 5
  br i1 %17, label %18, label %31

18:                                               ; preds = %15, %11
  %19 = load i8, i8* %4, align 1
  %20 = trunc i8 %19 to i1
  br i1 %20, label %21, label %29

21:                                               ; preds = %18
  %22 = load i32, i32* @indicator_style, align 4
  %23 = icmp eq i32 %22, 3
  br i1 %23, label %24, label %29

24:                                               ; preds = %21
  %25 = load i32, i32* %5, align 4
  %26 = and i32 %25, 73
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %24
  store i8 42, i8* %7, align 1
  br label %30

29:                                               ; preds = %24, %21, %18
  store i8 0, i8* %7, align 1
  br label %30

30:                                               ; preds = %29, %28
  br label %94

31:                                               ; preds = %15, %11
  %32 = load i8, i8* %4, align 1
  %33 = trunc i8 %32 to i1
  br i1 %33, label %34, label %38

34:                                               ; preds = %31
  %35 = load i32, i32* %5, align 4
  %36 = and i32 %35, 61440
  %37 = icmp eq i32 %36, 16384
  br i1 %37, label %44, label %45

38:                                               ; preds = %31
  %39 = load i32, i32* %6, align 4
  %40 = icmp eq i32 %39, 3
  br i1 %40, label %44, label %41

41:                                               ; preds = %38
  %42 = load i32, i32* %6, align 4
  %43 = icmp eq i32 %42, 9
  br i1 %43, label %44, label %45

44:                                               ; preds = %41, %38, %34
  store i8 47, i8* %7, align 1
  br label %93

45:                                               ; preds = %41, %34
  %46 = load i32, i32* @indicator_style, align 4
  %47 = icmp eq i32 %46, 1
  br i1 %47, label %48, label %49

48:                                               ; preds = %45
  store i8 0, i8* %7, align 1
  br label %92

49:                                               ; preds = %45
  %50 = load i8, i8* %4, align 1
  %51 = trunc i8 %50 to i1
  br i1 %51, label %52, label %56

52:                                               ; preds = %49
  %53 = load i32, i32* %5, align 4
  %54 = and i32 %53, 61440
  %55 = icmp eq i32 %54, 40960
  br i1 %55, label %59, label %60

56:                                               ; preds = %49
  %57 = load i32, i32* %6, align 4
  %58 = icmp eq i32 %57, 6
  br i1 %58, label %59, label %60

59:                                               ; preds = %56, %52
  store i8 64, i8* %7, align 1
  br label %91

60:                                               ; preds = %56, %52
  %61 = load i8, i8* %4, align 1
  %62 = trunc i8 %61 to i1
  br i1 %62, label %63, label %67

63:                                               ; preds = %60
  %64 = load i32, i32* %5, align 4
  %65 = and i32 %64, 61440
  %66 = icmp eq i32 %65, 4096
  br i1 %66, label %70, label %71

67:                                               ; preds = %60
  %68 = load i32, i32* %6, align 4
  %69 = icmp eq i32 %68, 1
  br i1 %69, label %70, label %71

70:                                               ; preds = %67, %63
  store i8 124, i8* %7, align 1
  br label %90

71:                                               ; preds = %67, %63
  %72 = load i8, i8* %4, align 1
  %73 = trunc i8 %72 to i1
  br i1 %73, label %74, label %78

74:                                               ; preds = %71
  %75 = load i32, i32* %5, align 4
  %76 = and i32 %75, 61440
  %77 = icmp eq i32 %76, 49152
  br i1 %77, label %81, label %82

78:                                               ; preds = %71
  %79 = load i32, i32* %6, align 4
  %80 = icmp eq i32 %79, 7
  br i1 %80, label %81, label %82

81:                                               ; preds = %78, %74
  store i8 61, i8* %7, align 1
  br label %89

82:                                               ; preds = %78, %74
  %83 = load i8, i8* %4, align 1
  %84 = trunc i8 %83 to i1
  br i1 %84, label %85, label %87

85:                                               ; preds = %82
  br i1 false, label %86, label %87

86:                                               ; preds = %85
  store i8 62, i8* %7, align 1
  br label %88

87:                                               ; preds = %85, %82
  store i8 0, i8* %7, align 1
  br label %88

88:                                               ; preds = %87, %86
  br label %89

89:                                               ; preds = %88, %81
  br label %90

90:                                               ; preds = %89, %70
  br label %91

91:                                               ; preds = %90, %59
  br label %92

92:                                               ; preds = %91, %48
  br label %93

93:                                               ; preds = %92, %44
  br label %94

94:                                               ; preds = %93, %30
  %95 = load i8, i8* %7, align 1
  ret i8 %95
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.bin_str* @get_color_indicator(%struct.fileinfo* %0, i1 zeroext %1) #0 {
  %3 = alloca %struct.fileinfo*, align 8
  %4 = alloca i8, align 1
  %5 = alloca i32, align 4
  %6 = alloca %struct.color_ext_type*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.bin_str*, align 8
  store %struct.fileinfo* %0, %struct.fileinfo** %3, align 8
  %12 = zext i1 %1 to i8
  store i8 %12, i8* %4, align 1
  %13 = load i8, i8* %4, align 1
  %14 = trunc i8 %13 to i1
  br i1 %14, label %15, label %28

15:                                               ; preds = %2
  %16 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %17 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %16, i32 0, i32 1
  %18 = load i8*, i8** %17, align 8
  store i8* %18, i8** %8, align 8
  %19 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %20 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %19, i32 0, i32 5
  %21 = load i32, i32* %20, align 4
  store i32 %21, i32* %9, align 4
  %22 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %23 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %22, i32 0, i32 8
  %24 = load i8, i8* %23, align 1
  %25 = trunc i8 %24 to i1
  %26 = zext i1 %25 to i64
  %27 = select i1 %25, i32 0, i32 -1
  store i32 %27, i32* %10, align 4
  br label %55

28:                                               ; preds = %2
  %29 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %30 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %29, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  store i8* %31, i8** %8, align 8
  %32 = load i8, i8* @color_symlink_as_referent, align 1
  %33 = trunc i8 %32 to i1
  br i1 %33, label %34, label %43

34:                                               ; preds = %28
  %35 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %36 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %35, i32 0, i32 8
  %37 = load i8, i8* %36, align 1
  %38 = trunc i8 %37 to i1
  br i1 %38, label %39, label %43

39:                                               ; preds = %34
  %40 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %41 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %40, i32 0, i32 5
  %42 = load i32, i32* %41, align 4
  br label %48

43:                                               ; preds = %34, %28
  %44 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %45 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %44, i32 0, i32 3
  %46 = getelementptr inbounds %struct.stat, %struct.stat* %45, i32 0, i32 3
  %47 = load i32, i32* %46, align 8
  br label %48

48:                                               ; preds = %43, %39
  %49 = phi i32 [ %42, %39 ], [ %47, %43 ]
  store i32 %49, i32* %9, align 4
  %50 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %51 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %50, i32 0, i32 8
  %52 = load i8, i8* %51, align 1
  %53 = trunc i8 %52 to i1
  %54 = zext i1 %53 to i32
  store i32 %54, i32* %10, align 4
  br label %55

55:                                               ; preds = %48, %15
  %56 = load i32, i32* %10, align 4
  %57 = icmp eq i32 %56, -1
  br i1 %57, label %58, label %61

58:                                               ; preds = %55
  %59 = call zeroext i1 @is_colored(i32 12)
  br i1 %59, label %60, label %61

60:                                               ; preds = %58
  store i32 12, i32* %5, align 4
  br label %186

61:                                               ; preds = %58, %55
  %62 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %63 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %62, i32 0, i32 7
  %64 = load i8, i8* %63, align 8
  %65 = trunc i8 %64 to i1
  br i1 %65, label %73, label %66

66:                                               ; preds = %61
  %67 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %68 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %67, i32 0, i32 4
  %69 = load i32, i32* %68, align 8
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds [10 x i32], [10 x i32]* @get_color_indicator.filetype_indicator, i64 0, i64 %70
  %72 = load i32, i32* %71, align 4
  store i32 %72, i32* %5, align 4
  br label %185

73:                                               ; preds = %61
  %74 = load i32, i32* %9, align 4
  %75 = and i32 %74, 61440
  %76 = icmp eq i32 %75, 32768
  br i1 %76, label %77, label %120

77:                                               ; preds = %73
  store i32 5, i32* %5, align 4
  %78 = load i32, i32* %9, align 4
  %79 = and i32 %78, 2048
  %80 = icmp ne i32 %79, 0
  br i1 %80, label %81, label %84

81:                                               ; preds = %77
  %82 = call zeroext i1 @is_colored(i32 16)
  br i1 %82, label %83, label %84

83:                                               ; preds = %81
  store i32 16, i32* %5, align 4
  br label %119

84:                                               ; preds = %81, %77
  %85 = load i32, i32* %9, align 4
  %86 = and i32 %85, 1024
  %87 = icmp ne i32 %86, 0
  br i1 %87, label %88, label %91

88:                                               ; preds = %84
  %89 = call zeroext i1 @is_colored(i32 17)
  br i1 %89, label %90, label %91

90:                                               ; preds = %88
  store i32 17, i32* %5, align 4
  br label %118

91:                                               ; preds = %88, %84
  %92 = call zeroext i1 @is_colored(i32 21)
  br i1 %92, label %93, label %99

93:                                               ; preds = %91
  %94 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %95 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %94, i32 0, i32 10
  %96 = load i8, i8* %95, align 8
  %97 = trunc i8 %96 to i1
  br i1 %97, label %98, label %99

98:                                               ; preds = %93
  store i32 21, i32* %5, align 4
  br label %117

99:                                               ; preds = %93, %91
  %100 = load i32, i32* %9, align 4
  %101 = and i32 %100, 73
  %102 = icmp ne i32 %101, 0
  br i1 %102, label %103, label %106

103:                                              ; preds = %99
  %104 = call zeroext i1 @is_colored(i32 14)
  br i1 %104, label %105, label %106

105:                                              ; preds = %103
  store i32 14, i32* %5, align 4
  br label %116

106:                                              ; preds = %103, %99
  %107 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %108 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %107, i32 0, i32 3
  %109 = getelementptr inbounds %struct.stat, %struct.stat* %108, i32 0, i32 2
  %110 = load i64, i64* %109, align 8
  %111 = icmp ult i64 1, %110
  br i1 %111, label %112, label %115

112:                                              ; preds = %106
  %113 = call zeroext i1 @is_colored(i32 22)
  br i1 %113, label %114, label %115

114:                                              ; preds = %112
  store i32 22, i32* %5, align 4
  br label %115

115:                                              ; preds = %114, %112, %106
  br label %116

116:                                              ; preds = %115, %105
  br label %117

117:                                              ; preds = %116, %98
  br label %118

118:                                              ; preds = %117, %90
  br label %119

119:                                              ; preds = %118, %83
  br label %184

120:                                              ; preds = %73
  %121 = load i32, i32* %9, align 4
  %122 = and i32 %121, 61440
  %123 = icmp eq i32 %122, 16384
  br i1 %123, label %124, label %152

124:                                              ; preds = %120
  store i32 6, i32* %5, align 4
  %125 = load i32, i32* %9, align 4
  %126 = and i32 %125, 512
  %127 = icmp ne i32 %126, 0
  br i1 %127, label %128, label %135

128:                                              ; preds = %124
  %129 = load i32, i32* %9, align 4
  %130 = and i32 %129, 2
  %131 = icmp ne i32 %130, 0
  br i1 %131, label %132, label %135

132:                                              ; preds = %128
  %133 = call zeroext i1 @is_colored(i32 20)
  br i1 %133, label %134, label %135

134:                                              ; preds = %132
  store i32 20, i32* %5, align 4
  br label %151

135:                                              ; preds = %132, %128, %124
  %136 = load i32, i32* %9, align 4
  %137 = and i32 %136, 2
  %138 = icmp ne i32 %137, 0
  br i1 %138, label %139, label %142

139:                                              ; preds = %135
  %140 = call zeroext i1 @is_colored(i32 19)
  br i1 %140, label %141, label %142

141:                                              ; preds = %139
  store i32 19, i32* %5, align 4
  br label %150

142:                                              ; preds = %139, %135
  %143 = load i32, i32* %9, align 4
  %144 = and i32 %143, 512
  %145 = icmp ne i32 %144, 0
  br i1 %145, label %146, label %149

146:                                              ; preds = %142
  %147 = call zeroext i1 @is_colored(i32 18)
  br i1 %147, label %148, label %149

148:                                              ; preds = %146
  store i32 18, i32* %5, align 4
  br label %149

149:                                              ; preds = %148, %146, %142
  br label %150

150:                                              ; preds = %149, %141
  br label %151

151:                                              ; preds = %150, %134
  br label %183

152:                                              ; preds = %120
  %153 = load i32, i32* %9, align 4
  %154 = and i32 %153, 61440
  %155 = icmp eq i32 %154, 40960
  br i1 %155, label %156, label %157

156:                                              ; preds = %152
  store i32 7, i32* %5, align 4
  br label %182

157:                                              ; preds = %152
  %158 = load i32, i32* %9, align 4
  %159 = and i32 %158, 61440
  %160 = icmp eq i32 %159, 4096
  br i1 %160, label %161, label %162

161:                                              ; preds = %157
  store i32 8, i32* %5, align 4
  br label %181

162:                                              ; preds = %157
  %163 = load i32, i32* %9, align 4
  %164 = and i32 %163, 61440
  %165 = icmp eq i32 %164, 49152
  br i1 %165, label %166, label %167

166:                                              ; preds = %162
  store i32 9, i32* %5, align 4
  br label %180

167:                                              ; preds = %162
  %168 = load i32, i32* %9, align 4
  %169 = and i32 %168, 61440
  %170 = icmp eq i32 %169, 24576
  br i1 %170, label %171, label %172

171:                                              ; preds = %167
  store i32 10, i32* %5, align 4
  br label %179

172:                                              ; preds = %167
  %173 = load i32, i32* %9, align 4
  %174 = and i32 %173, 61440
  %175 = icmp eq i32 %174, 8192
  br i1 %175, label %176, label %177

176:                                              ; preds = %172
  store i32 11, i32* %5, align 4
  br label %178

177:                                              ; preds = %172
  store i32 13, i32* %5, align 4
  br label %178

178:                                              ; preds = %177, %176
  br label %179

179:                                              ; preds = %178, %171
  br label %180

180:                                              ; preds = %179, %166
  br label %181

181:                                              ; preds = %180, %161
  br label %182

182:                                              ; preds = %181, %156
  br label %183

183:                                              ; preds = %182, %151
  br label %184

184:                                              ; preds = %183, %119
  br label %185

185:                                              ; preds = %184, %66
  br label %186

186:                                              ; preds = %185, %60
  store %struct.color_ext_type* null, %struct.color_ext_type** %6, align 8
  %187 = load i32, i32* %5, align 4
  %188 = icmp eq i32 %187, 5
  br i1 %188, label %189, label %231

189:                                              ; preds = %186
  %190 = load i8*, i8** %8, align 8
  %191 = call i64 @strlen(i8* %190) #17
  store i64 %191, i64* %7, align 8
  %192 = load i64, i64* %7, align 8
  %193 = load i8*, i8** %8, align 8
  %194 = getelementptr inbounds i8, i8* %193, i64 %192
  store i8* %194, i8** %8, align 8
  %195 = load %struct.color_ext_type*, %struct.color_ext_type** @color_ext_list, align 8
  store %struct.color_ext_type* %195, %struct.color_ext_type** %6, align 8
  br label %196

196:                                              ; preds = %226, %189
  %197 = load %struct.color_ext_type*, %struct.color_ext_type** %6, align 8
  %198 = icmp ne %struct.color_ext_type* %197, null
  br i1 %198, label %199, label %230

199:                                              ; preds = %196
  %200 = load %struct.color_ext_type*, %struct.color_ext_type** %6, align 8
  %201 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %200, i32 0, i32 0
  %202 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %201, i32 0, i32 0
  %203 = load i64, i64* %202, align 8
  %204 = load i64, i64* %7, align 8
  %205 = icmp ule i64 %203, %204
  br i1 %205, label %206, label %225

206:                                              ; preds = %199
  %207 = load i8*, i8** %8, align 8
  %208 = load %struct.color_ext_type*, %struct.color_ext_type** %6, align 8
  %209 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %208, i32 0, i32 0
  %210 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %209, i32 0, i32 0
  %211 = load i64, i64* %210, align 8
  %212 = sub i64 0, %211
  %213 = getelementptr inbounds i8, i8* %207, i64 %212
  %214 = load %struct.color_ext_type*, %struct.color_ext_type** %6, align 8
  %215 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %214, i32 0, i32 0
  %216 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %215, i32 0, i32 1
  %217 = load i8*, i8** %216, align 8
  %218 = load %struct.color_ext_type*, %struct.color_ext_type** %6, align 8
  %219 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %218, i32 0, i32 0
  %220 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %219, i32 0, i32 0
  %221 = load i64, i64* %220, align 8
  %222 = call i32 @c_strncasecmp(i8* %213, i8* %217, i64 %221) #17
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %224, label %225

224:                                              ; preds = %206
  br label %230

225:                                              ; preds = %206, %199
  br label %226

226:                                              ; preds = %225
  %227 = load %struct.color_ext_type*, %struct.color_ext_type** %6, align 8
  %228 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %227, i32 0, i32 2
  %229 = load %struct.color_ext_type*, %struct.color_ext_type** %228, align 8
  store %struct.color_ext_type* %229, %struct.color_ext_type** %6, align 8
  br label %196, !llvm.loop !41

230:                                              ; preds = %224, %196
  br label %231

231:                                              ; preds = %230, %186
  %232 = load i32, i32* %5, align 4
  %233 = icmp eq i32 %232, 7
  br i1 %233, label %234, label %244

234:                                              ; preds = %231
  %235 = load i32, i32* %10, align 4
  %236 = icmp ne i32 %235, 0
  br i1 %236, label %244, label %237

237:                                              ; preds = %234
  %238 = load i8, i8* @color_symlink_as_referent, align 1
  %239 = trunc i8 %238 to i1
  br i1 %239, label %242, label %240

240:                                              ; preds = %237
  %241 = call zeroext i1 @is_colored(i32 13)
  br i1 %241, label %242, label %243

242:                                              ; preds = %240, %237
  store i32 13, i32* %5, align 4
  br label %243

243:                                              ; preds = %242, %240
  br label %244

244:                                              ; preds = %243, %234, %231
  %245 = load %struct.color_ext_type*, %struct.color_ext_type** %6, align 8
  %246 = icmp ne %struct.color_ext_type* %245, null
  br i1 %246, label %247, label %250

247:                                              ; preds = %244
  %248 = load %struct.color_ext_type*, %struct.color_ext_type** %6, align 8
  %249 = getelementptr inbounds %struct.color_ext_type, %struct.color_ext_type* %248, i32 0, i32 1
  br label %254

250:                                              ; preds = %244
  %251 = load i32, i32* %5, align 4
  %252 = zext i32 %251 to i64
  %253 = getelementptr inbounds [24 x %struct.bin_str], [24 x %struct.bin_str]* @color_indicator, i64 0, i64 %252
  br label %254

254:                                              ; preds = %250, %247
  %255 = phi %struct.bin_str* [ %249, %247 ], [ %253, %250 ]
  store %struct.bin_str* %255, %struct.bin_str** %11, align 8
  %256 = load %struct.bin_str*, %struct.bin_str** %11, align 8
  %257 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %256, i32 0, i32 1
  %258 = load i8*, i8** %257, align 8
  %259 = icmp ne i8* %258, null
  br i1 %259, label %260, label %262

260:                                              ; preds = %254
  %261 = load %struct.bin_str*, %struct.bin_str** %11, align 8
  br label %263

262:                                              ; preds = %254
  br label %263

263:                                              ; preds = %262, %260
  %264 = phi %struct.bin_str* [ %261, %260 ], [ null, %262 ]
  ret %struct.bin_str* %264
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @calculate_columns(i1 zeroext %0) #0 {
  %2 = alloca i8, align 1
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.fileinfo*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = zext i1 %0 to i8
  store i8 %11, i8* %2, align 1
  %12 = load i64, i64* @max_idx, align 8
  %13 = load i64, i64* @cwd_n_used, align 8
  %14 = icmp ult i64 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %1
  %16 = load i64, i64* @max_idx, align 8
  br label %19

17:                                               ; preds = %1
  %18 = load i64, i64* @cwd_n_used, align 8
  br label %19

19:                                               ; preds = %17, %15
  %20 = phi i64 [ %16, %15 ], [ %18, %17 ]
  store i64 %20, i64* %5, align 8
  call void @init_column_info()
  store i64 0, i64* %3, align 8
  br label %21

21:                                               ; preds = %124, %19
  %22 = load i64, i64* %3, align 8
  %23 = load i64, i64* @cwd_n_used, align 8
  %24 = icmp ult i64 %22, %23
  br i1 %24, label %25, label %127

25:                                               ; preds = %21
  %26 = load i8**, i8*** @sorted_file, align 8
  %27 = load i64, i64* %3, align 8
  %28 = getelementptr inbounds i8*, i8** %26, i64 %27
  %29 = load i8*, i8** %28, align 8
  %30 = bitcast i8* %29 to %struct.fileinfo*
  store %struct.fileinfo* %30, %struct.fileinfo** %6, align 8
  %31 = load %struct.fileinfo*, %struct.fileinfo** %6, align 8
  %32 = call i64 @length_of_file_name_and_frills(%struct.fileinfo* %31)
  store i64 %32, i64* %7, align 8
  store i64 0, i64* %8, align 8
  br label %33

33:                                               ; preds = %120, %25
  %34 = load i64, i64* %8, align 8
  %35 = load i64, i64* %5, align 8
  %36 = icmp ult i64 %34, %35
  br i1 %36, label %37, label %123

37:                                               ; preds = %33
  %38 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %39 = load i64, i64* %8, align 8
  %40 = getelementptr inbounds %struct.column_info, %struct.column_info* %38, i64 %39
  %41 = getelementptr inbounds %struct.column_info, %struct.column_info* %40, i32 0, i32 0
  %42 = load i8, i8* %41, align 8
  %43 = trunc i8 %42 to i1
  br i1 %43, label %44, label %119

44:                                               ; preds = %37
  %45 = load i8, i8* %2, align 1
  %46 = trunc i8 %45 to i1
  br i1 %46, label %47, label %56

47:                                               ; preds = %44
  %48 = load i64, i64* %3, align 8
  %49 = load i64, i64* @cwd_n_used, align 8
  %50 = load i64, i64* %8, align 8
  %51 = add i64 %49, %50
  %52 = load i64, i64* %8, align 8
  %53 = add i64 %52, 1
  %54 = udiv i64 %51, %53
  %55 = udiv i64 %48, %54
  br label %61

56:                                               ; preds = %44
  %57 = load i64, i64* %3, align 8
  %58 = load i64, i64* %8, align 8
  %59 = add i64 %58, 1
  %60 = urem i64 %57, %59
  br label %61

61:                                               ; preds = %56, %47
  %62 = phi i64 [ %55, %47 ], [ %60, %56 ]
  store i64 %62, i64* %9, align 8
  %63 = load i64, i64* %7, align 8
  %64 = load i64, i64* %9, align 8
  %65 = load i64, i64* %8, align 8
  %66 = icmp eq i64 %64, %65
  %67 = zext i1 %66 to i64
  %68 = select i1 %66, i32 0, i32 2
  %69 = sext i32 %68 to i64
  %70 = add i64 %63, %69
  store i64 %70, i64* %10, align 8
  %71 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %72 = load i64, i64* %8, align 8
  %73 = getelementptr inbounds %struct.column_info, %struct.column_info* %71, i64 %72
  %74 = getelementptr inbounds %struct.column_info, %struct.column_info* %73, i32 0, i32 2
  %75 = load i64*, i64** %74, align 8
  %76 = load i64, i64* %9, align 8
  %77 = getelementptr inbounds i64, i64* %75, i64 %76
  %78 = load i64, i64* %77, align 8
  %79 = load i64, i64* %10, align 8
  %80 = icmp ult i64 %78, %79
  br i1 %80, label %81, label %118

81:                                               ; preds = %61
  %82 = load i64, i64* %10, align 8
  %83 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %84 = load i64, i64* %8, align 8
  %85 = getelementptr inbounds %struct.column_info, %struct.column_info* %83, i64 %84
  %86 = getelementptr inbounds %struct.column_info, %struct.column_info* %85, i32 0, i32 2
  %87 = load i64*, i64** %86, align 8
  %88 = load i64, i64* %9, align 8
  %89 = getelementptr inbounds i64, i64* %87, i64 %88
  %90 = load i64, i64* %89, align 8
  %91 = sub i64 %82, %90
  %92 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %93 = load i64, i64* %8, align 8
  %94 = getelementptr inbounds %struct.column_info, %struct.column_info* %92, i64 %93
  %95 = getelementptr inbounds %struct.column_info, %struct.column_info* %94, i32 0, i32 1
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, %91
  store i64 %97, i64* %95, align 8
  %98 = load i64, i64* %10, align 8
  %99 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %100 = load i64, i64* %8, align 8
  %101 = getelementptr inbounds %struct.column_info, %struct.column_info* %99, i64 %100
  %102 = getelementptr inbounds %struct.column_info, %struct.column_info* %101, i32 0, i32 2
  %103 = load i64*, i64** %102, align 8
  %104 = load i64, i64* %9, align 8
  %105 = getelementptr inbounds i64, i64* %103, i64 %104
  store i64 %98, i64* %105, align 8
  %106 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %107 = load i64, i64* %8, align 8
  %108 = getelementptr inbounds %struct.column_info, %struct.column_info* %106, i64 %107
  %109 = getelementptr inbounds %struct.column_info, %struct.column_info* %108, i32 0, i32 1
  %110 = load i64, i64* %109, align 8
  %111 = load i64, i64* @line_length, align 8
  %112 = icmp ult i64 %110, %111
  %113 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %114 = load i64, i64* %8, align 8
  %115 = getelementptr inbounds %struct.column_info, %struct.column_info* %113, i64 %114
  %116 = getelementptr inbounds %struct.column_info, %struct.column_info* %115, i32 0, i32 0
  %117 = zext i1 %112 to i8
  store i8 %117, i8* %116, align 8
  br label %118

118:                                              ; preds = %81, %61
  br label %119

119:                                              ; preds = %118, %37
  br label %120

120:                                              ; preds = %119
  %121 = load i64, i64* %8, align 8
  %122 = add i64 %121, 1
  store i64 %122, i64* %8, align 8
  br label %33, !llvm.loop !42

123:                                              ; preds = %33
  br label %124

124:                                              ; preds = %123
  %125 = load i64, i64* %3, align 8
  %126 = add i64 %125, 1
  store i64 %126, i64* %3, align 8
  br label %21, !llvm.loop !43

127:                                              ; preds = %21
  %128 = load i64, i64* %5, align 8
  store i64 %128, i64* %4, align 8
  br label %129

129:                                              ; preds = %142, %127
  %130 = load i64, i64* %4, align 8
  %131 = icmp ult i64 1, %130
  br i1 %131, label %132, label %145

132:                                              ; preds = %129
  %133 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %134 = load i64, i64* %4, align 8
  %135 = sub i64 %134, 1
  %136 = getelementptr inbounds %struct.column_info, %struct.column_info* %133, i64 %135
  %137 = getelementptr inbounds %struct.column_info, %struct.column_info* %136, i32 0, i32 0
  %138 = load i8, i8* %137, align 8
  %139 = trunc i8 %138 to i1
  br i1 %139, label %140, label %141

140:                                              ; preds = %132
  br label %145

141:                                              ; preds = %132
  br label %142

142:                                              ; preds = %141
  %143 = load i64, i64* %4, align 8
  %144 = add i64 %143, -1
  store i64 %144, i64* %4, align 8
  br label %129, !llvm.loop !44

145:                                              ; preds = %140, %129
  %146 = load i64, i64* %4, align 8
  ret i64 %146
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @length_of_file_name_and_frills(%struct.fileinfo* %0) #0 {
  %2 = alloca %struct.fileinfo*, align 8
  %3 = alloca i64, align 8
  %4 = alloca [652 x i8], align 16
  %5 = alloca i8, align 1
  store %struct.fileinfo* %0, %struct.fileinfo** %2, align 8
  store i64 0, i64* %3, align 8
  %6 = load i8, i8* @print_inode, align 1
  %7 = trunc i8 %6 to i1
  br i1 %7, label %8, label %27

8:                                                ; preds = %1
  %9 = load i32, i32* @format, align 4
  %10 = icmp eq i32 %9, 4
  br i1 %10, label %11, label %19

11:                                               ; preds = %8
  %12 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %13 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %12, i32 0, i32 3
  %14 = getelementptr inbounds %struct.stat, %struct.stat* %13, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds [652 x i8], [652 x i8]* %4, i64 0, i64 0
  %17 = call i8* @umaxtostr(i64 %15, i8* %16)
  %18 = call i64 @strlen(i8* %17) #17
  br label %22

19:                                               ; preds = %8
  %20 = load i32, i32* @inode_number_width, align 4
  %21 = sext i32 %20 to i64
  br label %22

22:                                               ; preds = %19, %11
  %23 = phi i64 [ %18, %11 ], [ %21, %19 ]
  %24 = add i64 1, %23
  %25 = load i64, i64* %3, align 8
  %26 = add i64 %25, %24
  store i64 %26, i64* %3, align 8
  br label %27

27:                                               ; preds = %22, %1
  %28 = load i8, i8* @print_block_size, align 1
  %29 = trunc i8 %28 to i1
  br i1 %29, label %30, label %59

30:                                               ; preds = %27
  %31 = load i32, i32* @format, align 4
  %32 = icmp eq i32 %31, 4
  br i1 %32, label %33, label %51

33:                                               ; preds = %30
  %34 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %35 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %34, i32 0, i32 7
  %36 = load i8, i8* %35, align 8
  %37 = trunc i8 %36 to i1
  br i1 %37, label %39, label %38

38:                                               ; preds = %33
  br label %48

39:                                               ; preds = %33
  %40 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %41 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %40, i32 0, i32 3
  %42 = getelementptr inbounds %struct.stat, %struct.stat* %41, i32 0, i32 10
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds [652 x i8], [652 x i8]* %4, i64 0, i64 0
  %45 = load i32, i32* @human_output_opts, align 4
  %46 = load i64, i64* @output_block_size, align 8
  %47 = call i8* @human_readable(i64 %43, i8* %44, i32 %45, i64 512, i64 %46)
  br label %48

48:                                               ; preds = %39, %38
  %49 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.225, i64 0, i64 0), %38 ], [ %47, %39 ]
  %50 = call i64 @strlen(i8* %49) #17
  br label %54

51:                                               ; preds = %30
  %52 = load i32, i32* @block_size_width, align 4
  %53 = sext i32 %52 to i64
  br label %54

54:                                               ; preds = %51, %48
  %55 = phi i64 [ %50, %48 ], [ %53, %51 ]
  %56 = add i64 1, %55
  %57 = load i64, i64* %3, align 8
  %58 = add i64 %57, %56
  store i64 %58, i64* %3, align 8
  br label %59

59:                                               ; preds = %54, %27
  %60 = load i8, i8* @print_scontext, align 1
  %61 = trunc i8 %60 to i1
  br i1 %61, label %62, label %78

62:                                               ; preds = %59
  %63 = load i32, i32* @format, align 4
  %64 = icmp eq i32 %63, 4
  br i1 %64, label %65, label %70

65:                                               ; preds = %62
  %66 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %67 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %66, i32 0, i32 6
  %68 = load i8*, i8** %67, align 8
  %69 = call i64 @strlen(i8* %68) #17
  br label %73

70:                                               ; preds = %62
  %71 = load i32, i32* @scontext_width, align 4
  %72 = sext i32 %71 to i64
  br label %73

73:                                               ; preds = %70, %65
  %74 = phi i64 [ %69, %65 ], [ %72, %70 ]
  %75 = add i64 1, %74
  %76 = load i64, i64* %3, align 8
  %77 = add i64 %76, %75
  store i64 %77, i64* %3, align 8
  br label %78

78:                                               ; preds = %73, %59
  %79 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %80 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %79, i32 0, i32 0
  %81 = load i8*, i8** %80, align 8
  %82 = load %struct.quoting_options*, %struct.quoting_options** @filename_quoting_options, align 8
  %83 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %84 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %83, i32 0, i32 11
  %85 = load i32, i32* %84, align 4
  %86 = call i64 @quote_name_width(i8* %81, %struct.quoting_options* %82, i32 %85)
  %87 = load i64, i64* %3, align 8
  %88 = add i64 %87, %86
  store i64 %88, i64* %3, align 8
  %89 = load i32, i32* @indicator_style, align 4
  %90 = icmp ne i32 %89, 0
  br i1 %90, label %91, label %111

91:                                               ; preds = %78
  %92 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %93 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %92, i32 0, i32 7
  %94 = load i8, i8* %93, align 8
  %95 = trunc i8 %94 to i1
  %96 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %97 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %96, i32 0, i32 3
  %98 = getelementptr inbounds %struct.stat, %struct.stat* %97, i32 0, i32 3
  %99 = load i32, i32* %98, align 8
  %100 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %101 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %100, i32 0, i32 4
  %102 = load i32, i32* %101, align 8
  %103 = call signext i8 @get_type_indicator(i1 zeroext %95, i32 %99, i32 %102)
  store i8 %103, i8* %5, align 1
  %104 = load i8, i8* %5, align 1
  %105 = sext i8 %104 to i32
  %106 = icmp ne i32 %105, 0
  %107 = zext i1 %106 to i32
  %108 = sext i32 %107 to i64
  %109 = load i64, i64* %3, align 8
  %110 = add i64 %109, %108
  store i64 %110, i64* %3, align 8
  br label %111

111:                                              ; preds = %91, %78
  %112 = load i64, i64* %3, align 8
  ret i64 %112
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @indent(i64 %0, i64 %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  br label %5

5:                                                ; preds = %34, %2
  %6 = load i64, i64* %3, align 8
  %7 = load i64, i64* %4, align 8
  %8 = icmp ult i64 %6, %7
  br i1 %8, label %9, label %35

9:                                                ; preds = %5
  %10 = load i64, i64* @tabsize, align 8
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %30

12:                                               ; preds = %9
  %13 = load i64, i64* %4, align 8
  %14 = load i64, i64* @tabsize, align 8
  %15 = udiv i64 %13, %14
  %16 = load i64, i64* %3, align 8
  %17 = add i64 %16, 1
  %18 = load i64, i64* @tabsize, align 8
  %19 = udiv i64 %17, %18
  %20 = icmp ugt i64 %15, %19
  br i1 %20, label %21, label %30

21:                                               ; preds = %12
  %22 = call i32 @putchar_unlocked(i32 9)
  %23 = load i64, i64* @tabsize, align 8
  %24 = load i64, i64* %3, align 8
  %25 = load i64, i64* @tabsize, align 8
  %26 = urem i64 %24, %25
  %27 = sub i64 %23, %26
  %28 = load i64, i64* %3, align 8
  %29 = add i64 %28, %27
  store i64 %29, i64* %3, align 8
  br label %34

30:                                               ; preds = %12, %9
  %31 = call i32 @putchar_unlocked(i32 32)
  %32 = load i64, i64* %3, align 8
  %33 = add i64 %32, 1
  store i64 %33, i64* %3, align 8
  br label %34

34:                                               ; preds = %30, %21
  br label %5, !llvm.loop !45

35:                                               ; preds = %5
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quote_name_width(i8* %0, %struct.quoting_options* %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca %struct.quoting_options*, align 8
  %6 = alloca i32, align 4
  %7 = alloca [8192 x i8], align 16
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store %struct.quoting_options* %1, %struct.quoting_options** %5, align 8
  store i32 %2, i32* %6, align 4
  %11 = getelementptr inbounds [8192 x i8], [8192 x i8]* %7, i64 0, i64 0
  store i8* %11, i8** %8, align 8
  %12 = load i8*, i8** %4, align 8
  %13 = load %struct.quoting_options*, %struct.quoting_options** %5, align 8
  %14 = load i32, i32* %6, align 4
  %15 = call i64 @quote_name_buf(i8** %8, i64 8192, i8* %12, %struct.quoting_options* %13, i32 %14, i64* %9, i8* %10)
  %16 = load i8*, i8** %8, align 8
  %17 = getelementptr inbounds [8192 x i8], [8192 x i8]* %7, i64 0, i64 0
  %18 = icmp ne i8* %16, %17
  br i1 %18, label %19, label %25

19:                                               ; preds = %3
  %20 = load i8*, i8** %8, align 8
  %21 = load i8*, i8** %4, align 8
  %22 = icmp ne i8* %20, %21
  br i1 %22, label %23, label %25

23:                                               ; preds = %19
  %24 = load i8*, i8** %8, align 8
  call void @free(i8* %24) #14
  br label %25

25:                                               ; preds = %23, %19, %3
  %26 = load i8, i8* %10, align 1
  %27 = trunc i8 %26 to i1
  %28 = zext i1 %27 to i64
  %29 = load i64, i64* %9, align 8
  %30 = add i64 %29, %28
  store i64 %30, i64* %9, align 8
  %31 = load i64, i64* %9, align 8
  ret i64 %31
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @init_column_info() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = load i64, i64* @max_idx, align 8
  %10 = load i64, i64* @cwd_n_used, align 8
  %11 = icmp ult i64 %9, %10
  br i1 %11, label %12, label %14

12:                                               ; preds = %0
  %13 = load i64, i64* @max_idx, align 8
  br label %16

14:                                               ; preds = %0
  %15 = load i64, i64* @cwd_n_used, align 8
  br label %16

16:                                               ; preds = %14, %12
  %17 = phi i64 [ %13, %12 ], [ %15, %14 ]
  store i64 %17, i64* %2, align 8
  %18 = load i64, i64* @init_column_info.column_info_alloc, align 8
  %19 = load i64, i64* %2, align 8
  %20 = icmp ult i64 %18, %19
  br i1 %20, label %21, label %87

21:                                               ; preds = %16
  %22 = load i64, i64* %2, align 8
  %23 = load i64, i64* @max_idx, align 8
  %24 = udiv i64 %23, 2
  %25 = icmp ult i64 %22, %24
  br i1 %25, label %26, label %34

26:                                               ; preds = %21
  %27 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %28 = bitcast %struct.column_info* %27 to i8*
  %29 = load i64, i64* %2, align 8
  %30 = call i8* @xnrealloc(i8* %28, i64 %29, i64 48)
  %31 = bitcast i8* %30 to %struct.column_info*
  store %struct.column_info* %31, %struct.column_info** @column_info, align 8
  %32 = load i64, i64* %2, align 8
  %33 = mul i64 2, %32
  store i64 %33, i64* %3, align 8
  br label %41

34:                                               ; preds = %21
  %35 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %36 = bitcast %struct.column_info* %35 to i8*
  %37 = load i64, i64* @max_idx, align 8
  %38 = call i8* @xnrealloc(i8* %36, i64 %37, i64 24)
  %39 = bitcast i8* %38 to %struct.column_info*
  store %struct.column_info* %39, %struct.column_info** @column_info, align 8
  %40 = load i64, i64* @max_idx, align 8
  store i64 %40, i64* %3, align 8
  br label %41

41:                                               ; preds = %34, %26
  %42 = load i64, i64* %3, align 8
  %43 = load i64, i64* @init_column_info.column_info_alloc, align 8
  %44 = sub i64 %42, %43
  store i64 %44, i64* %5, align 8
  %45 = load i64, i64* @init_column_info.column_info_alloc, align 8
  %46 = add i64 %45, 1
  %47 = load i64, i64* %3, align 8
  %48 = add i64 %46, %47
  store i64 %48, i64* %6, align 8
  %49 = load i64, i64* %6, align 8
  %50 = load i64, i64* %5, align 8
  %51 = mul i64 %49, %50
  store i64 %51, i64* %7, align 8
  %52 = load i64, i64* %6, align 8
  %53 = load i64, i64* %3, align 8
  %54 = icmp ult i64 %52, %53
  br i1 %54, label %61, label %55

55:                                               ; preds = %41
  %56 = load i64, i64* %7, align 8
  %57 = load i64, i64* %5, align 8
  %58 = udiv i64 %56, %57
  %59 = load i64, i64* %6, align 8
  %60 = icmp ne i64 %58, %59
  br i1 %60, label %61, label %62

61:                                               ; preds = %55, %41
  call void @xalloc_die() #15
  unreachable

62:                                               ; preds = %55
  %63 = load i64, i64* %7, align 8
  %64 = udiv i64 %63, 2
  %65 = call noalias i8* @xnmalloc(i64 %64, i64 8)
  %66 = bitcast i8* %65 to i64*
  store i64* %66, i64** %4, align 8
  %67 = load i64, i64* @init_column_info.column_info_alloc, align 8
  store i64 %67, i64* %1, align 8
  br label %68

68:                                               ; preds = %82, %62
  %69 = load i64, i64* %1, align 8
  %70 = load i64, i64* %3, align 8
  %71 = icmp ult i64 %69, %70
  br i1 %71, label %72, label %85

72:                                               ; preds = %68
  %73 = load i64*, i64** %4, align 8
  %74 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %75 = load i64, i64* %1, align 8
  %76 = getelementptr inbounds %struct.column_info, %struct.column_info* %74, i64 %75
  %77 = getelementptr inbounds %struct.column_info, %struct.column_info* %76, i32 0, i32 2
  store i64* %73, i64** %77, align 8
  %78 = load i64, i64* %1, align 8
  %79 = add i64 %78, 1
  %80 = load i64*, i64** %4, align 8
  %81 = getelementptr inbounds i64, i64* %80, i64 %79
  store i64* %81, i64** %4, align 8
  br label %82

82:                                               ; preds = %72
  %83 = load i64, i64* %1, align 8
  %84 = add i64 %83, 1
  store i64 %84, i64* %1, align 8
  br label %68, !llvm.loop !46

85:                                               ; preds = %68
  %86 = load i64, i64* %3, align 8
  store i64 %86, i64* @init_column_info.column_info_alloc, align 8
  br label %87

87:                                               ; preds = %85, %16
  store i64 0, i64* %1, align 8
  br label %88

88:                                               ; preds = %120, %87
  %89 = load i64, i64* %1, align 8
  %90 = load i64, i64* %2, align 8
  %91 = icmp ult i64 %89, %90
  br i1 %91, label %92, label %123

92:                                               ; preds = %88
  %93 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %94 = load i64, i64* %1, align 8
  %95 = getelementptr inbounds %struct.column_info, %struct.column_info* %93, i64 %94
  %96 = getelementptr inbounds %struct.column_info, %struct.column_info* %95, i32 0, i32 0
  store i8 1, i8* %96, align 8
  %97 = load i64, i64* %1, align 8
  %98 = add i64 %97, 1
  %99 = mul i64 %98, 3
  %100 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %101 = load i64, i64* %1, align 8
  %102 = getelementptr inbounds %struct.column_info, %struct.column_info* %100, i64 %101
  %103 = getelementptr inbounds %struct.column_info, %struct.column_info* %102, i32 0, i32 1
  store i64 %99, i64* %103, align 8
  store i64 0, i64* %8, align 8
  br label %104

104:                                              ; preds = %116, %92
  %105 = load i64, i64* %8, align 8
  %106 = load i64, i64* %1, align 8
  %107 = icmp ule i64 %105, %106
  br i1 %107, label %108, label %119

108:                                              ; preds = %104
  %109 = load %struct.column_info*, %struct.column_info** @column_info, align 8
  %110 = load i64, i64* %1, align 8
  %111 = getelementptr inbounds %struct.column_info, %struct.column_info* %109, i64 %110
  %112 = getelementptr inbounds %struct.column_info, %struct.column_info* %111, i32 0, i32 2
  %113 = load i64*, i64** %112, align 8
  %114 = load i64, i64* %8, align 8
  %115 = getelementptr inbounds i64, i64* %113, i64 %114
  store i64 3, i64* %115, align 8
  br label %116

116:                                              ; preds = %108
  %117 = load i64, i64* %8, align 8
  %118 = add i64 %117, 1
  store i64 %118, i64* %8, align 8
  br label %104, !llvm.loop !47

119:                                              ; preds = %104
  br label %120

120:                                              ; preds = %119
  %121 = load i64, i64* %1, align 8
  %122 = add i64 %121, 1
  store i64 %122, i64* %1, align 8
  br label %88, !llvm.loop !48

123:                                              ; preds = %88
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @is_directory(%struct.fileinfo* %0) #0 {
  %2 = alloca %struct.fileinfo*, align 8
  store %struct.fileinfo* %0, %struct.fileinfo** %2, align 8
  %3 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %4 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %3, i32 0, i32 4
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 3
  br i1 %6, label %12, label %7

7:                                                ; preds = %1
  %8 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %9 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %8, i32 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 9
  br label %12

12:                                               ; preds = %7, %1
  %13 = phi i1 [ true, %1 ], [ %11, %7 ]
  ret i1 %13
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @basename_is_dot_or_dotdot(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %4 = load i8*, i8** %2, align 8
  %5 = call i8* @last_component(i8* %4) #17
  store i8* %5, i8** %3, align 8
  %6 = load i8*, i8** %3, align 8
  %7 = call zeroext i1 @dot_or_dotdot(i8* %6)
  ret i1 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @free_ent(%struct.fileinfo* %0) #0 {
  %2 = alloca %struct.fileinfo*, align 8
  store %struct.fileinfo* %0, %struct.fileinfo** %2, align 8
  %3 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %4 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %3, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  call void @free(i8* %5) #14
  %6 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %7 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %6, i32 0, i32 1
  %8 = load i8*, i8** %7, align 8
  call void @free(i8* %8) #14
  %9 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %10 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %9, i32 0, i32 2
  %11 = load i8*, i8** %10, align 8
  call void @free(i8* %11) #14
  %12 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %13 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %12, i32 0, i32 6
  %14 = load i8*, i8** %13, align 8
  %15 = icmp ne i8* %14, getelementptr inbounds ([2 x i8], [2 x i8]* @UNKNOWN_SECURITY_CONTEXT, i64 0, i64 0)
  br i1 %15, label %16, label %27

16:                                               ; preds = %1
  %17 = call zeroext i1 @is_smack_enabled()
  br i1 %17, label %18, label %22

18:                                               ; preds = %16
  %19 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %20 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %19, i32 0, i32 6
  %21 = load i8*, i8** %20, align 8
  call void @free(i8* %21) #14
  br label %26

22:                                               ; preds = %16
  %23 = load %struct.fileinfo*, %struct.fileinfo** %2, align 8
  %24 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %23, i32 0, i32 6
  %25 = load i8*, i8** %24, align 8
  call void @freecon(i8* %25)
  br label %26

26:                                               ; preds = %22, %18
  br label %27

27:                                               ; preds = %26, %1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @is_smack_enabled() #0 {
  ret i1 false
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @dot_or_dotdot(i8* %0) #0 {
  %2 = alloca i1, align 1
  %3 = alloca i8*, align 8
  %4 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 0
  %7 = load i8, i8* %6, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp eq i32 %8, 46
  br i1 %9, label %10, label %30

10:                                               ; preds = %1
  %11 = load i8*, i8** %3, align 8
  %12 = load i8*, i8** %3, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  %14 = load i8, i8* %13, align 1
  %15 = sext i8 %14 to i32
  %16 = icmp eq i32 %15, 46
  %17 = zext i1 %16 to i32
  %18 = add nsw i32 %17, 1
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i8, i8* %11, i64 %19
  %21 = load i8, i8* %20, align 1
  store i8 %21, i8* %4, align 1
  %22 = load i8, i8* %4, align 1
  %23 = icmp ne i8 %22, 0
  br i1 %23, label %24, label %28

24:                                               ; preds = %10
  %25 = load i8, i8* %4, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %26, 47
  br label %28

28:                                               ; preds = %24, %10
  %29 = phi i1 [ true, %10 ], [ %27, %24 ]
  store i1 %29, i1* %2, align 1
  br label %31

30:                                               ; preds = %1
  store i1 false, i1* %2, align 1
  br label %31

31:                                               ; preds = %30, %28
  %32 = load i1, i1* %2, align 1
  ret i1 %32
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @initialize_ordering_vector() #0 {
  %1 = alloca i64, align 8
  store i64 0, i64* %1, align 8
  br label %2

2:                                                ; preds = %14, %0
  %3 = load i64, i64* %1, align 8
  %4 = load i64, i64* @cwd_n_used, align 8
  %5 = icmp ult i64 %3, %4
  br i1 %5, label %6, label %17

6:                                                ; preds = %2
  %7 = load %struct.fileinfo*, %struct.fileinfo** @cwd_file, align 8
  %8 = load i64, i64* %1, align 8
  %9 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i64 %8
  %10 = bitcast %struct.fileinfo* %9 to i8*
  %11 = load i8**, i8*** @sorted_file, align 8
  %12 = load i64, i64* %1, align 8
  %13 = getelementptr inbounds i8*, i8** %11, i64 %12
  store i8* %10, i8** %13, align 8
  br label %14

14:                                               ; preds = %6
  %15 = load i64, i64* %1, align 8
  %16 = add i64 %15, 1
  store i64 %16, i64* %1, align 8
  br label %2, !llvm.loop !49

17:                                               ; preds = %2
  ret void
}

; Function Attrs: nounwind returns_twice
declare dso_local i32 @_setjmp(%struct.__jmp_buf_tag*) #8

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_name(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %4, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_name(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @xstrcoll)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_df_name(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %4, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %5, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_name(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @xstrcoll)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_name(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_name(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @xstrcoll)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_df_name(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %5, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %4, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_name(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @xstrcoll)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_name(i8* %0, i8* %1) #9 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %4, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_name(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @strcmp)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_df_name(i8* %0, i8* %1) #9 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %4, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %5, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_name(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @strcmp)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_name(i8* %0, i8* %1) #9 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_name(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @strcmp)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_df_name(i8* %0, i8* %1) #9 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %5, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %4, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_name(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @strcmp)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_extension(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %4, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_extension(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @xstrcoll)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_df_extension(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %4, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %5, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_extension(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @xstrcoll)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_extension(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_extension(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @xstrcoll)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_df_extension(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %5, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %4, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_extension(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @xstrcoll)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_extension(i8* %0, i8* %1) #9 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %4, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_extension(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @strcmp)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_df_extension(i8* %0, i8* %1) #9 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %4, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %5, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_extension(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @strcmp)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_extension(i8* %0, i8* %1) #9 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_extension(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @strcmp)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_df_extension(i8* %0, i8* %1) #9 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %5, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %4, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_extension(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @strcmp)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_size(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %4, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_size(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @xstrcoll)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_df_size(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %4, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %5, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_size(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @xstrcoll)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_size(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_size(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @xstrcoll)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_df_size(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %5, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %4, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_size(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @xstrcoll)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_size(i8* %0, i8* %1) #9 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %4, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_size(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @strcmp)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_df_size(i8* %0, i8* %1) #9 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %4, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %5, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_size(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @strcmp)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_size(i8* %0, i8* %1) #9 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_size(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @strcmp)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_df_size(i8* %0, i8* %1) #9 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %5, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %4, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_size(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @strcmp)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_version(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %4, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_version(%struct.fileinfo* %6, %struct.fileinfo* %8)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_df_version(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %4, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %5, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_version(%struct.fileinfo* %33, %struct.fileinfo* %35)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_version(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_version(%struct.fileinfo* %6, %struct.fileinfo* %8)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_df_version(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %5, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %4, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_version(%struct.fileinfo* %33, %struct.fileinfo* %35)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_mtime(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %4, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_mtime(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @xstrcoll)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_df_mtime(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %4, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %5, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_mtime(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @xstrcoll)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_mtime(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_mtime(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @xstrcoll)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_df_mtime(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %5, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %4, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_mtime(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @xstrcoll)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_mtime(i8* %0, i8* %1) #9 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %4, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_mtime(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @strcmp)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_df_mtime(i8* %0, i8* %1) #9 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %4, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %5, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_mtime(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @strcmp)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_mtime(i8* %0, i8* %1) #9 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_mtime(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @strcmp)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_df_mtime(i8* %0, i8* %1) #9 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %5, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %4, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_mtime(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @strcmp)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_ctime(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %4, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_ctime(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @xstrcoll)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_df_ctime(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %4, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %5, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_ctime(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @xstrcoll)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_ctime(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_ctime(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @xstrcoll)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_df_ctime(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %5, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %4, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_ctime(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @xstrcoll)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_ctime(i8* %0, i8* %1) #9 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %4, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_ctime(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @strcmp)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_df_ctime(i8* %0, i8* %1) #9 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %4, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %5, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_ctime(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @strcmp)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_ctime(i8* %0, i8* %1) #9 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_ctime(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @strcmp)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_df_ctime(i8* %0, i8* %1) #9 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %5, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %4, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_ctime(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @strcmp)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_atime(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %4, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_atime(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @xstrcoll)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll_df_atime(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %4, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %5, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_atime(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @xstrcoll)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_atime(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_atime(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @xstrcoll)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rev_xstrcoll_df_atime(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %5, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %4, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_atime(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @xstrcoll)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_atime(i8* %0, i8* %1) #9 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %4, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_atime(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @strcmp)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @strcmp_df_atime(i8* %0, i8* %1) #9 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %4, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %5, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_atime(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @strcmp)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_atime(i8* %0, i8* %1) #9 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.fileinfo*
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.fileinfo*
  %9 = call i32 @cmp_atime(%struct.fileinfo* %6, %struct.fileinfo* %8, i32 (i8*, i8*)* @strcmp)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @rev_strcmp_df_atime(i8* %0, i8* %1) #9 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  br label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.fileinfo*
  %11 = call zeroext i1 @is_directory(%struct.fileinfo* %10)
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %6, align 1
  %13 = load i8*, i8** %5, align 8
  %14 = bitcast i8* %13 to %struct.fileinfo*
  %15 = call zeroext i1 @is_directory(%struct.fileinfo* %14)
  %16 = zext i1 %15 to i8
  store i8 %16, i8* %7, align 1
  %17 = load i8, i8* %6, align 1
  %18 = trunc i8 %17 to i1
  br i1 %18, label %19, label %23

19:                                               ; preds = %8
  %20 = load i8, i8* %7, align 1
  %21 = trunc i8 %20 to i1
  br i1 %21, label %23, label %22

22:                                               ; preds = %19
  store i32 -1, i32* %3, align 4
  br label %37

23:                                               ; preds = %19, %8
  %24 = load i8, i8* %6, align 1
  %25 = trunc i8 %24 to i1
  br i1 %25, label %30, label %26

26:                                               ; preds = %23
  %27 = load i8, i8* %7, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 1, i32* %3, align 4
  br label %37

30:                                               ; preds = %26, %23
  br label %31

31:                                               ; preds = %30
  %32 = load i8*, i8** %5, align 8
  %33 = bitcast i8* %32 to %struct.fileinfo*
  %34 = load i8*, i8** %4, align 8
  %35 = bitcast i8* %34 to %struct.fileinfo*
  %36 = call i32 @cmp_atime(%struct.fileinfo* %33, %struct.fileinfo* %35, i32 (i8*, i8*)* @strcmp)
  store i32 %36, i32* %3, align 4
  br label %37

37:                                               ; preds = %31, %29, %22
  %38 = load i32, i32* %3, align 4
  ret i32 %38
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cmp_atime(%struct.fileinfo* %0, %struct.fileinfo* %1, i32 (i8*, i8*)* %2) #0 {
  %4 = alloca %struct.fileinfo*, align 8
  %5 = alloca %struct.fileinfo*, align 8
  %6 = alloca i32 (i8*, i8*)*, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.dev_ino, align 8
  %9 = alloca %struct.dev_ino, align 8
  store %struct.fileinfo* %0, %struct.fileinfo** %4, align 8
  store %struct.fileinfo* %1, %struct.fileinfo** %5, align 8
  store i32 (i8*, i8*)* %2, i32 (i8*, i8*)** %6, align 8
  %10 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %11 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %10, i32 0, i32 3
  %12 = call { i64, i64 } @get_stat_atime(%struct.stat* %11) #17
  %13 = bitcast %struct.dev_ino* %8 to { i64, i64 }*
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 0
  %15 = extractvalue { i64, i64 } %12, 0
  store i64 %15, i64* %14, align 8
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 1
  %17 = extractvalue { i64, i64 } %12, 1
  store i64 %17, i64* %16, align 8
  %18 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %19 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %18, i32 0, i32 3
  %20 = call { i64, i64 } @get_stat_atime(%struct.stat* %19) #17
  %21 = bitcast %struct.dev_ino* %9 to { i64, i64 }*
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0
  %23 = extractvalue { i64, i64 } %20, 0
  store i64 %23, i64* %22, align 8
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1
  %25 = extractvalue { i64, i64 } %20, 1
  store i64 %25, i64* %24, align 8
  %26 = bitcast %struct.dev_ino* %8 to { i64, i64 }*
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %struct.dev_ino* %9 to { i64, i64 }*
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = call i32 @timespec_cmp(i64 %28, i64 %30, i64 %33, i64 %35) #17
  store i32 %36, i32* %7, align 4
  %37 = load i32, i32* %7, align 4
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %3
  %40 = load i32, i32* %7, align 4
  br label %50

41:                                               ; preds = %3
  %42 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %6, align 8
  %43 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %44 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %43, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %47 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %46, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = call i32 %42(i8* %45, i8* %48)
  br label %50

50:                                               ; preds = %41, %39
  %51 = phi i32 [ %40, %39 ], [ %49, %41 ]
  ret i32 %51
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrcoll(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %6 = call i32* @__errno_location() #18
  store i32 0, i32* %6, align 4
  %7 = load i8*, i8** %3, align 8
  %8 = load i8*, i8** %4, align 8
  %9 = call i32 @strcoll(i8* %7, i8* %8) #17
  store i32 %9, i32* %5, align 4
  %10 = call i32* @__errno_location() #18
  %11 = load i32, i32* %10, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %21

13:                                               ; preds = %2
  %14 = call i32* @__errno_location() #18
  %15 = load i32, i32* %14, align 4
  %16 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.223, i64 0, i64 0)) #14
  %17 = load i8*, i8** %3, align 8
  %18 = call i8* @quote_n(i32 0, i8* %17)
  %19 = load i8*, i8** %4, align 8
  %20 = call i8* @quote_n(i32 1, i8* %19)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %15, i8* %16, i8* %18, i8* %20)
  call void @set_exit_status(i1 zeroext false)
  call void @longjmp(%struct.__jmp_buf_tag* getelementptr inbounds ([1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* @failed_strcoll, i64 0, i64 0), i32 1) #16
  unreachable

21:                                               ; preds = %2
  %22 = load i32, i32* %5, align 4
  ret i32 %22
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strcoll(i8*, i8*) #4

; Function Attrs: noreturn nounwind
declare dso_local void @longjmp(%struct.__jmp_buf_tag*, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cmp_ctime(%struct.fileinfo* %0, %struct.fileinfo* %1, i32 (i8*, i8*)* %2) #0 {
  %4 = alloca %struct.fileinfo*, align 8
  %5 = alloca %struct.fileinfo*, align 8
  %6 = alloca i32 (i8*, i8*)*, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.dev_ino, align 8
  %9 = alloca %struct.dev_ino, align 8
  store %struct.fileinfo* %0, %struct.fileinfo** %4, align 8
  store %struct.fileinfo* %1, %struct.fileinfo** %5, align 8
  store i32 (i8*, i8*)* %2, i32 (i8*, i8*)** %6, align 8
  %10 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %11 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %10, i32 0, i32 3
  %12 = call { i64, i64 } @get_stat_ctime(%struct.stat* %11) #17
  %13 = bitcast %struct.dev_ino* %8 to { i64, i64 }*
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 0
  %15 = extractvalue { i64, i64 } %12, 0
  store i64 %15, i64* %14, align 8
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 1
  %17 = extractvalue { i64, i64 } %12, 1
  store i64 %17, i64* %16, align 8
  %18 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %19 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %18, i32 0, i32 3
  %20 = call { i64, i64 } @get_stat_ctime(%struct.stat* %19) #17
  %21 = bitcast %struct.dev_ino* %9 to { i64, i64 }*
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0
  %23 = extractvalue { i64, i64 } %20, 0
  store i64 %23, i64* %22, align 8
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1
  %25 = extractvalue { i64, i64 } %20, 1
  store i64 %25, i64* %24, align 8
  %26 = bitcast %struct.dev_ino* %8 to { i64, i64 }*
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %struct.dev_ino* %9 to { i64, i64 }*
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = call i32 @timespec_cmp(i64 %28, i64 %30, i64 %33, i64 %35) #17
  store i32 %36, i32* %7, align 4
  %37 = load i32, i32* %7, align 4
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %3
  %40 = load i32, i32* %7, align 4
  br label %50

41:                                               ; preds = %3
  %42 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %6, align 8
  %43 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %44 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %43, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %47 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %46, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = call i32 %42(i8* %45, i8* %48)
  br label %50

50:                                               ; preds = %41, %39
  %51 = phi i32 [ %40, %39 ], [ %49, %41 ]
  ret i32 %51
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cmp_mtime(%struct.fileinfo* %0, %struct.fileinfo* %1, i32 (i8*, i8*)* %2) #0 {
  %4 = alloca %struct.fileinfo*, align 8
  %5 = alloca %struct.fileinfo*, align 8
  %6 = alloca i32 (i8*, i8*)*, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.dev_ino, align 8
  %9 = alloca %struct.dev_ino, align 8
  store %struct.fileinfo* %0, %struct.fileinfo** %4, align 8
  store %struct.fileinfo* %1, %struct.fileinfo** %5, align 8
  store i32 (i8*, i8*)* %2, i32 (i8*, i8*)** %6, align 8
  %10 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %11 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %10, i32 0, i32 3
  %12 = call { i64, i64 } @get_stat_mtime(%struct.stat* %11) #17
  %13 = bitcast %struct.dev_ino* %8 to { i64, i64 }*
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 0
  %15 = extractvalue { i64, i64 } %12, 0
  store i64 %15, i64* %14, align 8
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 1
  %17 = extractvalue { i64, i64 } %12, 1
  store i64 %17, i64* %16, align 8
  %18 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %19 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %18, i32 0, i32 3
  %20 = call { i64, i64 } @get_stat_mtime(%struct.stat* %19) #17
  %21 = bitcast %struct.dev_ino* %9 to { i64, i64 }*
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 0
  %23 = extractvalue { i64, i64 } %20, 0
  store i64 %23, i64* %22, align 8
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %21, i32 0, i32 1
  %25 = extractvalue { i64, i64 } %20, 1
  store i64 %25, i64* %24, align 8
  %26 = bitcast %struct.dev_ino* %8 to { i64, i64 }*
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = bitcast %struct.dev_ino* %9 to { i64, i64 }*
  %32 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %31, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = call i32 @timespec_cmp(i64 %28, i64 %30, i64 %33, i64 %35) #17
  store i32 %36, i32* %7, align 4
  %37 = load i32, i32* %7, align 4
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %3
  %40 = load i32, i32* %7, align 4
  br label %50

41:                                               ; preds = %3
  %42 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %6, align 8
  %43 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %44 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %43, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %47 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %46, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = call i32 %42(i8* %45, i8* %48)
  br label %50

50:                                               ; preds = %41, %39
  %51 = phi i32 [ %40, %39 ], [ %49, %41 ]
  ret i32 %51
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cmp_version(%struct.fileinfo* %0, %struct.fileinfo* %1) #0 {
  %3 = alloca %struct.fileinfo*, align 8
  %4 = alloca %struct.fileinfo*, align 8
  store %struct.fileinfo* %0, %struct.fileinfo** %3, align 8
  store %struct.fileinfo* %1, %struct.fileinfo** %4, align 8
  %5 = load %struct.fileinfo*, %struct.fileinfo** %3, align 8
  %6 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %5, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %9 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %8, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = call i32 @filevercmp(i8* %7, i8* %10) #17
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cmp_size(%struct.fileinfo* %0, %struct.fileinfo* %1, i32 (i8*, i8*)* %2) #0 {
  %4 = alloca %struct.fileinfo*, align 8
  %5 = alloca %struct.fileinfo*, align 8
  %6 = alloca i32 (i8*, i8*)*, align 8
  %7 = alloca i32, align 4
  store %struct.fileinfo* %0, %struct.fileinfo** %4, align 8
  store %struct.fileinfo* %1, %struct.fileinfo** %5, align 8
  store i32 (i8*, i8*)* %2, i32 (i8*, i8*)** %6, align 8
  %8 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %9 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %8, i32 0, i32 3
  %10 = getelementptr inbounds %struct.stat, %struct.stat* %9, i32 0, i32 8
  %11 = load i64, i64* %10, align 8
  %12 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %13 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %12, i32 0, i32 3
  %14 = getelementptr inbounds %struct.stat, %struct.stat* %13, i32 0, i32 8
  %15 = load i64, i64* %14, align 8
  %16 = icmp slt i64 %11, %15
  br i1 %16, label %17, label %18

17:                                               ; preds = %3
  br label %29

18:                                               ; preds = %3
  %19 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %20 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %19, i32 0, i32 3
  %21 = getelementptr inbounds %struct.stat, %struct.stat* %20, i32 0, i32 8
  %22 = load i64, i64* %21, align 8
  %23 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %24 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %23, i32 0, i32 3
  %25 = getelementptr inbounds %struct.stat, %struct.stat* %24, i32 0, i32 8
  %26 = load i64, i64* %25, align 8
  %27 = icmp sgt i64 %22, %26
  %28 = zext i1 %27 to i32
  br label %29

29:                                               ; preds = %18, %17
  %30 = phi i32 [ -1, %17 ], [ %28, %18 ]
  store i32 %30, i32* %7, align 4
  %31 = load i32, i32* %7, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %29
  %34 = load i32, i32* %7, align 4
  br label %44

35:                                               ; preds = %29
  %36 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %6, align 8
  %37 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %38 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %37, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %41 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %40, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 %36(i8* %39, i8* %42)
  br label %44

44:                                               ; preds = %35, %33
  %45 = phi i32 [ %34, %33 ], [ %43, %35 ]
  ret i32 %45
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cmp_extension(%struct.fileinfo* %0, %struct.fileinfo* %1, i32 (i8*, i8*)* %2) #0 {
  %4 = alloca %struct.fileinfo*, align 8
  %5 = alloca %struct.fileinfo*, align 8
  %6 = alloca i32 (i8*, i8*)*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  store %struct.fileinfo* %0, %struct.fileinfo** %4, align 8
  store %struct.fileinfo* %1, %struct.fileinfo** %5, align 8
  store i32 (i8*, i8*)* %2, i32 (i8*, i8*)** %6, align 8
  %10 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %11 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %10, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = call i8* @strrchr(i8* %12, i32 46) #17
  store i8* %13, i8** %7, align 8
  %14 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %15 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %14, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = call i8* @strrchr(i8* %16, i32 46) #17
  store i8* %17, i8** %8, align 8
  %18 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %6, align 8
  %19 = load i8*, i8** %7, align 8
  %20 = icmp ne i8* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %3
  %22 = load i8*, i8** %7, align 8
  br label %24

23:                                               ; preds = %3
  br label %24

24:                                               ; preds = %23, %21
  %25 = phi i8* [ %22, %21 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), %23 ]
  %26 = load i8*, i8** %8, align 8
  %27 = icmp ne i8* %26, null
  br i1 %27, label %28, label %30

28:                                               ; preds = %24
  %29 = load i8*, i8** %8, align 8
  br label %31

30:                                               ; preds = %24
  br label %31

31:                                               ; preds = %30, %28
  %32 = phi i8* [ %29, %28 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), %30 ]
  %33 = call i32 %18(i8* %25, i8* %32)
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %31
  %37 = load i32, i32* %9, align 4
  br label %47

38:                                               ; preds = %31
  %39 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %6, align 8
  %40 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %41 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %40, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %44 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %43, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = call i32 %39(i8* %42, i8* %45)
  br label %47

47:                                               ; preds = %38, %36
  %48 = phi i32 [ %37, %36 ], [ %46, %38 ]
  ret i32 %48
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @cmp_name(%struct.fileinfo* %0, %struct.fileinfo* %1, i32 (i8*, i8*)* %2) #0 {
  %4 = alloca %struct.fileinfo*, align 8
  %5 = alloca %struct.fileinfo*, align 8
  %6 = alloca i32 (i8*, i8*)*, align 8
  store %struct.fileinfo* %0, %struct.fileinfo** %4, align 8
  store %struct.fileinfo* %1, %struct.fileinfo** %5, align 8
  store i32 (i8*, i8*)* %2, i32 (i8*, i8*)** %6, align 8
  %7 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %6, align 8
  %8 = load %struct.fileinfo*, %struct.fileinfo** %4, align 8
  %9 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %8, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %12 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %11, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = call i32 %7(i8* %10, i8* %13)
  ret i32 %14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @needs_quoting(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca [2 x i8], align 1
  %4 = alloca i64, align 8
  store i8* %0, i8** %2, align 8
  %5 = getelementptr inbounds [2 x i8], [2 x i8]* %3, i64 0, i64 0
  %6 = load i8*, i8** %2, align 8
  %7 = load %struct.quoting_options*, %struct.quoting_options** @filename_quoting_options, align 8
  %8 = call i64 @quotearg_buffer(i8* %5, i64 2, i8* %6, i64 -1, %struct.quoting_options* %7)
  store i64 %8, i64* %4, align 8
  %9 = load i8*, i8** %2, align 8
  %10 = load i8, i8* %9, align 1
  %11 = sext i8 %10 to i32
  %12 = getelementptr inbounds [2 x i8], [2 x i8]* %3, i64 0, i64 0
  %13 = load i8, i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = icmp ne i32 %11, %14
  br i1 %15, label %21, label %16

16:                                               ; preds = %1
  %17 = load i8*, i8** %2, align 8
  %18 = call i64 @strlen(i8* %17) #17
  %19 = load i64, i64* %4, align 8
  %20 = icmp ne i64 %18, %19
  br label %21

21:                                               ; preds = %16, %1
  %22 = phi i1 [ true, %1 ], [ %20, %16 ]
  ret i1 %22
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @attach(i8* %0, i8* %1, i8* %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i8* %2, i8** %6, align 8
  %8 = load i8*, i8** %5, align 8
  store i8* %8, i8** %7, align 8
  %9 = load i8*, i8** %5, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 0
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = icmp ne i32 %12, 46
  br i1 %13, label %20, label %14

14:                                               ; preds = %3
  %15 = load i8*, i8** %5, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = sext i8 %17 to i32
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %45

20:                                               ; preds = %14, %3
  br label %21

21:                                               ; preds = %25, %20
  %22 = load i8*, i8** %7, align 8
  %23 = load i8, i8* %22, align 1
  %24 = icmp ne i8 %23, 0
  br i1 %24, label %25, label %31

25:                                               ; preds = %21
  %26 = load i8*, i8** %7, align 8
  %27 = getelementptr inbounds i8, i8* %26, i32 1
  store i8* %27, i8** %7, align 8
  %28 = load i8, i8* %26, align 1
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %30, i8** %4, align 8
  store i8 %28, i8* %29, align 1
  br label %21, !llvm.loop !50

31:                                               ; preds = %21
  %32 = load i8*, i8** %7, align 8
  %33 = load i8*, i8** %5, align 8
  %34 = icmp ugt i8* %32, %33
  br i1 %34, label %35, label %44

35:                                               ; preds = %31
  %36 = load i8*, i8** %7, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 -1
  %38 = load i8, i8* %37, align 1
  %39 = sext i8 %38 to i32
  %40 = icmp ne i32 %39, 47
  br i1 %40, label %41, label %44

41:                                               ; preds = %35
  %42 = load i8*, i8** %4, align 8
  %43 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %43, i8** %4, align 8
  store i8 47, i8* %42, align 1
  br label %44

44:                                               ; preds = %41, %35, %31
  br label %45

45:                                               ; preds = %44, %14
  br label %46

46:                                               ; preds = %50, %45
  %47 = load i8*, i8** %6, align 8
  %48 = load i8, i8* %47, align 1
  %49 = icmp ne i8 %48, 0
  br i1 %49, label %50, label %56

50:                                               ; preds = %46
  %51 = load i8*, i8** %6, align 8
  %52 = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %52, i8** %6, align 8
  %53 = load i8, i8* %51, align 1
  %54 = load i8*, i8** %4, align 8
  %55 = getelementptr inbounds i8, i8* %54, i32 1
  store i8* %55, i8** %4, align 8
  store i8 %53, i8* %54, align 1
  br label %46, !llvm.loop !51

56:                                               ; preds = %46
  %57 = load i8*, i8** %4, align 8
  store i8 0, i8* %57, align 1
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @lstat(i8*, %struct.stat*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @has_capability_cache(i8* %0, %struct.fileinfo* %1) #0 {
  %3 = alloca i1, align 1
  %4 = alloca i8*, align 8
  %5 = alloca %struct.fileinfo*, align 8
  %6 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store %struct.fileinfo* %1, %struct.fileinfo** %5, align 8
  %7 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %8 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 3
  %9 = getelementptr inbounds %struct.stat, %struct.stat* %8, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = load i64, i64* @has_capability_cache.unsupported_device, align 8
  %12 = icmp eq i64 %10, %11
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = call i32* @__errno_location() #18
  store i32 95, i32* %14, align 4
  store i1 false, i1* %3, align 1
  br label %33

15:                                               ; preds = %2
  %16 = load i8*, i8** %4, align 8
  %17 = call zeroext i1 @has_capability(i8* %16)
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %6, align 1
  %19 = load i8, i8* %6, align 1
  %20 = trunc i8 %19 to i1
  br i1 %20, label %30, label %21

21:                                               ; preds = %15
  %22 = call i32* @__errno_location() #18
  %23 = load i32, i32* %22, align 4
  %24 = call zeroext i1 @errno_unsupported(i32 %23)
  br i1 %24, label %25, label %30

25:                                               ; preds = %21
  %26 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %27 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %26, i32 0, i32 3
  %28 = getelementptr inbounds %struct.stat, %struct.stat* %27, i32 0, i32 0
  %29 = load i64, i64* %28, align 8
  store i64 %29, i64* @has_capability_cache.unsupported_device, align 8
  br label %30

30:                                               ; preds = %25, %21, %15
  %31 = load i8, i8* %6, align 1
  %32 = trunc i8 %31 to i1
  store i1 %32, i1* %3, align 1
  br label %33

33:                                               ; preds = %30, %13
  %34 = load i1, i1* %3, align 1
  ret i1 %34
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @getfilecon_cache(i8* %0, %struct.fileinfo* %1, i1 zeroext %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca %struct.fileinfo*, align 8
  %7 = alloca i8, align 1
  %8 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store %struct.fileinfo* %1, %struct.fileinfo** %6, align 8
  %9 = zext i1 %2 to i8
  store i8 %9, i8* %7, align 1
  %10 = load %struct.fileinfo*, %struct.fileinfo** %6, align 8
  %11 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %10, i32 0, i32 3
  %12 = getelementptr inbounds %struct.stat, %struct.stat* %11, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* @getfilecon_cache.unsupported_device, align 8
  %15 = icmp eq i64 %13, %14
  br i1 %15, label %16, label %18

16:                                               ; preds = %3
  %17 = call i32* @__errno_location() #18
  store i32 95, i32* %17, align 4
  store i32 -1, i32* %4, align 4
  br label %46

18:                                               ; preds = %3
  store i32 0, i32* %8, align 4
  %19 = load i8, i8* %7, align 1
  %20 = trunc i8 %19 to i1
  br i1 %20, label %21, label %26

21:                                               ; preds = %18
  %22 = load i8*, i8** %5, align 8
  %23 = load %struct.fileinfo*, %struct.fileinfo** %6, align 8
  %24 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %23, i32 0, i32 6
  %25 = call i32 @getfilecon(i8* %22, i8** %24)
  br label %31

26:                                               ; preds = %18
  %27 = load i8*, i8** %5, align 8
  %28 = load %struct.fileinfo*, %struct.fileinfo** %6, align 8
  %29 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %28, i32 0, i32 6
  %30 = call i32 @lgetfilecon(i8* %27, i8** %29)
  br label %31

31:                                               ; preds = %26, %21
  %32 = phi i32 [ %25, %21 ], [ %30, %26 ]
  store i32 %32, i32* %8, align 4
  %33 = load i32, i32* %8, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %35, label %44

35:                                               ; preds = %31
  %36 = call i32* @__errno_location() #18
  %37 = load i32, i32* %36, align 4
  %38 = call zeroext i1 @errno_unsupported(i32 %37)
  br i1 %38, label %39, label %44

39:                                               ; preds = %35
  %40 = load %struct.fileinfo*, %struct.fileinfo** %6, align 8
  %41 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %40, i32 0, i32 3
  %42 = getelementptr inbounds %struct.stat, %struct.stat* %41, i32 0, i32 0
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* @getfilecon_cache.unsupported_device, align 8
  br label %44

44:                                               ; preds = %39, %35, %31
  %45 = load i32, i32* %8, align 4
  store i32 %45, i32* %4, align 4
  br label %46

46:                                               ; preds = %44, %16
  %47 = load i32, i32* %4, align 4
  ret i32 %47
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @is_ENOTSUP(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 95
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  br label %6

6:                                                ; preds = %5, %1
  %7 = phi i1 [ true, %1 ], [ false, %5 ]
  ret i1 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @file_has_acl_cache(i8* %0, %struct.fileinfo* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca %struct.fileinfo*, align 8
  %6 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store %struct.fileinfo* %1, %struct.fileinfo** %5, align 8
  %7 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %8 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %7, i32 0, i32 3
  %9 = getelementptr inbounds %struct.stat, %struct.stat* %8, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = load i64, i64* @file_has_acl_cache.unsupported_device, align 8
  %12 = icmp eq i64 %10, %11
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = call i32* @__errno_location() #18
  store i32 95, i32* %14, align 4
  store i32 0, i32* %3, align 4
  br label %34

15:                                               ; preds = %2
  %16 = call i32* @__errno_location() #18
  store i32 0, i32* %16, align 4
  %17 = load i8*, i8** %4, align 8
  %18 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %19 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %18, i32 0, i32 3
  %20 = call i32 @file_has_acl(i8* %17, %struct.stat* %19)
  store i32 %20, i32* %6, align 4
  %21 = load i32, i32* %6, align 4
  %22 = icmp sle i32 %21, 0
  br i1 %22, label %23, label %32

23:                                               ; preds = %15
  %24 = call i32* @__errno_location() #18
  %25 = load i32, i32* %24, align 4
  %26 = call zeroext i1 @errno_unsupported(i32 %25)
  br i1 %26, label %27, label %32

27:                                               ; preds = %23
  %28 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %29 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %28, i32 0, i32 3
  %30 = getelementptr inbounds %struct.stat, %struct.stat* %29, i32 0, i32 0
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* @file_has_acl_cache.unsupported_device, align 8
  br label %32

32:                                               ; preds = %27, %23, %15
  %33 = load i32, i32* %6, align 4
  store i32 %33, i32* %3, align 4
  br label %34

34:                                               ; preds = %32, %13
  %35 = load i32, i32* %3, align 4
  ret i32 %35
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @get_link_name(i8* %0, %struct.fileinfo* %1, i1 zeroext %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca %struct.fileinfo*, align 8
  %6 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store %struct.fileinfo* %1, %struct.fileinfo** %5, align 8
  %7 = zext i1 %2 to i8
  store i8 %7, i8* %6, align 1
  %8 = load i8*, i8** %4, align 8
  %9 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %10 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %9, i32 0, i32 3
  %11 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 8
  %12 = load i64, i64* %11, align 8
  %13 = call i8* @areadlink_with_size(i8* %8, i64 %12)
  %14 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %15 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %14, i32 0, i32 1
  store i8* %13, i8** %15, align 8
  %16 = load %struct.fileinfo*, %struct.fileinfo** %5, align 8
  %17 = getelementptr inbounds %struct.fileinfo, %struct.fileinfo* %16, i32 0, i32 1
  %18 = load i8*, i8** %17, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %20, label %25

20:                                               ; preds = %3
  %21 = load i8, i8* %6, align 1
  %22 = trunc i8 %21 to i1
  %23 = call i8* @gettext(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.220, i64 0, i64 0)) #14
  %24 = load i8*, i8** %4, align 8
  call void @file_failure(i1 zeroext %22, i8* %23, i8* %24)
  br label %25

25:                                               ; preds = %20, %3
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @make_link_name(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  %8 = load i8*, i8** %5, align 8
  %9 = icmp ne i8* %8, null
  br i1 %9, label %11, label %10

10:                                               ; preds = %2
  store i8* null, i8** %3, align 8
  br label %54

11:                                               ; preds = %2
  %12 = load i8*, i8** %5, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 0
  %14 = load i8, i8* %13, align 1
  %15 = sext i8 %14 to i32
  %16 = icmp eq i32 %15, 47
  br i1 %16, label %17, label %20

17:                                               ; preds = %11
  %18 = load i8*, i8** %5, align 8
  %19 = call noalias i8* @xstrdup(i8* %18)
  store i8* %19, i8** %3, align 8
  br label %54

20:                                               ; preds = %11
  %21 = load i8*, i8** %4, align 8
  %22 = call i64 @dir_len(i8* %21) #17
  store i64 %22, i64* %6, align 8
  %23 = load i64, i64* %6, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %20
  %26 = load i8*, i8** %5, align 8
  %27 = call noalias i8* @xstrdup(i8* %26)
  store i8* %27, i8** %3, align 8
  br label %54

28:                                               ; preds = %20
  %29 = load i64, i64* %6, align 8
  %30 = add i64 %29, 1
  %31 = load i8*, i8** %5, align 8
  %32 = call i64 @strlen(i8* %31) #17
  %33 = add i64 %30, %32
  %34 = add i64 %33, 1
  %35 = call noalias i8* @xmalloc(i64 %34)
  store i8* %35, i8** %7, align 8
  %36 = load i8*, i8** %4, align 8
  %37 = load i64, i64* %6, align 8
  %38 = sub i64 %37, 1
  %39 = getelementptr inbounds i8, i8* %36, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = icmp eq i32 %41, 47
  br i1 %42, label %46, label %43

43:                                               ; preds = %28
  %44 = load i64, i64* %6, align 8
  %45 = add i64 %44, 1
  store i64 %45, i64* %6, align 8
  br label %46

46:                                               ; preds = %43, %28
  %47 = load i8*, i8** %7, align 8
  %48 = load i8*, i8** %4, align 8
  %49 = load i64, i64* %6, align 8
  %50 = call i8* @stpncpy(i8* %47, i8* %48, i64 %49) #14
  %51 = load i8*, i8** %5, align 8
  %52 = call i8* @stpcpy(i8* %50, i8* %51) #14
  %53 = load i8*, i8** %7, align 8
  store i8* %53, i8** %3, align 8
  br label %54

54:                                               ; preds = %46, %25, %17, %10
  %55 = load i8*, i8** %3, align 8
  ret i8* %55
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @format_user_width(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i8, i8* @numeric_ids, align 1
  %4 = trunc i8 %3 to i1
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  br label %9

6:                                                ; preds = %1
  %7 = load i32, i32* %2, align 4
  %8 = call i8* @getuser(i32 %7)
  br label %9

9:                                                ; preds = %6, %5
  %10 = phi i8* [ null, %5 ], [ %8, %6 ]
  %11 = load i32, i32* %2, align 4
  %12 = zext i32 %11 to i64
  %13 = call i32 @format_user_or_group_width(i8* %10, i64 %12)
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @format_group_width(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i8, i8* @numeric_ids, align 1
  %4 = trunc i8 %3 to i1
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  br label %9

6:                                                ; preds = %1
  %7 = load i32, i32* %2, align 4
  %8 = call i8* @getgroup(i32 %7)
  br label %9

9:                                                ; preds = %6, %5
  %10 = phi i8* [ null, %5 ], [ %8, %6 ]
  %11 = load i32, i32* %2, align 4
  %12 = zext i32 %11 to i64
  %13 = call i32 @format_user_or_group_width(i8* %10, i64 %12)
  ret i32 %13
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @format_user_or_group_width(i8* %0, i64 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca [21 x i8], align 16
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  %8 = load i8*, i8** %4, align 8
  %9 = icmp ne i8* %8, null
  br i1 %9, label %10, label %20

10:                                               ; preds = %2
  %11 = load i8*, i8** %4, align 8
  %12 = call i32 @gnu_mbswidth(i8* %11, i32 0)
  store i32 %12, i32* %6, align 4
  %13 = load i32, i32* %6, align 4
  %14 = icmp sgt i32 0, %13
  br i1 %14, label %15, label %16

15:                                               ; preds = %10
  br label %18

16:                                               ; preds = %10
  %17 = load i32, i32* %6, align 4
  br label %18

18:                                               ; preds = %16, %15
  %19 = phi i32 [ 0, %15 ], [ %17, %16 ]
  store i32 %19, i32* %3, align 4
  br label %27

20:                                               ; preds = %2
  %21 = getelementptr inbounds [21 x i8], [21 x i8]* %7, i64 0, i64 0
  %22 = load i64, i64* %5, align 8
  %23 = call i32 (i8*, i8*, ...) @sprintf(i8* %21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.221, i64 0, i64 0), i64 %22) #14
  %24 = getelementptr inbounds [21 x i8], [21 x i8]* %7, i64 0, i64 0
  %25 = call i64 @strlen(i8* %24) #17
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %3, align 4
  br label %27

27:                                               ; preds = %20, %18
  %28 = load i32, i32* %3, align 4
  ret i32 %28
}

; Function Attrs: nounwind
declare dso_local i8* @stpncpy(i8*, i8*, i64) #1

; Function Attrs: nounwind
declare dso_local i8* @stpcpy(i8*, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @errno_unsupported(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 22
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = load i32, i32* %2, align 4
  %7 = icmp eq i32 %6, 38
  br i1 %7, label %11, label %8

8:                                                ; preds = %5
  %9 = load i32, i32* %2, align 4
  %10 = call zeroext i1 @is_ENOTSUP(i32 %9)
  br label %11

11:                                               ; preds = %8, %5, %1
  %12 = phi i1 [ true, %5 ], [ true, %1 ], [ %10, %8 ]
  ret i1 %12
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @has_capability(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = call i32* @__errno_location() #18
  store i32 95, i32* %3, align 4
  ret i1 false
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @known_term_type() #0 {
  %1 = alloca i1, align 1
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.178, i64 0, i64 0)) #14
  store i8* %4, i8** %2, align 8
  %5 = load i8*, i8** %2, align 8
  %6 = icmp ne i8* %5, null
  br i1 %6, label %7, label %11

7:                                                ; preds = %0
  %8 = load i8*, i8** %2, align 8
  %9 = load i8, i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %7, %0
  store i1 false, i1* %1, align 1
  br label %37

12:                                               ; preds = %7
  store i8* getelementptr inbounds ([4164 x i8], [4164 x i8]* @G_line, i64 0, i64 0), i8** %3, align 8
  br label %13

13:                                               ; preds = %30, %12
  %14 = load i8*, i8** %3, align 8
  %15 = ptrtoint i8* %14 to i64
  %16 = sub i64 %15, ptrtoint ([4164 x i8]* @G_line to i64)
  %17 = icmp ult i64 %16, 4164
  br i1 %17, label %18, label %36

18:                                               ; preds = %13
  %19 = load i8*, i8** %3, align 8
  %20 = call i32 @strncmp(i8* %19, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.179, i64 0, i64 0), i64 5) #17
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %30

22:                                               ; preds = %18
  %23 = load i8*, i8** %3, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 5
  %25 = load i8*, i8** %2, align 8
  %26 = call i32 @fnmatch(i8* %24, i8* %25, i32 0)
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %22
  store i1 true, i1* %1, align 1
  br label %37

29:                                               ; preds = %22
  br label %30

30:                                               ; preds = %29, %18
  %31 = load i8*, i8** %3, align 8
  %32 = call i64 @strlen(i8* %31) #17
  %33 = add i64 %32, 1
  %34 = load i8*, i8** %3, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 %33
  store i8* %35, i8** %3, align 8
  br label %13, !llvm.loop !52

36:                                               ; preds = %13
  store i1 false, i1* %1, align 1
  br label %37

37:                                               ; preds = %36, %28, %11
  %38 = load i1, i1* %1, align 1
  ret i1 %38
}

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @get_funky_string(i8** %0, i8** %1, i1 zeroext %2, i64* %3) #0 {
  %5 = alloca i8**, align 8
  %6 = alloca i8**, align 8
  %7 = alloca i8, align 1
  %8 = alloca i64*, align 8
  %9 = alloca i8, align 1
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  store i8** %0, i8*** %5, align 8
  store i8** %1, i8*** %6, align 8
  %14 = zext i1 %2 to i8
  store i8 %14, i8* %7, align 1
  store i64* %3, i64** %8, align 8
  %15 = load i8**, i8*** %6, align 8
  %16 = load i8*, i8** %15, align 8
  store i8* %16, i8** %12, align 8
  %17 = load i8**, i8*** %5, align 8
  %18 = load i8*, i8** %17, align 8
  store i8* %18, i8** %13, align 8
  store i64 0, i64* %10, align 8
  store i8 0, i8* %9, align 1
  store i32 0, i32* %11, align 4
  br label %19

19:                                               ; preds = %195, %4
  %20 = load i32, i32* %11, align 4
  %21 = icmp ult i32 %20, 5
  br i1 %21, label %22, label %196

22:                                               ; preds = %19
  %23 = load i32, i32* %11, align 4
  switch i32 %23, label %194 [
    i32 0, label %24
    i32 1, label %49
    i32 2, label %86
    i32 3, label %114
    i32 4, label %160
  ]

24:                                               ; preds = %22
  %25 = load i8*, i8** %12, align 8
  %26 = load i8, i8* %25, align 1
  %27 = sext i8 %26 to i32
  switch i32 %27, label %40 [
    i32 58, label %28
    i32 0, label %28
    i32 92, label %29
    i32 94, label %32
    i32 61, label %35
  ]

28:                                               ; preds = %24, %24
  store i32 5, i32* %11, align 4
  br label %48

29:                                               ; preds = %24
  store i32 1, i32* %11, align 4
  %30 = load i8*, i8** %12, align 8
  %31 = getelementptr inbounds i8, i8* %30, i32 1
  store i8* %31, i8** %12, align 8
  br label %48

32:                                               ; preds = %24
  store i32 4, i32* %11, align 4
  %33 = load i8*, i8** %12, align 8
  %34 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %34, i8** %12, align 8
  br label %48

35:                                               ; preds = %24
  %36 = load i8, i8* %7, align 1
  %37 = trunc i8 %36 to i1
  br i1 %37, label %38, label %39

38:                                               ; preds = %35
  store i32 5, i32* %11, align 4
  br label %48

39:                                               ; preds = %35
  br label %40

40:                                               ; preds = %39, %24
  %41 = load i8*, i8** %12, align 8
  %42 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %42, i8** %12, align 8
  %43 = load i8, i8* %41, align 1
  %44 = load i8*, i8** %13, align 8
  %45 = getelementptr inbounds i8, i8* %44, i32 1
  store i8* %45, i8** %13, align 8
  store i8 %43, i8* %44, align 1
  %46 = load i64, i64* %10, align 8
  %47 = add i64 %46, 1
  store i64 %47, i64* %10, align 8
  br label %48

48:                                               ; preds = %40, %38, %32, %29, %28
  br label %195

49:                                               ; preds = %22
  %50 = load i8*, i8** %12, align 8
  %51 = load i8, i8* %50, align 1
  %52 = sext i8 %51 to i32
  switch i32 %52, label %71 [
    i32 48, label %53
    i32 49, label %53
    i32 50, label %53
    i32 51, label %53
    i32 52, label %53
    i32 53, label %53
    i32 54, label %53
    i32 55, label %53
    i32 120, label %59
    i32 88, label %59
    i32 97, label %60
    i32 98, label %61
    i32 101, label %62
    i32 102, label %63
    i32 110, label %64
    i32 114, label %65
    i32 116, label %66
    i32 118, label %67
    i32 63, label %68
    i32 95, label %69
    i32 0, label %70
  ]

53:                                               ; preds = %49, %49, %49, %49, %49, %49, %49, %49
  store i32 2, i32* %11, align 4
  %54 = load i8*, i8** %12, align 8
  %55 = load i8, i8* %54, align 1
  %56 = sext i8 %55 to i32
  %57 = sub nsw i32 %56, 48
  %58 = trunc i32 %57 to i8
  store i8 %58, i8* %9, align 1
  br label %74

59:                                               ; preds = %49, %49
  store i32 3, i32* %11, align 4
  store i8 0, i8* %9, align 1
  br label %74

60:                                               ; preds = %49
  store i8 7, i8* %9, align 1
  br label %74

61:                                               ; preds = %49
  store i8 8, i8* %9, align 1
  br label %74

62:                                               ; preds = %49
  store i8 27, i8* %9, align 1
  br label %74

63:                                               ; preds = %49
  store i8 12, i8* %9, align 1
  br label %74

64:                                               ; preds = %49
  store i8 10, i8* %9, align 1
  br label %74

65:                                               ; preds = %49
  store i8 13, i8* %9, align 1
  br label %74

66:                                               ; preds = %49
  store i8 9, i8* %9, align 1
  br label %74

67:                                               ; preds = %49
  store i8 11, i8* %9, align 1
  br label %74

68:                                               ; preds = %49
  store i8 127, i8* %9, align 1
  br label %74

69:                                               ; preds = %49
  store i8 32, i8* %9, align 1
  br label %74

70:                                               ; preds = %49
  store i32 6, i32* %11, align 4
  br label %74

71:                                               ; preds = %49
  %72 = load i8*, i8** %12, align 8
  %73 = load i8, i8* %72, align 1
  store i8 %73, i8* %9, align 1
  br label %74

74:                                               ; preds = %71, %70, %69, %68, %67, %66, %65, %64, %63, %62, %61, %60, %59, %53
  %75 = load i32, i32* %11, align 4
  %76 = icmp eq i32 %75, 1
  br i1 %76, label %77, label %83

77:                                               ; preds = %74
  %78 = load i8, i8* %9, align 1
  %79 = load i8*, i8** %13, align 8
  %80 = getelementptr inbounds i8, i8* %79, i32 1
  store i8* %80, i8** %13, align 8
  store i8 %78, i8* %79, align 1
  %81 = load i64, i64* %10, align 8
  %82 = add i64 %81, 1
  store i64 %82, i64* %10, align 8
  store i32 0, i32* %11, align 4
  br label %83

83:                                               ; preds = %77, %74
  %84 = load i8*, i8** %12, align 8
  %85 = getelementptr inbounds i8, i8* %84, i32 1
  store i8* %85, i8** %12, align 8
  br label %195

86:                                               ; preds = %22
  %87 = load i8*, i8** %12, align 8
  %88 = load i8, i8* %87, align 1
  %89 = sext i8 %88 to i32
  %90 = icmp slt i32 %89, 48
  br i1 %90, label %96, label %91

91:                                               ; preds = %86
  %92 = load i8*, i8** %12, align 8
  %93 = load i8, i8* %92, align 1
  %94 = sext i8 %93 to i32
  %95 = icmp sgt i32 %94, 55
  br i1 %95, label %96, label %102

96:                                               ; preds = %91, %86
  %97 = load i8, i8* %9, align 1
  %98 = load i8*, i8** %13, align 8
  %99 = getelementptr inbounds i8, i8* %98, i32 1
  store i8* %99, i8** %13, align 8
  store i8 %97, i8* %98, align 1
  %100 = load i64, i64* %10, align 8
  %101 = add i64 %100, 1
  store i64 %101, i64* %10, align 8
  store i32 0, i32* %11, align 4
  br label %113

102:                                              ; preds = %91
  %103 = load i8, i8* %9, align 1
  %104 = sext i8 %103 to i32
  %105 = shl i32 %104, 3
  %106 = load i8*, i8** %12, align 8
  %107 = getelementptr inbounds i8, i8* %106, i32 1
  store i8* %107, i8** %12, align 8
  %108 = load i8, i8* %106, align 1
  %109 = sext i8 %108 to i32
  %110 = sub nsw i32 %109, 48
  %111 = add nsw i32 %105, %110
  %112 = trunc i32 %111 to i8
  store i8 %112, i8* %9, align 1
  br label %113

113:                                              ; preds = %102, %96
  br label %195

114:                                              ; preds = %22
  %115 = load i8*, i8** %12, align 8
  %116 = load i8, i8* %115, align 1
  %117 = sext i8 %116 to i32
  switch i32 %117, label %153 [
    i32 48, label %118
    i32 49, label %118
    i32 50, label %118
    i32 51, label %118
    i32 52, label %118
    i32 53, label %118
    i32 54, label %118
    i32 55, label %118
    i32 56, label %118
    i32 57, label %118
    i32 97, label %129
    i32 98, label %129
    i32 99, label %129
    i32 100, label %129
    i32 101, label %129
    i32 102, label %129
    i32 65, label %141
    i32 66, label %141
    i32 67, label %141
    i32 68, label %141
    i32 69, label %141
    i32 70, label %141
  ]

118:                                              ; preds = %114, %114, %114, %114, %114, %114, %114, %114, %114, %114
  %119 = load i8, i8* %9, align 1
  %120 = sext i8 %119 to i32
  %121 = shl i32 %120, 4
  %122 = load i8*, i8** %12, align 8
  %123 = getelementptr inbounds i8, i8* %122, i32 1
  store i8* %123, i8** %12, align 8
  %124 = load i8, i8* %122, align 1
  %125 = sext i8 %124 to i32
  %126 = sub nsw i32 %125, 48
  %127 = add nsw i32 %121, %126
  %128 = trunc i32 %127 to i8
  store i8 %128, i8* %9, align 1
  br label %159

129:                                              ; preds = %114, %114, %114, %114, %114, %114
  %130 = load i8, i8* %9, align 1
  %131 = sext i8 %130 to i32
  %132 = shl i32 %131, 4
  %133 = load i8*, i8** %12, align 8
  %134 = getelementptr inbounds i8, i8* %133, i32 1
  store i8* %134, i8** %12, align 8
  %135 = load i8, i8* %133, align 1
  %136 = sext i8 %135 to i32
  %137 = sub nsw i32 %136, 97
  %138 = add nsw i32 %132, %137
  %139 = add nsw i32 %138, 10
  %140 = trunc i32 %139 to i8
  store i8 %140, i8* %9, align 1
  br label %159

141:                                              ; preds = %114, %114, %114, %114, %114, %114
  %142 = load i8, i8* %9, align 1
  %143 = sext i8 %142 to i32
  %144 = shl i32 %143, 4
  %145 = load i8*, i8** %12, align 8
  %146 = getelementptr inbounds i8, i8* %145, i32 1
  store i8* %146, i8** %12, align 8
  %147 = load i8, i8* %145, align 1
  %148 = sext i8 %147 to i32
  %149 = sub nsw i32 %148, 65
  %150 = add nsw i32 %144, %149
  %151 = add nsw i32 %150, 10
  %152 = trunc i32 %151 to i8
  store i8 %152, i8* %9, align 1
  br label %159

153:                                              ; preds = %114
  %154 = load i8, i8* %9, align 1
  %155 = load i8*, i8** %13, align 8
  %156 = getelementptr inbounds i8, i8* %155, i32 1
  store i8* %156, i8** %13, align 8
  store i8 %154, i8* %155, align 1
  %157 = load i64, i64* %10, align 8
  %158 = add i64 %157, 1
  store i64 %158, i64* %10, align 8
  store i32 0, i32* %11, align 4
  br label %159

159:                                              ; preds = %153, %141, %129, %118
  br label %195

160:                                              ; preds = %22
  store i32 0, i32* %11, align 4
  %161 = load i8*, i8** %12, align 8
  %162 = load i8, i8* %161, align 1
  %163 = sext i8 %162 to i32
  %164 = icmp sge i32 %163, 64
  br i1 %164, label %165, label %181

165:                                              ; preds = %160
  %166 = load i8*, i8** %12, align 8
  %167 = load i8, i8* %166, align 1
  %168 = sext i8 %167 to i32
  %169 = icmp sle i32 %168, 126
  br i1 %169, label %170, label %181

170:                                              ; preds = %165
  %171 = load i8*, i8** %12, align 8
  %172 = getelementptr inbounds i8, i8* %171, i32 1
  store i8* %172, i8** %12, align 8
  %173 = load i8, i8* %171, align 1
  %174 = sext i8 %173 to i32
  %175 = and i32 %174, 31
  %176 = trunc i32 %175 to i8
  %177 = load i8*, i8** %13, align 8
  %178 = getelementptr inbounds i8, i8* %177, i32 1
  store i8* %178, i8** %13, align 8
  store i8 %176, i8* %177, align 1
  %179 = load i64, i64* %10, align 8
  %180 = add i64 %179, 1
  store i64 %180, i64* %10, align 8
  br label %193

181:                                              ; preds = %165, %160
  %182 = load i8*, i8** %12, align 8
  %183 = load i8, i8* %182, align 1
  %184 = sext i8 %183 to i32
  %185 = icmp eq i32 %184, 63
  br i1 %185, label %186, label %191

186:                                              ; preds = %181
  %187 = load i8*, i8** %13, align 8
  %188 = getelementptr inbounds i8, i8* %187, i32 1
  store i8* %188, i8** %13, align 8
  store i8 127, i8* %187, align 1
  %189 = load i64, i64* %10, align 8
  %190 = add i64 %189, 1
  store i64 %190, i64* %10, align 8
  br label %192

191:                                              ; preds = %181
  store i32 6, i32* %11, align 4
  br label %192

192:                                              ; preds = %191, %186
  br label %193

193:                                              ; preds = %192, %170
  br label %195

194:                                              ; preds = %22
  call void @abort() #16
  unreachable

195:                                              ; preds = %193, %159, %113, %83, %48
  br label %19, !llvm.loop !53

196:                                              ; preds = %19
  %197 = load i8*, i8** %13, align 8
  %198 = load i8**, i8*** %5, align 8
  store i8* %197, i8** %198, align 8
  %199 = load i8*, i8** %12, align 8
  %200 = load i8**, i8*** %6, align 8
  store i8* %199, i8** %200, align 8
  %201 = load i64, i64* %10, align 8
  %202 = load i64*, i64** %8, align 8
  store i64 %201, i64* %202, align 8
  %203 = load i32, i32* %11, align 4
  %204 = icmp ne i32 %203, 6
  ret i1 %204
}

; Function Attrs: nounwind
declare dso_local i32 @isatty(i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @getenv_quoting_style() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i32, align 4
  %3 = call i8* @getenv(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.98, i64 0, i64 0)) #14
  store i8* %3, i8** %1, align 8
  %4 = load i8*, i8** %1, align 8
  %5 = icmp ne i8* %4, null
  br i1 %5, label %6, label %22

6:                                                ; preds = %0
  %7 = load i8*, i8** %1, align 8
  %8 = call i64 @argmatch(i8* %7, i8** getelementptr inbounds ([11 x i8*], [11 x i8*]* @quoting_style_args, i64 0, i64 0), i8* bitcast ([10 x i32]* @quoting_style_vals to i8*), i64 4) #17
  %9 = trunc i64 %8 to i32
  store i32 %9, i32* %2, align 4
  %10 = load i32, i32* %2, align 4
  %11 = icmp sle i32 0, %10
  br i1 %11, label %12, label %17

12:                                               ; preds = %6
  %13 = load i32, i32* %2, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([10 x i32]* @quoting_style_vals to [0 x i32]*), i64 0, i64 %14
  %16 = load i32, i32* %15, align 4
  call void @set_quoting_style(%struct.quoting_options* null, i32 %16)
  br label %21

17:                                               ; preds = %6
  %18 = call i8* @gettext(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.99, i64 0, i64 0)) #14
  %19 = load i8*, i8** %1, align 8
  %20 = call i8* @quote(i8* %19)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %18, i8* %20)
  br label %21

21:                                               ; preds = %17, %12
  br label %22

22:                                               ; preds = %21, %0
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @set_line_length(i8* %0) #0 {
  %2 = alloca i1, align 1
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = call i32 @xstrtoumax(i8* %5, i8** null, i32 0, i64* %4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  switch i32 %6, label %16 [
    i32 0, label %7
    i32 1, label %15
  ]

7:                                                ; preds = %1
  %8 = load i64, i64* %4, align 8
  %9 = icmp ult i64 %8, -1
  br i1 %9, label %10, label %12

10:                                               ; preds = %7
  %11 = load i64, i64* %4, align 8
  br label %13

12:                                               ; preds = %7
  br label %13

13:                                               ; preds = %12, %10
  %14 = phi i64 [ %11, %10 ], [ -1, %12 ]
  store i64 %14, i64* @line_length, align 8
  store i1 true, i1* %2, align 1
  br label %17

15:                                               ; preds = %1
  store i64 -1, i64* @line_length, align 8
  store i1 true, i1* %2, align 1
  br label %17

16:                                               ; preds = %1
  store i1 false, i1* %2, align 1
  br label %17

17:                                               ; preds = %16, %15, %13
  %18 = load i1, i1* %2, align 1
  ret i1 %18
}

; Function Attrs: nounwind
declare dso_local i32 @ioctl(i32, i64, ...) #1

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @add_ignore_pattern(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.ignore_pattern*, align 8
  store i8* %0, i8** %2, align 8
  %4 = call noalias i8* @xmalloc(i64 16)
  %5 = bitcast i8* %4 to %struct.ignore_pattern*
  store %struct.ignore_pattern* %5, %struct.ignore_pattern** %3, align 8
  %6 = load i8*, i8** %2, align 8
  %7 = load %struct.ignore_pattern*, %struct.ignore_pattern** %3, align 8
  %8 = getelementptr inbounds %struct.ignore_pattern, %struct.ignore_pattern* %7, i32 0, i32 0
  store i8* %6, i8** %8, align 8
  %9 = load %struct.ignore_pattern*, %struct.ignore_pattern** @ignore_patterns, align 8
  %10 = load %struct.ignore_pattern*, %struct.ignore_pattern** %3, align 8
  %11 = getelementptr inbounds %struct.ignore_pattern, %struct.ignore_pattern* %10, i32 0, i32 1
  store %struct.ignore_pattern* %9, %struct.ignore_pattern** %11, align 8
  %12 = load %struct.ignore_pattern*, %struct.ignore_pattern** %3, align 8
  store %struct.ignore_pattern* %12, %struct.ignore_pattern** @ignore_patterns, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @bad_cast(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32 %0) #10 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %5, label %12

5:                                                ; preds = %1
  br label %6

6:                                                ; preds = %5
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %8 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.12, i64 0, i64 0)) #14
  %9 = load i8*, i8** @program_name, align 8
  %10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* %8, i8* %9)
  br label %11

11:                                               ; preds = %6
  br label %110

12:                                               ; preds = %1
  %13 = call i8* @gettext(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.13, i64 0, i64 0)) #14
  %14 = load i8*, i8** @program_name, align 8
  %15 = call i32 (i8*, ...) @printf(i8* %13, i8* %14)
  %16 = call i8* @gettext(i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.14, i64 0, i64 0)) #14
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %18 = call i32 @fputs_unlocked(i8* %16, %struct._IO_FILE* %17)
  call void @emit_mandatory_arg_note()
  %19 = call i8* @gettext(i8* getelementptr inbounds ([271 x i8], [271 x i8]* @.str.15, i64 0, i64 0)) #14
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %21 = call i32 @fputs_unlocked(i8* %19, %struct._IO_FILE* %20)
  %22 = call i8* @gettext(i8* getelementptr inbounds ([156 x i8], [156 x i8]* @.str.16, i64 0, i64 0)) #14
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %24 = call i32 @fputs_unlocked(i8* %22, %struct._IO_FILE* %23)
  %25 = call i8* @gettext(i8* getelementptr inbounds ([362 x i8], [362 x i8]* @.str.17, i64 0, i64 0)) #14
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %27 = call i32 @fputs_unlocked(i8* %25, %struct._IO_FILE* %26)
  %28 = call i8* @gettext(i8* getelementptr inbounds ([367 x i8], [367 x i8]* @.str.18, i64 0, i64 0)) #14
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %30 = call i32 @fputs_unlocked(i8* %28, %struct._IO_FILE* %29)
  %31 = call i8* @gettext(i8* getelementptr inbounds ([419 x i8], [419 x i8]* @.str.19, i64 0, i64 0)) #14
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %33 = call i32 @fputs_unlocked(i8* %31, %struct._IO_FILE* %32)
  %34 = call i8* @gettext(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.20, i64 0, i64 0)) #14
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %36 = call i32 @fputs_unlocked(i8* %34, %struct._IO_FILE* %35)
  %37 = call i8* @gettext(i8* getelementptr inbounds ([245 x i8], [245 x i8]* @.str.21, i64 0, i64 0)) #14
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %39 = call i32 @fputs_unlocked(i8* %37, %struct._IO_FILE* %38)
  %40 = call i8* @gettext(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.22, i64 0, i64 0)) #14
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %42 = call i32 @fputs_unlocked(i8* %40, %struct._IO_FILE* %41)
  %43 = call i8* @gettext(i8* getelementptr inbounds ([150 x i8], [150 x i8]* @.str.23, i64 0, i64 0)) #14
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %45 = call i32 @fputs_unlocked(i8* %43, %struct._IO_FILE* %44)
  %46 = call i8* @gettext(i8* getelementptr inbounds ([422 x i8], [422 x i8]* @.str.24, i64 0, i64 0)) #14
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %48 = call i32 @fputs_unlocked(i8* %46, %struct._IO_FILE* %47)
  %49 = call i8* @gettext(i8* getelementptr inbounds ([145 x i8], [145 x i8]* @.str.25, i64 0, i64 0)) #14
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %51 = call i32 @fputs_unlocked(i8* %49, %struct._IO_FILE* %50)
  %52 = call i8* @gettext(i8* getelementptr inbounds ([354 x i8], [354 x i8]* @.str.26, i64 0, i64 0)) #14
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %54 = call i32 @fputs_unlocked(i8* %52, %struct._IO_FILE* %53)
  %55 = call i8* @gettext(i8* getelementptr inbounds ([148 x i8], [148 x i8]* @.str.27, i64 0, i64 0)) #14
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %57 = call i32 @fputs_unlocked(i8* %55, %struct._IO_FILE* %56)
  %58 = call i8* @gettext(i8* getelementptr inbounds ([359 x i8], [359 x i8]* @.str.28, i64 0, i64 0)) #14
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %60 = call i32 @fputs_unlocked(i8* %58, %struct._IO_FILE* %59)
  %61 = call i8* @gettext(i8* getelementptr inbounds ([303 x i8], [303 x i8]* @.str.29, i64 0, i64 0)) #14
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %63 = call i32 @fputs_unlocked(i8* %61, %struct._IO_FILE* %62)
  %64 = call i8* @gettext(i8* getelementptr inbounds ([585 x i8], [585 x i8]* @.str.30, i64 0, i64 0)) #14
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %66 = call i32 @fputs_unlocked(i8* %64, %struct._IO_FILE* %65)
  %67 = call i8* @gettext(i8* getelementptr inbounds ([197 x i8], [197 x i8]* @.str.31, i64 0, i64 0)) #14
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %69 = call i32 @fputs_unlocked(i8* %67, %struct._IO_FILE* %68)
  %70 = call i8* @gettext(i8* getelementptr inbounds ([519 x i8], [519 x i8]* @.str.32, i64 0, i64 0)) #14
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %72 = call i32 @fputs_unlocked(i8* %70, %struct._IO_FILE* %71)
  %73 = call i8* @gettext(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.33, i64 0, i64 0)) #14
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %75 = call i32 @fputs_unlocked(i8* %73, %struct._IO_FILE* %74)
  %76 = call i8* @gettext(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.34, i64 0, i64 0)) #14
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %78 = call i32 @fputs_unlocked(i8* %76, %struct._IO_FILE* %77)
  %79 = call i8* @gettext(i8* getelementptr inbounds ([372 x i8], [372 x i8]* @.str.35, i64 0, i64 0)) #14
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %81 = call i32 @fputs_unlocked(i8* %79, %struct._IO_FILE* %80)
  %82 = call i8* @gettext(i8* getelementptr inbounds ([363 x i8], [363 x i8]* @.str.36, i64 0, i64 0)) #14
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %84 = call i32 @fputs_unlocked(i8* %82, %struct._IO_FILE* %83)
  %85 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.37, i64 0, i64 0)) #14
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %87 = call i32 @fputs_unlocked(i8* %85, %struct._IO_FILE* %86)
  %88 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.38, i64 0, i64 0)) #14
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %90 = call i32 @fputs_unlocked(i8* %88, %struct._IO_FILE* %89)
  call void @emit_size_note()
  %91 = call i8* @gettext(i8* getelementptr inbounds ([376 x i8], [376 x i8]* @.str.39, i64 0, i64 0)) #14
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %93 = call i32 @fputs_unlocked(i8* %91, %struct._IO_FILE* %92)
  %94 = call i8* @gettext(i8* getelementptr inbounds ([286 x i8], [286 x i8]* @.str.40, i64 0, i64 0)) #14
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %96 = call i32 @fputs_unlocked(i8* %94, %struct._IO_FILE* %95)
  %97 = call i8* @gettext(i8* getelementptr inbounds ([152 x i8], [152 x i8]* @.str.41, i64 0, i64 0)) #14
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %99 = call i32 @fputs_unlocked(i8* %97, %struct._IO_FILE* %98)
  %100 = load i32, i32* @ls_mode, align 4
  %101 = icmp eq i32 %100, 1
  br i1 %101, label %102, label %103

102:                                              ; preds = %12
  br label %108

103:                                              ; preds = %12
  %104 = load i32, i32* @ls_mode, align 4
  %105 = icmp eq i32 %104, 2
  %106 = zext i1 %105 to i64
  %107 = select i1 %105, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i64 0, i64 0)
  br label %108

108:                                              ; preds = %103, %102
  %109 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0), %102 ], [ %107, %103 ]
  call void @emit_ancillary_info(i8* %109)
  br label %110

110:                                              ; preds = %108, %11
  %111 = load i32, i32* %2, align 4
  call void @exit(i32 %111) #16
  unreachable
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #3

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #4

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: nounwind
declare dso_local i8* @dcgettext(i8*, i8*, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @abformat_init() #0 {
  %1 = alloca [2 x i8*], align 16
  %2 = alloca i32, align 4
  %3 = alloca [12 x [128 x i8]], align 16
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %2, align 4
  br label %10

10:                                               ; preds = %22, %0
  %11 = load i32, i32* %2, align 4
  %12 = icmp slt i32 %11, 2
  br i1 %12, label %13, label %25

13:                                               ; preds = %10
  %14 = load i32, i32* %2, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 %15
  %17 = load i8*, i8** %16, align 8
  %18 = call i8* @first_percent_b(i8* %17) #17
  %19 = load i32, i32* %2, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [2 x i8*], [2 x i8*]* %1, i64 0, i64 %20
  store i8* %18, i8** %21, align 8
  br label %22

22:                                               ; preds = %13
  %23 = load i32, i32* %2, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %2, align 4
  br label %10, !llvm.loop !54

25:                                               ; preds = %10
  %26 = getelementptr inbounds [2 x i8*], [2 x i8*]* %1, i64 0, i64 0
  %27 = load i8*, i8** %26, align 16
  %28 = icmp ne i8* %27, null
  br i1 %28, label %34, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds [2 x i8*], [2 x i8*]* %1, i64 0, i64 1
  %31 = load i8*, i8** %30, align 8
  %32 = icmp ne i8* %31, null
  br i1 %32, label %34, label %33

33:                                               ; preds = %29
  br label %117

34:                                               ; preds = %29, %25
  %35 = getelementptr inbounds [12 x [128 x i8]], [12 x [128 x i8]]* %3, i64 0, i64 0
  %36 = call zeroext i1 @abmon_init([128 x i8]* %35)
  br i1 %36, label %38, label %37

37:                                               ; preds = %34
  br label %117

38:                                               ; preds = %34
  store i32 0, i32* %4, align 4
  br label %39

39:                                               ; preds = %113, %38
  %40 = load i32, i32* %4, align 4
  %41 = icmp slt i32 %40, 2
  br i1 %41, label %42, label %116

42:                                               ; preds = %39
  %43 = load i32, i32* %4, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [2 x i8*], [2 x i8*]* @long_time_format, i64 0, i64 %44
  %46 = load i8*, i8** %45, align 8
  store i8* %46, i8** %5, align 8
  store i32 0, i32* %6, align 4
  br label %47

47:                                               ; preds = %109, %42
  %48 = load i32, i32* %6, align 4
  %49 = icmp slt i32 %48, 12
  br i1 %49, label %50, label %112

50:                                               ; preds = %47
  %51 = load i32, i32* %4, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [2 x [12 x [128 x i8]]], [2 x [12 x [128 x i8]]]* @abformat, i64 0, i64 %52
  %54 = load i32, i32* %6, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [12 x [128 x i8]], [12 x [128 x i8]]* %53, i64 0, i64 %55
  %57 = getelementptr inbounds [128 x i8], [128 x i8]* %56, i64 0, i64 0
  store i8* %57, i8** %7, align 8
  %58 = load i32, i32* %4, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [2 x i8*], [2 x i8*]* %1, i64 0, i64 %59
  %61 = load i8*, i8** %60, align 8
  %62 = icmp ne i8* %61, null
  br i1 %62, label %67, label %63

63:                                               ; preds = %50
  %64 = load i8*, i8** %7, align 8
  %65 = load i8*, i8** %5, align 8
  %66 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %64, i64 128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.170, i64 0, i64 0), i8* %65) #14
  store i32 %66, i32* %8, align 4
  br label %101

67:                                               ; preds = %50
  %68 = load i32, i32* %4, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [2 x i8*], [2 x i8*]* %1, i64 0, i64 %69
  %71 = load i8*, i8** %70, align 8
  %72 = load i8*, i8** %5, align 8
  %73 = ptrtoint i8* %71 to i64
  %74 = ptrtoint i8* %72 to i64
  %75 = sub i64 %73, %74
  %76 = icmp sle i64 %75, 128
  br i1 %76, label %78, label %77

77:                                               ; preds = %67
  br label %117

78:                                               ; preds = %67
  %79 = load i32, i32* %4, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [2 x i8*], [2 x i8*]* %1, i64 0, i64 %80
  %82 = load i8*, i8** %81, align 8
  %83 = load i8*, i8** %5, align 8
  %84 = ptrtoint i8* %82 to i64
  %85 = ptrtoint i8* %83 to i64
  %86 = sub i64 %84, %85
  %87 = trunc i64 %86 to i32
  store i32 %87, i32* %9, align 4
  %88 = load i8*, i8** %7, align 8
  %89 = load i32, i32* %9, align 4
  %90 = load i8*, i8** %5, align 8
  %91 = load i32, i32* %6, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [12 x [128 x i8]], [12 x [128 x i8]]* %3, i64 0, i64 %92
  %94 = getelementptr inbounds [128 x i8], [128 x i8]* %93, i64 0, i64 0
  %95 = load i32, i32* %4, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [2 x i8*], [2 x i8*]* %1, i64 0, i64 %96
  %98 = load i8*, i8** %97, align 8
  %99 = getelementptr inbounds i8, i8* %98, i64 2
  %100 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %88, i64 128, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.171, i64 0, i64 0), i32 %89, i8* %90, i8* %94, i8* %99) #14
  store i32 %100, i32* %8, align 4
  br label %101

101:                                              ; preds = %78, %63
  %102 = load i32, i32* %8, align 4
  %103 = icmp sle i32 0, %102
  br i1 %103, label %104, label %107

104:                                              ; preds = %101
  %105 = load i32, i32* %8, align 4
  %106 = icmp slt i32 %105, 128
  br i1 %106, label %108, label %107

107:                                              ; preds = %104, %101
  br label %117

108:                                              ; preds = %104
  br label %109

109:                                              ; preds = %108
  %110 = load i32, i32* %6, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %6, align 4
  br label %47, !llvm.loop !55

112:                                              ; preds = %47
  br label %113

113:                                              ; preds = %112
  %114 = load i32, i32* %4, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %4, align 4
  br label %39, !llvm.loop !56

116:                                              ; preds = %39
  store i8 1, i8* @use_abformat, align 1
  br label %117

117:                                              ; preds = %116, %107, %77, %37, %33
  ret void
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i8* @first_percent_b(i8* %0) #9 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  br label %4

4:                                                ; preds = %26, %1
  %5 = load i8*, i8** %3, align 8
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  br i1 %7, label %8, label %29

8:                                                ; preds = %4
  %9 = load i8*, i8** %3, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 0
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = icmp eq i32 %12, 37
  br i1 %13, label %14, label %25

14:                                               ; preds = %8
  %15 = load i8*, i8** %3, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = sext i8 %17 to i32
  switch i32 %18, label %24 [
    i32 98, label %19
    i32 37, label %21
  ]

19:                                               ; preds = %14
  %20 = load i8*, i8** %3, align 8
  store i8* %20, i8** %2, align 8
  br label %30

21:                                               ; preds = %14
  %22 = load i8*, i8** %3, align 8
  %23 = getelementptr inbounds i8, i8* %22, i32 1
  store i8* %23, i8** %3, align 8
  br label %24

24:                                               ; preds = %21, %14
  br label %25

25:                                               ; preds = %24, %8
  br label %26

26:                                               ; preds = %25
  %27 = load i8*, i8** %3, align 8
  %28 = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %28, i8** %3, align 8
  br label %4, !llvm.loop !57

29:                                               ; preds = %4
  store i8* null, i8** %2, align 8
  br label %30

30:                                               ; preds = %29, %19
  %31 = load i8*, i8** %2, align 8
  ret i8* %31
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @abmon_init([128 x i8]* %0) #0 {
  %2 = alloca i1, align 1
  %3 = alloca [128 x i8]*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  store [128 x i8]* %0, [128 x i8]** %3, align 8
  store i64 12, i64* %4, align 8
  br label %10

10:                                               ; preds = %49, %1
  %11 = load i64, i64* %4, align 8
  store i64 %11, i64* %5, align 8
  store i64 0, i64* %4, align 8
  store i32 0, i32* %6, align 4
  br label %12

12:                                               ; preds = %45, %10
  %13 = load i32, i32* %6, align 4
  %14 = icmp slt i32 %13, 12
  br i1 %14, label %15, label %48

15:                                               ; preds = %12
  %16 = load i64, i64* %5, align 8
  store i64 %16, i64* %7, align 8
  %17 = load i32, i32* %6, align 4
  %18 = add nsw i32 131086, %17
  %19 = call i8* @nl_langinfo(i32 %18) #14
  store i8* %19, i8** %8, align 8
  %20 = load i8*, i8** %8, align 8
  %21 = call i8* @strchr(i8* %20, i32 37) #17
  %22 = icmp ne i8* %21, null
  br i1 %22, label %23, label %24

23:                                               ; preds = %15
  store i1 false, i1* %2, align 1
  br label %54

24:                                               ; preds = %15
  %25 = load i8*, i8** %8, align 8
  %26 = load [128 x i8]*, [128 x i8]** %3, align 8
  %27 = load i32, i32* %6, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [128 x i8], [128 x i8]* %26, i64 %28
  %30 = getelementptr inbounds [128 x i8], [128 x i8]* %29, i64 0, i64 0
  %31 = call i64 @mbsalign(i8* %25, i8* %30, i64 128, i64* %7, i32 0, i32 0)
  store i64 %31, i64* %9, align 8
  %32 = load i64, i64* %9, align 8
  %33 = icmp ult i64 %32, 128
  br i1 %33, label %35, label %34

34:                                               ; preds = %24
  store i1 false, i1* %2, align 1
  br label %54

35:                                               ; preds = %24
  %36 = load i64, i64* %4, align 8
  %37 = load i64, i64* %7, align 8
  %38 = icmp ugt i64 %36, %37
  br i1 %38, label %39, label %41

39:                                               ; preds = %35
  %40 = load i64, i64* %4, align 8
  br label %43

41:                                               ; preds = %35
  %42 = load i64, i64* %7, align 8
  br label %43

43:                                               ; preds = %41, %39
  %44 = phi i64 [ %40, %39 ], [ %42, %41 ]
  store i64 %44, i64* %4, align 8
  br label %45

45:                                               ; preds = %43
  %46 = load i32, i32* %6, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %6, align 4
  br label %12, !llvm.loop !58

48:                                               ; preds = %12
  br label %49

49:                                               ; preds = %48
  %50 = load i64, i64* %5, align 8
  %51 = load i64, i64* %4, align 8
  %52 = icmp ugt i64 %50, %51
  br i1 %52, label %10, label %53, !llvm.loop !59

53:                                               ; preds = %49
  store i1 true, i1* %2, align 1
  br label %54

54:                                               ; preds = %53, %34, %23
  %55 = load i1, i1* %2, align 1
  ret i1 %55
}

; Function Attrs: nounwind
declare dso_local i32 @snprintf(i8*, i64, i8*, ...) #1

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_mandatory_arg_note() #0 {
  %1 = call i8* @gettext(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.231, i64 0, i64 0)) #14
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %3 = call i32 @fputs_unlocked(i8* %1, %struct._IO_FILE* %2)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_size_note() #0 {
  %1 = call i8* @gettext(i8* getelementptr inbounds ([153 x i8], [153 x i8]* @.str.232, i64 0, i64 0)) #14
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %3 = call i32 @fputs_unlocked(i8* %1, %struct._IO_FILE* %2)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca [7 x %struct.infomap], align 16
  %4 = alloca i8*, align 8
  %5 = alloca %struct.infomap*, align 8
  %6 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %7 = bitcast [7 x %struct.infomap]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %7, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false)
  %8 = load i8*, i8** %2, align 8
  store i8* %8, i8** %4, align 8
  %9 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %3, i64 0, i64 0
  store %struct.infomap* %9, %struct.infomap** %5, align 8
  br label %10

10:                                               ; preds = %25, %1
  %11 = load %struct.infomap*, %struct.infomap** %5, align 8
  %12 = getelementptr inbounds %struct.infomap, %struct.infomap* %11, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = icmp ne i8* %13, null
  br i1 %14, label %15, label %23

15:                                               ; preds = %10
  %16 = load i8*, i8** %2, align 8
  %17 = load %struct.infomap*, %struct.infomap** %5, align 8
  %18 = getelementptr inbounds %struct.infomap, %struct.infomap* %17, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 @strcmp(i8* %16, i8* %19) #17
  %21 = icmp eq i32 %20, 0
  %22 = xor i1 %21, true
  br label %23

23:                                               ; preds = %15, %10
  %24 = phi i1 [ false, %10 ], [ %22, %15 ]
  br i1 %24, label %25, label %28

25:                                               ; preds = %23
  %26 = load %struct.infomap*, %struct.infomap** %5, align 8
  %27 = getelementptr inbounds %struct.infomap, %struct.infomap* %26, i32 1
  store %struct.infomap* %27, %struct.infomap** %5, align 8
  br label %10, !llvm.loop !60

28:                                               ; preds = %23
  %29 = load %struct.infomap*, %struct.infomap** %5, align 8
  %30 = getelementptr inbounds %struct.infomap, %struct.infomap* %29, i32 0, i32 1
  %31 = load i8*, i8** %30, align 8
  %32 = icmp ne i8* %31, null
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  %34 = load %struct.infomap*, %struct.infomap** %5, align 8
  %35 = getelementptr inbounds %struct.infomap, %struct.infomap* %34, i32 0, i32 1
  %36 = load i8*, i8** %35, align 8
  store i8* %36, i8** %4, align 8
  br label %37

37:                                               ; preds = %33, %28
  %38 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.241, i64 0, i64 0)) #14
  %39 = call i32 (i8*, ...) @printf(i8* %38, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.81, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.242, i64 0, i64 0))
  %40 = call i8* @setlocale(i32 5, i8* null) #14
  store i8* %40, i8** %6, align 8
  %41 = load i8*, i8** %6, align 8
  %42 = icmp ne i8* %41, null
  br i1 %42, label %43, label %51

43:                                               ; preds = %37
  %44 = load i8*, i8** %6, align 8
  %45 = call i32 @strncmp(i8* %44, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.243, i64 0, i64 0), i64 3) #17
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %51

47:                                               ; preds = %43
  %48 = call i8* @gettext(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.244, i64 0, i64 0)) #14
  %49 = load i8*, i8** %2, align 8
  %50 = call i32 (i8*, ...) @printf(i8* %48, i8* %49)
  br label %51

51:                                               ; preds = %47, %43, %37
  %52 = call i8* @gettext(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.245, i64 0, i64 0)) #14
  %53 = load i8*, i8** %2, align 8
  %54 = call i32 (i8*, ...) @printf(i8* %52, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.242, i64 0, i64 0), i8* %53)
  %55 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.246, i64 0, i64 0)) #14
  %56 = load i8*, i8** %4, align 8
  %57 = load i8*, i8** %4, align 8
  %58 = load i8*, i8** %2, align 8
  %59 = icmp eq i8* %57, %58
  %60 = zext i1 %59 to i64
  %61 = select i1 %59, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.247, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %62 = call i32 (i8*, ...) @printf(i8* %55, i8* %56, i8* %61)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @areadlink_with_size(i8* %0, i64 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 1024, i64* %6, align 8
  store i64 8192, i64* %7, align 8
  %14 = load i64, i64* %6, align 8
  %15 = load i64, i64* %7, align 8
  %16 = icmp ult i64 %14, %15
  br i1 %16, label %17, label %20

17:                                               ; preds = %2
  %18 = load i64, i64* %6, align 8
  %19 = add i64 %18, 1
  br label %22

20:                                               ; preds = %2
  %21 = load i64, i64* %7, align 8
  br label %22

22:                                               ; preds = %20, %17
  %23 = phi i64 [ %19, %17 ], [ %21, %20 ]
  store i64 %23, i64* %8, align 8
  %24 = load i64, i64* %5, align 8
  %25 = load i64, i64* %8, align 8
  %26 = icmp ult i64 %24, %25
  br i1 %26, label %27, label %30

27:                                               ; preds = %22
  %28 = load i64, i64* %5, align 8
  %29 = add i64 %28, 1
  br label %32

30:                                               ; preds = %22
  %31 = load i64, i64* %8, align 8
  br label %32

32:                                               ; preds = %30, %27
  %33 = phi i64 [ %29, %27 ], [ %31, %30 ]
  store i64 %33, i64* %9, align 8
  br label %34

34:                                               ; preds = %81, %32
  %35 = load i64, i64* %9, align 8
  %36 = call noalias i8* @malloc(i64 %35) #14
  store i8* %36, i8** %12, align 8
  %37 = load i8*, i8** %12, align 8
  %38 = icmp eq i8* %37, null
  br i1 %38, label %39, label %40

39:                                               ; preds = %34
  store i8* null, i8** %3, align 8
  br label %82

40:                                               ; preds = %34
  %41 = load i8*, i8** %4, align 8
  %42 = load i8*, i8** %12, align 8
  %43 = load i64, i64* %9, align 8
  %44 = call i64 @readlink(i8* %41, i8* %42, i64 %43) #14
  store i64 %44, i64* %10, align 8
  %45 = load i64, i64* %10, align 8
  store i64 %45, i64* %11, align 8
  %46 = load i64, i64* %10, align 8
  %47 = icmp slt i64 %46, 0
  br i1 %47, label %48, label %58

48:                                               ; preds = %40
  %49 = call i32* @__errno_location() #18
  %50 = load i32, i32* %49, align 4
  %51 = icmp ne i32 %50, 34
  br i1 %51, label %52, label %58

52:                                               ; preds = %48
  %53 = call i32* @__errno_location() #18
  %54 = load i32, i32* %53, align 4
  store i32 %54, i32* %13, align 4
  %55 = load i8*, i8** %12, align 8
  call void @free(i8* %55) #14
  %56 = load i32, i32* %13, align 4
  %57 = call i32* @__errno_location() #18
  store i32 %56, i32* %57, align 4
  store i8* null, i8** %3, align 8
  br label %82

58:                                               ; preds = %48, %40
  %59 = load i64, i64* %11, align 8
  %60 = load i64, i64* %9, align 8
  %61 = icmp ult i64 %59, %60
  br i1 %61, label %62, label %67

62:                                               ; preds = %58
  %63 = load i8*, i8** %12, align 8
  %64 = load i64, i64* %11, align 8
  %65 = getelementptr inbounds i8, i8* %63, i64 %64
  store i8 0, i8* %65, align 1
  %66 = load i8*, i8** %12, align 8
  store i8* %66, i8** %3, align 8
  br label %82

67:                                               ; preds = %58
  %68 = load i8*, i8** %12, align 8
  call void @free(i8* %68) #14
  %69 = load i64, i64* %9, align 8
  %70 = icmp ule i64 %69, 4611686018427387903
  br i1 %70, label %71, label %74

71:                                               ; preds = %67
  %72 = load i64, i64* %9, align 8
  %73 = mul i64 %72, 2
  store i64 %73, i64* %9, align 8
  br label %81

74:                                               ; preds = %67
  %75 = load i64, i64* %9, align 8
  %76 = icmp ult i64 %75, 9223372036854775807
  br i1 %76, label %77, label %78

77:                                               ; preds = %74
  store i64 9223372036854775807, i64* %9, align 8
  br label %80

78:                                               ; preds = %74
  %79 = call i32* @__errno_location() #18
  store i32 12, i32* %79, align 4
  store i8* null, i8** %3, align 8
  br label %82

80:                                               ; preds = %77
  br label %81

81:                                               ; preds = %80, %71
  br label %34

82:                                               ; preds = %78, %62, %52, %39
  %83 = load i8*, i8** %3, align 8
  ret i8* %83
}

; Function Attrs: nounwind
declare dso_local i64 @readlink(i8*, i8*, i64) #1

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i64 @argmatch(i8* %0, i8** %1, i8* %2, i64 %3) #9 {
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8**, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i8, align 1
  store i8* %0, i8** %6, align 8
  store i8** %1, i8*** %7, align 8
  store i8* %2, i8** %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 -1, i64* %12, align 8
  store i8 0, i8* %13, align 1
  %14 = load i8*, i8** %6, align 8
  %15 = call i64 @strlen(i8* %14) #17
  store i64 %15, i64* %11, align 8
  store i64 0, i64* %10, align 8
  br label %16

16:                                               ; preds = %68, %4
  %17 = load i8**, i8*** %7, align 8
  %18 = load i64, i64* %10, align 8
  %19 = getelementptr inbounds i8*, i8** %17, i64 %18
  %20 = load i8*, i8** %19, align 8
  %21 = icmp ne i8* %20, null
  br i1 %21, label %22, label %71

22:                                               ; preds = %16
  %23 = load i8**, i8*** %7, align 8
  %24 = load i64, i64* %10, align 8
  %25 = getelementptr inbounds i8*, i8** %23, i64 %24
  %26 = load i8*, i8** %25, align 8
  %27 = load i8*, i8** %6, align 8
  %28 = load i64, i64* %11, align 8
  %29 = call i32 @strncmp(i8* %26, i8* %27, i64 %28) #17
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %67, label %31

31:                                               ; preds = %22
  %32 = load i8**, i8*** %7, align 8
  %33 = load i64, i64* %10, align 8
  %34 = getelementptr inbounds i8*, i8** %32, i64 %33
  %35 = load i8*, i8** %34, align 8
  %36 = call i64 @strlen(i8* %35) #17
  %37 = load i64, i64* %11, align 8
  %38 = icmp eq i64 %36, %37
  br i1 %38, label %39, label %41

39:                                               ; preds = %31
  %40 = load i64, i64* %10, align 8
  store i64 %40, i64* %5, align 8
  br label %77

41:                                               ; preds = %31
  %42 = load i64, i64* %12, align 8
  %43 = icmp eq i64 %42, -1
  br i1 %43, label %44, label %46

44:                                               ; preds = %41
  %45 = load i64, i64* %10, align 8
  store i64 %45, i64* %12, align 8
  br label %65

46:                                               ; preds = %41
  %47 = load i8*, i8** %8, align 8
  %48 = icmp eq i8* %47, null
  br i1 %48, label %63, label %49

49:                                               ; preds = %46
  %50 = load i8*, i8** %8, align 8
  %51 = load i64, i64* %9, align 8
  %52 = load i64, i64* %12, align 8
  %53 = mul i64 %51, %52
  %54 = getelementptr inbounds i8, i8* %50, i64 %53
  %55 = load i8*, i8** %8, align 8
  %56 = load i64, i64* %9, align 8
  %57 = load i64, i64* %10, align 8
  %58 = mul i64 %56, %57
  %59 = getelementptr inbounds i8, i8* %55, i64 %58
  %60 = load i64, i64* %9, align 8
  %61 = call i32 @memcmp(i8* %54, i8* %59, i64 %60) #17
  %62 = icmp ne i32 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %49, %46
  store i8 1, i8* %13, align 1
  br label %64

64:                                               ; preds = %63, %49
  br label %65

65:                                               ; preds = %64, %44
  br label %66

66:                                               ; preds = %65
  br label %67

67:                                               ; preds = %66, %22
  br label %68

68:                                               ; preds = %67
  %69 = load i64, i64* %10, align 8
  %70 = add i64 %69, 1
  store i64 %70, i64* %10, align 8
  br label %16, !llvm.loop !61

71:                                               ; preds = %16
  %72 = load i8, i8* %13, align 1
  %73 = trunc i8 %72 to i1
  br i1 %73, label %74, label %75

74:                                               ; preds = %71
  store i64 -2, i64* %5, align 8
  br label %77

75:                                               ; preds = %71
  %76 = load i64, i64* %12, align 8
  store i64 %76, i64* %5, align 8
  br label %77

77:                                               ; preds = %75, %74, %39
  %78 = load i64, i64* %5, align 8
  ret i64 %78
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @argmatch_invalid(i8* %0, i8* %1, i64 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i64 %2, i64* %6, align 8
  %8 = load i64, i64* %6, align 8
  %9 = icmp eq i64 %8, -1
  br i1 %9, label %10, label %12

10:                                               ; preds = %3
  %11 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.255, i64 0, i64 0)) #14
  br label %14

12:                                               ; preds = %3
  %13 = call i8* @gettext(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1.256, i64 0, i64 0)) #14
  br label %14

14:                                               ; preds = %12, %10
  %15 = phi i8* [ %11, %10 ], [ %13, %12 ]
  store i8* %15, i8** %7, align 8
  %16 = load i8*, i8** %7, align 8
  %17 = load i8*, i8** %5, align 8
  %18 = call i8* @quotearg_n_style(i32 0, i32 8, i8* %17)
  %19 = load i8*, i8** %4, align 8
  %20 = call i8* @quote_n(i32 1, i8* %19)
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %16, i8* %18, i8* %20)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @argmatch_valid(i8** %0, i8* %1, i64 %2) #0 {
  %4 = alloca i8**, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  store i8** %0, i8*** %4, align 8
  store i8* %1, i8** %5, align 8
  store i64 %2, i64* %6, align 8
  store i8* null, i8** %8, align 8
  %9 = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2.257, i64 0, i64 0)) #14
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %11 = call i32 @fputs_unlocked(i8* %9, %struct._IO_FILE* %10)
  store i64 0, i64* %7, align 8
  br label %12

12:                                               ; preds = %53, %3
  %13 = load i8**, i8*** %4, align 8
  %14 = load i64, i64* %7, align 8
  %15 = getelementptr inbounds i8*, i8** %13, i64 %14
  %16 = load i8*, i8** %15, align 8
  %17 = icmp ne i8* %16, null
  br i1 %17, label %18, label %56

18:                                               ; preds = %12
  %19 = load i64, i64* %7, align 8
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %31, label %21

21:                                               ; preds = %18
  %22 = load i8*, i8** %8, align 8
  %23 = load i8*, i8** %5, align 8
  %24 = load i64, i64* %6, align 8
  %25 = load i64, i64* %7, align 8
  %26 = mul i64 %24, %25
  %27 = getelementptr inbounds i8, i8* %23, i64 %26
  %28 = load i64, i64* %6, align 8
  %29 = call i32 @memcmp(i8* %22, i8* %27, i64 %28) #17
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %44

31:                                               ; preds = %21, %18
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %33 = load i8**, i8*** %4, align 8
  %34 = load i64, i64* %7, align 8
  %35 = getelementptr inbounds i8*, i8** %33, i64 %34
  %36 = load i8*, i8** %35, align 8
  %37 = call i8* @quote(i8* %36)
  %38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.258, i64 0, i64 0), i8* %37)
  %39 = load i8*, i8** %5, align 8
  %40 = load i64, i64* %6, align 8
  %41 = load i64, i64* %7, align 8
  %42 = mul i64 %40, %41
  %43 = getelementptr inbounds i8, i8* %39, i64 %42
  store i8* %43, i8** %8, align 8
  br label %52

44:                                               ; preds = %21
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %46 = load i8**, i8*** %4, align 8
  %47 = load i64, i64* %7, align 8
  %48 = getelementptr inbounds i8*, i8** %46, i64 %47
  %49 = load i8*, i8** %48, align 8
  %50 = call i8* @quote(i8* %49)
  %51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.259, i64 0, i64 0), i8* %50)
  br label %52

52:                                               ; preds = %44, %31
  br label %53

53:                                               ; preds = %52
  %54 = load i64, i64* %7, align 8
  %55 = add i64 %54, 1
  store i64 %55, i64* %7, align 8
  br label %12, !llvm.loop !62

56:                                               ; preds = %12
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %58 = call i32 @putc_unlocked(i32 10, %struct._IO_FILE* %57)
  ret void
}

declare dso_local i32 @putc_unlocked(i32, %struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @__xargmatch_internal(i8* %0, i8* %1, i8** %2, i8* %3, i64 %4, void ()* %5) #0 {
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8**, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca void ()*, align 8
  %14 = alloca i64, align 8
  store i8* %0, i8** %8, align 8
  store i8* %1, i8** %9, align 8
  store i8** %2, i8*** %10, align 8
  store i8* %3, i8** %11, align 8
  store i64 %4, i64* %12, align 8
  store void ()* %5, void ()** %13, align 8
  %15 = load i8*, i8** %9, align 8
  %16 = load i8**, i8*** %10, align 8
  %17 = load i8*, i8** %11, align 8
  %18 = load i64, i64* %12, align 8
  %19 = call i64 @argmatch(i8* %15, i8** %16, i8* %17, i64 %18) #17
  store i64 %19, i64* %14, align 8
  %20 = load i64, i64* %14, align 8
  %21 = icmp sge i64 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %6
  %23 = load i64, i64* %14, align 8
  store i64 %23, i64* %7, align 8
  br label %32

24:                                               ; preds = %6
  %25 = load i8*, i8** %8, align 8
  %26 = load i8*, i8** %9, align 8
  %27 = load i64, i64* %14, align 8
  call void @argmatch_invalid(i8* %25, i8* %26, i64 %27)
  %28 = load i8**, i8*** %10, align 8
  %29 = load i8*, i8** %11, align 8
  %30 = load i64, i64* %12, align 8
  call void @argmatch_valid(i8** %28, i8* %29, i64 %30)
  %31 = load void ()*, void ()** %13, align 8
  call void %31()
  store i64 -1, i64* %7, align 8
  br label %32

32:                                               ; preds = %24, %22
  %33 = load i64, i64* %7, align 8
  ret i64 %33
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @__argmatch_die() #0 {
  call void @usage(i32 1)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @c_isalnum(i32 %0) #0 {
  %2 = alloca i1, align 1
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %6 [
    i32 48, label %5
    i32 49, label %5
    i32 50, label %5
    i32 51, label %5
    i32 52, label %5
    i32 53, label %5
    i32 54, label %5
    i32 55, label %5
    i32 56, label %5
    i32 57, label %5
    i32 97, label %5
    i32 98, label %5
    i32 99, label %5
    i32 100, label %5
    i32 101, label %5
    i32 102, label %5
    i32 103, label %5
    i32 104, label %5
    i32 105, label %5
    i32 106, label %5
    i32 107, label %5
    i32 108, label %5
    i32 109, label %5
    i32 110, label %5
    i32 111, label %5
    i32 112, label %5
    i32 113, label %5
    i32 114, label %5
    i32 115, label %5
    i32 116, label %5
    i32 117, label %5
    i32 118, label %5
    i32 119, label %5
    i32 120, label %5
    i32 121, label %5
    i32 122, label %5
    i32 65, label %5
    i32 66, label %5
    i32 67, label %5
    i32 68, label %5
    i32 69, label %5
    i32 70, label %5
    i32 71, label %5
    i32 72, label %5
    i32 73, label %5
    i32 74, label %5
    i32 75, label %5
    i32 76, label %5
    i32 77, label %5
    i32 78, label %5
    i32 79, label %5
    i32 80, label %5
    i32 81, label %5
    i32 82, label %5
    i32 83, label %5
    i32 84, label %5
    i32 85, label %5
    i32 86, label %5
    i32 87, label %5
    i32 88, label %5
    i32 89, label %5
    i32 90, label %5
  ]

5:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  store i1 true, i1* %2, align 1
  br label %7

6:                                                ; preds = %1
  store i1 false, i1* %2, align 1
  br label %7

7:                                                ; preds = %6, %5
  %8 = load i1, i1* %2, align 1
  ret i1 %8
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @c_isalpha(i32 %0) #0 {
  %2 = alloca i1, align 1
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %6 [
    i32 97, label %5
    i32 98, label %5
    i32 99, label %5
    i32 100, label %5
    i32 101, label %5
    i32 102, label %5
    i32 103, label %5
    i32 104, label %5
    i32 105, label %5
    i32 106, label %5
    i32 107, label %5
    i32 108, label %5
    i32 109, label %5
    i32 110, label %5
    i32 111, label %5
    i32 112, label %5
    i32 113, label %5
    i32 114, label %5
    i32 115, label %5
    i32 116, label %5
    i32 117, label %5
    i32 118, label %5
    i32 119, label %5
    i32 120, label %5
    i32 121, label %5
    i32 122, label %5
    i32 65, label %5
    i32 66, label %5
    i32 67, label %5
    i32 68, label %5
    i32 69, label %5
    i32 70, label %5
    i32 71, label %5
    i32 72, label %5
    i32 73, label %5
    i32 74, label %5
    i32 75, label %5
    i32 76, label %5
    i32 77, label %5
    i32 78, label %5
    i32 79, label %5
    i32 80, label %5
    i32 81, label %5
    i32 82, label %5
    i32 83, label %5
    i32 84, label %5
    i32 85, label %5
    i32 86, label %5
    i32 87, label %5
    i32 88, label %5
    i32 89, label %5
    i32 90, label %5
  ]

5:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  store i1 true, i1* %2, align 1
  br label %7

6:                                                ; preds = %1
  store i1 false, i1* %2, align 1
  br label %7

7:                                                ; preds = %6, %5
  %8 = load i1, i1* %2, align 1
  ret i1 %8
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @c_isdigit(i32 %0) #0 {
  %2 = alloca i1, align 1
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %6 [
    i32 48, label %5
    i32 49, label %5
    i32 50, label %5
    i32 51, label %5
    i32 52, label %5
    i32 53, label %5
    i32 54, label %5
    i32 55, label %5
    i32 56, label %5
    i32 57, label %5
  ]

5:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  store i1 true, i1* %2, align 1
  br label %7

6:                                                ; preds = %1
  store i1 false, i1* %2, align 1
  br label %7

7:                                                ; preds = %6, %5
  %8 = load i1, i1* %2, align 1
  ret i1 %8
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %9 [
    i32 65, label %5
    i32 66, label %5
    i32 67, label %5
    i32 68, label %5
    i32 69, label %5
    i32 70, label %5
    i32 71, label %5
    i32 72, label %5
    i32 73, label %5
    i32 74, label %5
    i32 75, label %5
    i32 76, label %5
    i32 77, label %5
    i32 78, label %5
    i32 79, label %5
    i32 80, label %5
    i32 81, label %5
    i32 82, label %5
    i32 83, label %5
    i32 84, label %5
    i32 85, label %5
    i32 86, label %5
    i32 87, label %5
    i32 88, label %5
    i32 89, label %5
    i32 90, label %5
  ]

5:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  %6 = load i32, i32* %3, align 4
  %7 = sub nsw i32 %6, 65
  %8 = add nsw i32 %7, 97
  store i32 %8, i32* %2, align 4
  br label %11

9:                                                ; preds = %1
  %10 = load i32, i32* %3, align 4
  store i32 %10, i32* %2, align 4
  br label %11

11:                                               ; preds = %9, %5
  %12 = load i32, i32* %2, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strncasecmp(i8* %0, i8* %1, i64 %2) #9 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i64 %2, i64* %7, align 8
  %12 = load i8*, i8** %5, align 8
  store i8* %12, i8** %8, align 8
  %13 = load i8*, i8** %6, align 8
  store i8* %13, i8** %9, align 8
  %14 = load i8*, i8** %8, align 8
  %15 = load i8*, i8** %9, align 8
  %16 = icmp eq i8* %14, %15
  br i1 %16, label %20, label %17

17:                                               ; preds = %3
  %18 = load i64, i64* %7, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %17, %3
  store i32 0, i32* %4, align 4
  br label %58

21:                                               ; preds = %17
  br label %22

22:                                               ; preds = %46, %21
  %23 = load i8*, i8** %8, align 8
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = call i32 @c_tolower(i32 %25)
  %27 = trunc i32 %26 to i8
  store i8 %27, i8* %10, align 1
  %28 = load i8*, i8** %9, align 8
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = call i32 @c_tolower(i32 %30)
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %11, align 1
  %33 = load i64, i64* %7, align 8
  %34 = add i64 %33, -1
  store i64 %34, i64* %7, align 8
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %40, label %36

36:                                               ; preds = %22
  %37 = load i8, i8* %10, align 1
  %38 = zext i8 %37 to i32
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %36, %22
  br label %52

41:                                               ; preds = %36
  %42 = load i8*, i8** %8, align 8
  %43 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %43, i8** %8, align 8
  %44 = load i8*, i8** %9, align 8
  %45 = getelementptr inbounds i8, i8* %44, i32 1
  store i8* %45, i8** %9, align 8
  br label %46

46:                                               ; preds = %41
  %47 = load i8, i8* %10, align 1
  %48 = zext i8 %47 to i32
  %49 = load i8, i8* %11, align 1
  %50 = zext i8 %49 to i32
  %51 = icmp eq i32 %48, %50
  br i1 %51, label %22, label %52, !llvm.loop !63

52:                                               ; preds = %46, %40
  %53 = load i8, i8* %10, align 1
  %54 = zext i8 %53 to i32
  %55 = load i8, i8* %11, align 1
  %56 = zext i8 %55 to i32
  %57 = sub nsw i32 %54, %56
  store i32 %57, i32* %4, align 4
  br label %58

58:                                               ; preds = %52, %20
  %59 = load i32, i32* %4, align 4
  ret i32 %59
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @canonicalize_filename_mode(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca %struct.hash_table*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i8, align 1
  %17 = alloca i64, align 8
  %18 = alloca i8*, align 8
  %19 = alloca %struct.stat, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  store i8* null, i8** %8, align 8
  store i64 0, i64* %12, align 8
  store %struct.hash_table* null, %struct.hash_table** %13, align 8
  %26 = load i32, i32* %5, align 4
  %27 = and i32 %26, -4
  store i32 %27, i32* %15, align 4
  %28 = load i32, i32* %15, align 4
  %29 = and i32 %28, 4
  %30 = icmp ne i32 %29, 0
  %31 = zext i1 %30 to i8
  store i8 %31, i8* %16, align 1
  %32 = load i32, i32* %5, align 4
  %33 = and i32 %32, 3
  store i32 %33, i32* %5, align 4
  %34 = load i32, i32* %5, align 4
  %35 = load i32, i32* %5, align 4
  %36 = sub i32 %35, 1
  %37 = and i32 %34, %36
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %2
  %40 = call i32* @__errno_location() #18
  store i32 22, i32* %40, align 4
  store i8* null, i8** %3, align 8
  br label %533

41:                                               ; preds = %2
  %42 = load i8*, i8** %4, align 8
  %43 = icmp eq i8* %42, null
  br i1 %43, label %44, label %46

44:                                               ; preds = %41
  %45 = call i32* @__errno_location() #18
  store i32 22, i32* %45, align 4
  store i8* null, i8** %3, align 8
  br label %533

46:                                               ; preds = %41
  %47 = load i8*, i8** %4, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 0
  %49 = load i8, i8* %48, align 1
  %50 = sext i8 %49 to i32
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %46
  %53 = call i32* @__errno_location() #18
  store i32 2, i32* %53, align 4
  store i8* null, i8** %3, align 8
  br label %533

54:                                               ; preds = %46
  store i64 0, i64* %17, align 8
  %55 = load i8*, i8** %4, align 8
  %56 = getelementptr inbounds i8, i8* %55, i64 0
  %57 = load i8, i8* %56, align 1
  %58 = sext i8 %57 to i32
  %59 = icmp eq i32 %58, 47
  br i1 %59, label %91, label %60

60:                                               ; preds = %54
  %61 = call i8* @xgetcwd()
  store i8* %61, i8** %6, align 8
  %62 = load i8*, i8** %6, align 8
  %63 = icmp ne i8* %62, null
  br i1 %63, label %65, label %64

64:                                               ; preds = %60
  store i8* null, i8** %3, align 8
  br label %533

65:                                               ; preds = %60
  %66 = load i8*, i8** %6, align 8
  %67 = call i8* @strchr(i8* %66, i32 0) #17
  store i8* %67, i8** %7, align 8
  %68 = load i8*, i8** %7, align 8
  %69 = load i8*, i8** %6, align 8
  %70 = ptrtoint i8* %68 to i64
  %71 = ptrtoint i8* %69 to i64
  %72 = sub i64 %70, %71
  %73 = icmp slt i64 %72, 4096
  br i1 %73, label %74, label %87

74:                                               ; preds = %65
  %75 = load i8*, i8** %6, align 8
  %76 = call i8* @xrealloc(i8* %75, i64 4096)
  store i8* %76, i8** %18, align 8
  %77 = load i8*, i8** %18, align 8
  %78 = load i8*, i8** %7, align 8
  %79 = load i8*, i8** %6, align 8
  %80 = ptrtoint i8* %78 to i64
  %81 = ptrtoint i8* %79 to i64
  %82 = sub i64 %80, %81
  %83 = getelementptr inbounds i8, i8* %77, i64 %82
  store i8* %83, i8** %7, align 8
  %84 = load i8*, i8** %18, align 8
  store i8* %84, i8** %6, align 8
  %85 = load i8*, i8** %6, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 4096
  store i8* %86, i8** %11, align 8
  br label %89

87:                                               ; preds = %65
  %88 = load i8*, i8** %7, align 8
  store i8* %88, i8** %11, align 8
  br label %89

89:                                               ; preds = %87, %74
  %90 = load i8*, i8** %4, align 8
  store i8* %90, i8** %9, align 8
  store i64 0, i64* %17, align 8
  br label %111

91:                                               ; preds = %54
  %92 = call noalias i8* @xmalloc(i64 4096)
  store i8* %92, i8** %6, align 8
  %93 = load i8*, i8** %6, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 4096
  store i8* %94, i8** %11, align 8
  %95 = load i8*, i8** %6, align 8
  store i8* %95, i8** %7, align 8
  %96 = load i64, i64* %17, align 8
  %97 = icmp ne i64 %96, 0
  br i1 %97, label %98, label %105

98:                                               ; preds = %91
  %99 = load i8*, i8** %6, align 8
  %100 = load i8*, i8** %4, align 8
  %101 = load i64, i64* %17, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %99, i8* align 1 %100, i64 %101, i1 false)
  %102 = load i64, i64* %17, align 8
  %103 = load i8*, i8** %7, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 %102
  store i8* %104, i8** %7, align 8
  br label %105

105:                                              ; preds = %98, %91
  %106 = load i8*, i8** %7, align 8
  %107 = getelementptr inbounds i8, i8* %106, i32 1
  store i8* %107, i8** %7, align 8
  store i8 47, i8* %106, align 1
  %108 = load i8*, i8** %4, align 8
  %109 = load i64, i64* %17, align 8
  %110 = getelementptr inbounds i8, i8* %108, i64 %109
  store i8* %110, i8** %9, align 8
  br label %111

111:                                              ; preds = %105, %89
  br label %112

112:                                              ; preds = %482, %111
  %113 = load i8*, i8** %9, align 8
  %114 = load i8, i8* %113, align 1
  %115 = icmp ne i8 %114, 0
  br i1 %115, label %116, label %484

116:                                              ; preds = %112
  br label %117

117:                                              ; preds = %122, %116
  %118 = load i8*, i8** %9, align 8
  %119 = load i8, i8* %118, align 1
  %120 = sext i8 %119 to i32
  %121 = icmp eq i32 %120, 47
  br i1 %121, label %122, label %125

122:                                              ; preds = %117
  %123 = load i8*, i8** %9, align 8
  %124 = getelementptr inbounds i8, i8* %123, i32 1
  store i8* %124, i8** %9, align 8
  br label %117, !llvm.loop !64

125:                                              ; preds = %117
  %126 = load i8*, i8** %9, align 8
  store i8* %126, i8** %10, align 8
  br label %127

127:                                              ; preds = %141, %125
  %128 = load i8*, i8** %10, align 8
  %129 = load i8, i8* %128, align 1
  %130 = sext i8 %129 to i32
  %131 = icmp ne i32 %130, 0
  br i1 %131, label %132, label %138

132:                                              ; preds = %127
  %133 = load i8*, i8** %10, align 8
  %134 = load i8, i8* %133, align 1
  %135 = sext i8 %134 to i32
  %136 = icmp eq i32 %135, 47
  %137 = xor i1 %136, true
  br label %138

138:                                              ; preds = %132, %127
  %139 = phi i1 [ false, %127 ], [ %137, %132 ]
  br i1 %139, label %140, label %144

140:                                              ; preds = %138
  br label %141

141:                                              ; preds = %140
  %142 = load i8*, i8** %10, align 8
  %143 = getelementptr inbounds i8, i8* %142, i32 1
  store i8* %143, i8** %10, align 8
  br label %127, !llvm.loop !65

144:                                              ; preds = %138
  %145 = load i8*, i8** %10, align 8
  %146 = load i8*, i8** %9, align 8
  %147 = ptrtoint i8* %145 to i64
  %148 = ptrtoint i8* %146 to i64
  %149 = sub i64 %147, %148
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %152

151:                                              ; preds = %144
  br label %484

152:                                              ; preds = %144
  %153 = load i8*, i8** %10, align 8
  %154 = load i8*, i8** %9, align 8
  %155 = ptrtoint i8* %153 to i64
  %156 = ptrtoint i8* %154 to i64
  %157 = sub i64 %155, %156
  %158 = icmp eq i64 %157, 1
  br i1 %158, label %159, label %166

159:                                              ; preds = %152
  %160 = load i8*, i8** %9, align 8
  %161 = getelementptr inbounds i8, i8* %160, i64 0
  %162 = load i8, i8* %161, align 1
  %163 = sext i8 %162 to i32
  %164 = icmp eq i32 %163, 46
  br i1 %164, label %165, label %166

165:                                              ; preds = %159
  br label %480

166:                                              ; preds = %159, %152
  %167 = load i8*, i8** %10, align 8
  %168 = load i8*, i8** %9, align 8
  %169 = ptrtoint i8* %167 to i64
  %170 = ptrtoint i8* %168 to i64
  %171 = sub i64 %169, %170
  %172 = icmp eq i64 %171, 2
  br i1 %172, label %173, label %214

173:                                              ; preds = %166
  %174 = load i8*, i8** %9, align 8
  %175 = getelementptr inbounds i8, i8* %174, i64 0
  %176 = load i8, i8* %175, align 1
  %177 = sext i8 %176 to i32
  %178 = icmp eq i32 %177, 46
  br i1 %178, label %179, label %214

179:                                              ; preds = %173
  %180 = load i8*, i8** %9, align 8
  %181 = getelementptr inbounds i8, i8* %180, i64 1
  %182 = load i8, i8* %181, align 1
  %183 = sext i8 %182 to i32
  %184 = icmp eq i32 %183, 46
  br i1 %184, label %185, label %214

185:                                              ; preds = %179
  %186 = load i8*, i8** %7, align 8
  %187 = load i8*, i8** %6, align 8
  %188 = load i64, i64* %17, align 8
  %189 = getelementptr inbounds i8, i8* %187, i64 %188
  %190 = getelementptr inbounds i8, i8* %189, i64 1
  %191 = icmp ugt i8* %186, %190
  br i1 %191, label %192, label %213

192:                                              ; preds = %185
  %193 = load i8*, i8** %7, align 8
  %194 = getelementptr inbounds i8, i8* %193, i32 -1
  store i8* %194, i8** %7, align 8
  br label %195

195:                                              ; preds = %209, %192
  %196 = load i8*, i8** %7, align 8
  %197 = load i8*, i8** %6, align 8
  %198 = icmp ugt i8* %196, %197
  br i1 %198, label %199, label %206

199:                                              ; preds = %195
  %200 = load i8*, i8** %7, align 8
  %201 = getelementptr inbounds i8, i8* %200, i64 -1
  %202 = load i8, i8* %201, align 1
  %203 = sext i8 %202 to i32
  %204 = icmp eq i32 %203, 47
  %205 = xor i1 %204, true
  br label %206

206:                                              ; preds = %199, %195
  %207 = phi i1 [ false, %195 ], [ %205, %199 ]
  br i1 %207, label %208, label %212

208:                                              ; preds = %206
  br label %209

209:                                              ; preds = %208
  %210 = load i8*, i8** %7, align 8
  %211 = getelementptr inbounds i8, i8* %210, i32 -1
  store i8* %211, i8** %7, align 8
  br label %195, !llvm.loop !66

212:                                              ; preds = %206
  br label %213

213:                                              ; preds = %212, %185
  br label %479

214:                                              ; preds = %179, %173, %166
  %215 = load i8*, i8** %7, align 8
  %216 = getelementptr inbounds i8, i8* %215, i64 -1
  %217 = load i8, i8* %216, align 1
  %218 = sext i8 %217 to i32
  %219 = icmp eq i32 %218, 47
  br i1 %219, label %223, label %220

220:                                              ; preds = %214
  %221 = load i8*, i8** %7, align 8
  %222 = getelementptr inbounds i8, i8* %221, i32 1
  store i8* %222, i8** %7, align 8
  store i8 47, i8* %221, align 1
  br label %223

223:                                              ; preds = %220, %214
  %224 = load i8*, i8** %7, align 8
  %225 = load i8*, i8** %10, align 8
  %226 = load i8*, i8** %9, align 8
  %227 = ptrtoint i8* %225 to i64
  %228 = ptrtoint i8* %226 to i64
  %229 = sub i64 %227, %228
  %230 = getelementptr inbounds i8, i8* %224, i64 %229
  %231 = load i8*, i8** %11, align 8
  %232 = icmp uge i8* %230, %231
  br i1 %232, label %233, label %273

233:                                              ; preds = %223
  %234 = load i8*, i8** %7, align 8
  %235 = load i8*, i8** %6, align 8
  %236 = ptrtoint i8* %234 to i64
  %237 = ptrtoint i8* %235 to i64
  %238 = sub i64 %236, %237
  store i64 %238, i64* %20, align 8
  %239 = load i8*, i8** %11, align 8
  %240 = load i8*, i8** %6, align 8
  %241 = ptrtoint i8* %239 to i64
  %242 = ptrtoint i8* %240 to i64
  %243 = sub i64 %241, %242
  store i64 %243, i64* %21, align 8
  %244 = load i8*, i8** %10, align 8
  %245 = load i8*, i8** %9, align 8
  %246 = ptrtoint i8* %244 to i64
  %247 = ptrtoint i8* %245 to i64
  %248 = sub i64 %246, %247
  %249 = add nsw i64 %248, 1
  %250 = icmp sgt i64 %249, 4096
  br i1 %250, label %251, label %260

251:                                              ; preds = %233
  %252 = load i8*, i8** %10, align 8
  %253 = load i8*, i8** %9, align 8
  %254 = ptrtoint i8* %252 to i64
  %255 = ptrtoint i8* %253 to i64
  %256 = sub i64 %254, %255
  %257 = add nsw i64 %256, 1
  %258 = load i64, i64* %21, align 8
  %259 = add i64 %258, %257
  store i64 %259, i64* %21, align 8
  br label %263

260:                                              ; preds = %233
  %261 = load i64, i64* %21, align 8
  %262 = add i64 %261, 4096
  store i64 %262, i64* %21, align 8
  br label %263

263:                                              ; preds = %260, %251
  %264 = load i8*, i8** %6, align 8
  %265 = load i64, i64* %21, align 8
  %266 = call i8* @xrealloc(i8* %264, i64 %265)
  store i8* %266, i8** %6, align 8
  %267 = load i8*, i8** %6, align 8
  %268 = load i64, i64* %21, align 8
  %269 = getelementptr inbounds i8, i8* %267, i64 %268
  store i8* %269, i8** %11, align 8
  %270 = load i8*, i8** %6, align 8
  %271 = load i64, i64* %20, align 8
  %272 = getelementptr inbounds i8, i8* %270, i64 %271
  store i8* %272, i8** %7, align 8
  br label %273

273:                                              ; preds = %263, %223
  %274 = load i8*, i8** %7, align 8
  %275 = load i8*, i8** %9, align 8
  %276 = load i8*, i8** %10, align 8
  %277 = load i8*, i8** %9, align 8
  %278 = ptrtoint i8* %276 to i64
  %279 = ptrtoint i8* %277 to i64
  %280 = sub i64 %278, %279
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %274, i8* align 1 %275, i64 %280, i1 false)
  store i8* %274, i8** %7, align 8
  %281 = load i8*, i8** %10, align 8
  %282 = load i8*, i8** %9, align 8
  %283 = ptrtoint i8* %281 to i64
  %284 = ptrtoint i8* %282 to i64
  %285 = sub i64 %283, %284
  %286 = load i8*, i8** %7, align 8
  %287 = getelementptr inbounds i8, i8* %286, i64 %285
  store i8* %287, i8** %7, align 8
  %288 = load i8*, i8** %7, align 8
  store i8 0, i8* %288, align 1
  %289 = load i8, i8* %16, align 1
  %290 = trunc i8 %289 to i1
  br i1 %290, label %291, label %296

291:                                              ; preds = %273
  %292 = load i32, i32* %5, align 4
  %293 = icmp eq i32 %292, 2
  br i1 %293, label %294, label %296

294:                                              ; preds = %291
  %295 = getelementptr inbounds %struct.stat, %struct.stat* %19, i32 0, i32 3
  store i32 0, i32* %295, align 8
  br label %333

296:                                              ; preds = %291, %273
  %297 = load i8, i8* %16, align 1
  %298 = trunc i8 %297 to i1
  br i1 %298, label %299, label %302

299:                                              ; preds = %296
  %300 = load i8*, i8** %6, align 8
  %301 = call i32 @stat(i8* %300, %struct.stat* %19) #14
  br label %305

302:                                              ; preds = %296
  %303 = load i8*, i8** %6, align 8
  %304 = call i32 @lstat(i8* %303, %struct.stat* %19) #14
  br label %305

305:                                              ; preds = %302, %299
  %306 = phi i32 [ %301, %299 ], [ %304, %302 ]
  %307 = icmp ne i32 %306, 0
  br i1 %307, label %308, label %332

308:                                              ; preds = %305
  %309 = call i32* @__errno_location() #18
  %310 = load i32, i32* %309, align 4
  store i32 %310, i32* %14, align 4
  %311 = load i32, i32* %5, align 4
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %313, label %314

313:                                              ; preds = %308
  br label %523

314:                                              ; preds = %308
  %315 = load i32, i32* %5, align 4
  %316 = icmp eq i32 %315, 1
  br i1 %316, label %317, label %330

317:                                              ; preds = %314
  %318 = load i8*, i8** %10, align 8
  %319 = load i8*, i8** %10, align 8
  %320 = call i64 @strspn(i8* %319, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.270, i64 0, i64 0)) #17
  %321 = getelementptr inbounds i8, i8* %318, i64 %320
  %322 = load i8, i8* %321, align 1
  %323 = sext i8 %322 to i32
  %324 = icmp ne i32 %323, 0
  br i1 %324, label %328, label %325

325:                                              ; preds = %317
  %326 = load i32, i32* %14, align 4
  %327 = icmp ne i32 %326, 2
  br i1 %327, label %328, label %329

328:                                              ; preds = %325, %317
  br label %523

329:                                              ; preds = %325
  br label %482

330:                                              ; preds = %314
  %331 = getelementptr inbounds %struct.stat, %struct.stat* %19, i32 0, i32 3
  store i32 0, i32* %331, align 8
  br label %332

332:                                              ; preds = %330, %305
  br label %333

333:                                              ; preds = %332, %294
  %334 = getelementptr inbounds %struct.stat, %struct.stat* %19, i32 0, i32 3
  %335 = load i32, i32* %334, align 8
  %336 = and i32 %335, 61440
  %337 = icmp eq i32 %336, 40960
  br i1 %337, label %338, label %463

338:                                              ; preds = %333
  %339 = load i8*, i8** %4, align 8
  %340 = call zeroext i1 @seen_triple(%struct.hash_table** %13, i8* %339, %struct.stat* %19)
  br i1 %340, label %341, label %346

341:                                              ; preds = %338
  %342 = load i32, i32* %5, align 4
  %343 = icmp eq i32 %342, 2
  br i1 %343, label %344, label %345

344:                                              ; preds = %341
  br label %482

345:                                              ; preds = %341
  store i32 40, i32* %14, align 4
  br label %523

346:                                              ; preds = %338
  %347 = load i8*, i8** %6, align 8
  %348 = getelementptr inbounds %struct.stat, %struct.stat* %19, i32 0, i32 8
  %349 = load i64, i64* %348, align 8
  %350 = call i8* @areadlink_with_size(i8* %347, i64 %349)
  store i8* %350, i8** %22, align 8
  %351 = load i8*, i8** %22, align 8
  %352 = icmp ne i8* %351, null
  br i1 %352, label %364, label %353

353:                                              ; preds = %346
  %354 = load i32, i32* %5, align 4
  %355 = icmp eq i32 %354, 2
  br i1 %355, label %356, label %361

356:                                              ; preds = %353
  %357 = call i32* @__errno_location() #18
  %358 = load i32, i32* %357, align 4
  %359 = icmp ne i32 %358, 12
  br i1 %359, label %360, label %361

360:                                              ; preds = %356
  br label %482

361:                                              ; preds = %356, %353
  %362 = call i32* @__errno_location() #18
  %363 = load i32, i32* %362, align 4
  store i32 %363, i32* %14, align 4
  br label %523

364:                                              ; preds = %346
  %365 = load i8*, i8** %22, align 8
  %366 = call i64 @strlen(i8* %365) #17
  store i64 %366, i64* %23, align 8
  %367 = load i8*, i8** %10, align 8
  %368 = call i64 @strlen(i8* %367) #17
  store i64 %368, i64* %24, align 8
  %369 = load i64, i64* %12, align 8
  %370 = icmp ne i64 %369, 0
  br i1 %370, label %387, label %371

371:                                              ; preds = %364
  %372 = load i64, i64* %23, align 8
  %373 = load i64, i64* %24, align 8
  %374 = add i64 %372, %373
  %375 = add i64 %374, 1
  %376 = icmp ugt i64 %375, 4096
  br i1 %376, label %377, label %382

377:                                              ; preds = %371
  %378 = load i64, i64* %23, align 8
  %379 = load i64, i64* %24, align 8
  %380 = add i64 %378, %379
  %381 = add i64 %380, 1
  br label %383

382:                                              ; preds = %371
  br label %383

383:                                              ; preds = %382, %377
  %384 = phi i64 [ %381, %377 ], [ 4096, %382 ]
  store i64 %384, i64* %12, align 8
  %385 = load i64, i64* %12, align 8
  %386 = call noalias i8* @xmalloc(i64 %385)
  store i8* %386, i8** %8, align 8
  br label %403

387:                                              ; preds = %364
  %388 = load i64, i64* %23, align 8
  %389 = load i64, i64* %24, align 8
  %390 = add i64 %388, %389
  %391 = add i64 %390, 1
  %392 = load i64, i64* %12, align 8
  %393 = icmp ugt i64 %391, %392
  br i1 %393, label %394, label %402

394:                                              ; preds = %387
  %395 = load i64, i64* %23, align 8
  %396 = load i64, i64* %24, align 8
  %397 = add i64 %395, %396
  %398 = add i64 %397, 1
  store i64 %398, i64* %12, align 8
  %399 = load i8*, i8** %8, align 8
  %400 = load i64, i64* %12, align 8
  %401 = call i8* @xrealloc(i8* %399, i64 %400)
  store i8* %401, i8** %8, align 8
  br label %402

402:                                              ; preds = %394, %387
  br label %403

403:                                              ; preds = %402, %383
  %404 = load i8*, i8** %8, align 8
  %405 = load i64, i64* %23, align 8
  %406 = getelementptr inbounds i8, i8* %404, i64 %405
  %407 = load i8*, i8** %10, align 8
  %408 = load i64, i64* %24, align 8
  %409 = add i64 %408, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %406, i8* align 1 %407, i64 %409, i1 false)
  %410 = load i8*, i8** %8, align 8
  %411 = load i8*, i8** %22, align 8
  %412 = load i64, i64* %23, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %410, i8* align 1 %411, i64 %412, i1 false)
  store i8* %410, i8** %10, align 8
  store i8* %410, i8** %4, align 8
  %413 = load i8*, i8** %22, align 8
  %414 = getelementptr inbounds i8, i8* %413, i64 0
  %415 = load i8, i8* %414, align 1
  %416 = sext i8 %415 to i32
  %417 = icmp eq i32 %416, 47
  br i1 %417, label %418, label %432

418:                                              ; preds = %403
  store i64 0, i64* %25, align 8
  %419 = load i64, i64* %25, align 8
  %420 = icmp ne i64 %419, 0
  br i1 %420, label %421, label %425

421:                                              ; preds = %418
  %422 = load i8*, i8** %6, align 8
  %423 = load i8*, i8** %22, align 8
  %424 = load i64, i64* %25, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %422, i8* align 1 %423, i64 %424, i1 false)
  br label %425

425:                                              ; preds = %421, %418
  %426 = load i8*, i8** %6, align 8
  %427 = load i64, i64* %25, align 8
  %428 = getelementptr inbounds i8, i8* %426, i64 %427
  store i8* %428, i8** %7, align 8
  %429 = load i8*, i8** %7, align 8
  %430 = getelementptr inbounds i8, i8* %429, i32 1
  store i8* %430, i8** %7, align 8
  store i8 47, i8* %429, align 1
  %431 = load i64, i64* %25, align 8
  store i64 %431, i64* %17, align 8
  br label %461

432:                                              ; preds = %403
  %433 = load i8*, i8** %7, align 8
  %434 = load i8*, i8** %6, align 8
  %435 = load i64, i64* %17, align 8
  %436 = getelementptr inbounds i8, i8* %434, i64 %435
  %437 = getelementptr inbounds i8, i8* %436, i64 1
  %438 = icmp ugt i8* %433, %437
  br i1 %438, label %439, label %460

439:                                              ; preds = %432
  %440 = load i8*, i8** %7, align 8
  %441 = getelementptr inbounds i8, i8* %440, i32 -1
  store i8* %441, i8** %7, align 8
  br label %442

442:                                              ; preds = %456, %439
  %443 = load i8*, i8** %7, align 8
  %444 = load i8*, i8** %6, align 8
  %445 = icmp ugt i8* %443, %444
  br i1 %445, label %446, label %453

446:                                              ; preds = %442
  %447 = load i8*, i8** %7, align 8
  %448 = getelementptr inbounds i8, i8* %447, i64 -1
  %449 = load i8, i8* %448, align 1
  %450 = sext i8 %449 to i32
  %451 = icmp eq i32 %450, 47
  %452 = xor i1 %451, true
  br label %453

453:                                              ; preds = %446, %442
  %454 = phi i1 [ false, %442 ], [ %452, %446 ]
  br i1 %454, label %455, label %459

455:                                              ; preds = %453
  br label %456

456:                                              ; preds = %455
  %457 = load i8*, i8** %7, align 8
  %458 = getelementptr inbounds i8, i8* %457, i32 -1
  store i8* %458, i8** %7, align 8
  br label %442, !llvm.loop !67

459:                                              ; preds = %453
  br label %460

460:                                              ; preds = %459, %432
  br label %461

461:                                              ; preds = %460, %425
  %462 = load i8*, i8** %22, align 8
  call void @free(i8* %462) #14
  br label %478

463:                                              ; preds = %333
  %464 = getelementptr inbounds %struct.stat, %struct.stat* %19, i32 0, i32 3
  %465 = load i32, i32* %464, align 8
  %466 = and i32 %465, 61440
  %467 = icmp eq i32 %466, 16384
  br i1 %467, label %477, label %468

468:                                              ; preds = %463
  %469 = load i8*, i8** %10, align 8
  %470 = load i8, i8* %469, align 1
  %471 = sext i8 %470 to i32
  %472 = icmp ne i32 %471, 0
  br i1 %472, label %473, label %477

473:                                              ; preds = %468
  %474 = load i32, i32* %5, align 4
  %475 = icmp ne i32 %474, 2
  br i1 %475, label %476, label %477

476:                                              ; preds = %473
  store i32 20, i32* %14, align 4
  br label %523

477:                                              ; preds = %473, %468, %463
  br label %478

478:                                              ; preds = %477, %461
  br label %479

479:                                              ; preds = %478, %213
  br label %480

480:                                              ; preds = %479, %165
  br label %481

481:                                              ; preds = %480
  br label %482

482:                                              ; preds = %481, %360, %344, %329
  %483 = load i8*, i8** %10, align 8
  store i8* %483, i8** %9, align 8
  br label %112, !llvm.loop !68

484:                                              ; preds = %151, %112
  %485 = load i8*, i8** %7, align 8
  %486 = load i8*, i8** %6, align 8
  %487 = load i64, i64* %17, align 8
  %488 = getelementptr inbounds i8, i8* %486, i64 %487
  %489 = getelementptr inbounds i8, i8* %488, i64 1
  %490 = icmp ugt i8* %485, %489
  br i1 %490, label %491, label %500

491:                                              ; preds = %484
  %492 = load i8*, i8** %7, align 8
  %493 = getelementptr inbounds i8, i8* %492, i64 -1
  %494 = load i8, i8* %493, align 1
  %495 = sext i8 %494 to i32
  %496 = icmp eq i32 %495, 47
  br i1 %496, label %497, label %500

497:                                              ; preds = %491
  %498 = load i8*, i8** %7, align 8
  %499 = getelementptr inbounds i8, i8* %498, i32 -1
  store i8* %499, i8** %7, align 8
  br label %500

500:                                              ; preds = %497, %491, %484
  %501 = load i8*, i8** %7, align 8
  store i8 0, i8* %501, align 1
  %502 = load i8*, i8** %11, align 8
  %503 = load i8*, i8** %7, align 8
  %504 = getelementptr inbounds i8, i8* %503, i64 1
  %505 = icmp ne i8* %502, %504
  br i1 %505, label %506, label %515

506:                                              ; preds = %500
  %507 = load i8*, i8** %6, align 8
  %508 = load i8*, i8** %7, align 8
  %509 = load i8*, i8** %6, align 8
  %510 = ptrtoint i8* %508 to i64
  %511 = ptrtoint i8* %509 to i64
  %512 = sub i64 %510, %511
  %513 = add nsw i64 %512, 1
  %514 = call i8* @xrealloc(i8* %507, i64 %513)
  store i8* %514, i8** %6, align 8
  br label %515

515:                                              ; preds = %506, %500
  %516 = load i8*, i8** %8, align 8
  call void @free(i8* %516) #14
  %517 = load %struct.hash_table*, %struct.hash_table** %13, align 8
  %518 = icmp ne %struct.hash_table* %517, null
  br i1 %518, label %519, label %521

519:                                              ; preds = %515
  %520 = load %struct.hash_table*, %struct.hash_table** %13, align 8
  call void @hash_free(%struct.hash_table* %520)
  br label %521

521:                                              ; preds = %519, %515
  %522 = load i8*, i8** %6, align 8
  store i8* %522, i8** %3, align 8
  br label %533

523:                                              ; preds = %476, %361, %345, %328, %313
  %524 = load i8*, i8** %8, align 8
  call void @free(i8* %524) #14
  %525 = load i8*, i8** %6, align 8
  call void @free(i8* %525) #14
  %526 = load %struct.hash_table*, %struct.hash_table** %13, align 8
  %527 = icmp ne %struct.hash_table* %526, null
  br i1 %527, label %528, label %530

528:                                              ; preds = %523
  %529 = load %struct.hash_table*, %struct.hash_table** %13, align 8
  call void @hash_free(%struct.hash_table* %529)
  br label %530

530:                                              ; preds = %528, %523
  %531 = load i32, i32* %14, align 4
  %532 = call i32* @__errno_location() #18
  store i32 %531, i32* %532, align 4
  store i8* null, i8** %3, align 8
  br label %533

533:                                              ; preds = %530, %521, %64, %52, %44, %39
  %534 = load i8*, i8** %3, align 8
  ret i8* %534
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strspn(i8*, i8*) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @seen_triple(%struct.hash_table** %0, i8* %1, %struct.stat* %2) #0 {
  %4 = alloca i1, align 1
  %5 = alloca %struct.hash_table**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %struct.stat*, align 8
  %8 = alloca i64, align 8
  store %struct.hash_table** %0, %struct.hash_table*** %5, align 8
  store i8* %1, i8** %6, align 8
  store %struct.stat* %2, %struct.stat** %7, align 8
  %9 = load %struct.hash_table**, %struct.hash_table*** %5, align 8
  %10 = load %struct.hash_table*, %struct.hash_table** %9, align 8
  %11 = icmp eq %struct.hash_table* %10, null
  br i1 %11, label %12, label %21

12:                                               ; preds = %3
  store i64 7, i64* %8, align 8
  %13 = load i64, i64* %8, align 8
  %14 = call %struct.hash_table* @hash_initialize(i64 %13, %struct.hash_tuning* null, i64 (i8*, i64)* @triple_hash, i1 (i8*, i8*)* @triple_compare_ino_str, void (i8*)* @triple_free)
  %15 = load %struct.hash_table**, %struct.hash_table*** %5, align 8
  store %struct.hash_table* %14, %struct.hash_table** %15, align 8
  %16 = load %struct.hash_table**, %struct.hash_table*** %5, align 8
  %17 = load %struct.hash_table*, %struct.hash_table** %16, align 8
  %18 = icmp eq %struct.hash_table* %17, null
  br i1 %18, label %19, label %20

19:                                               ; preds = %12
  call void @xalloc_die() #15
  unreachable

20:                                               ; preds = %12
  br label %21

21:                                               ; preds = %20, %3
  %22 = load %struct.hash_table**, %struct.hash_table*** %5, align 8
  %23 = load %struct.hash_table*, %struct.hash_table** %22, align 8
  %24 = load i8*, i8** %6, align 8
  %25 = load %struct.stat*, %struct.stat** %7, align 8
  %26 = call zeroext i1 @seen_file(%struct.hash_table* %23, i8* %24, %struct.stat* %25)
  br i1 %26, label %27, label %28

27:                                               ; preds = %21
  store i1 true, i1* %4, align 1
  br label %33

28:                                               ; preds = %21
  %29 = load %struct.hash_table**, %struct.hash_table*** %5, align 8
  %30 = load %struct.hash_table*, %struct.hash_table** %29, align 8
  %31 = load i8*, i8** %6, align 8
  %32 = load %struct.stat*, %struct.stat** %7, align 8
  call void @record_file(%struct.hash_table* %30, i8* %31, %struct.stat* %32)
  store i1 false, i1* %4, align 1
  br label %33

33:                                               ; preds = %28, %27
  %34 = load i1, i1* %4, align 1
  ret i1 %34
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #0 {
  %1 = alloca i8*, align 8
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %3 = call i32 @close_stream(%struct._IO_FILE* %2)
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %5, label %28

5:                                                ; preds = %0
  %6 = load i8, i8* @ignore_EPIPE, align 1
  %7 = trunc i8 %6 to i1
  br i1 %7, label %8, label %12

8:                                                ; preds = %5
  %9 = call i32* @__errno_location() #18
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 32
  br i1 %11, label %28, label %12

12:                                               ; preds = %8, %5
  %13 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.273, i64 0, i64 0)) #14
  store i8* %13, i8** %1, align 8
  %14 = load i8*, i8** @file_name, align 8
  %15 = icmp ne i8* %14, null
  br i1 %15, label %16, label %22

16:                                               ; preds = %12
  %17 = call i32* @__errno_location() #18
  %18 = load i32, i32* %17, align 4
  %19 = load i8*, i8** @file_name, align 8
  %20 = call i8* @quotearg_colon(i8* %19)
  %21 = load i8*, i8** %1, align 8
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %18, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.274, i64 0, i64 0), i8* %20, i8* %21)
  br label %26

22:                                               ; preds = %12
  %23 = call i32* @__errno_location() #18
  %24 = load i32, i32* %23, align 4
  %25 = load i8*, i8** %1, align 8
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.275, i64 0, i64 0), i8* %25)
  br label %26

26:                                               ; preds = %22, %16
  %27 = load volatile i32, i32* @exit_failure, align 4
  call void @_exit(i32 %27) #15
  unreachable

28:                                               ; preds = %8, %0
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %30 = call i32 @close_stream(%struct._IO_FILE* %29)
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %28
  %33 = load volatile i32, i32* @exit_failure, align 4
  call void @_exit(i32 %33) #15
  unreachable

34:                                               ; preds = %28
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #11

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i64 @dir_len(i8* %0) #9 {
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i8* %0, i8** %2, align 8
  store i64 0, i64* %3, align 8
  %5 = load i64, i64* %3, align 8
  %6 = icmp ne i64 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  br label %16

8:                                                ; preds = %1
  %9 = load i8*, i8** %2, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 0
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = icmp eq i32 %12, 47
  %14 = zext i1 %13 to i64
  %15 = select i1 %13, i32 1, i32 0
  br label %16

16:                                               ; preds = %8, %7
  %17 = phi i32 [ 0, %7 ], [ %15, %8 ]
  %18 = sext i32 %17 to i64
  %19 = load i64, i64* %3, align 8
  %20 = add i64 %19, %18
  store i64 %20, i64* %3, align 8
  %21 = load i8*, i8** %2, align 8
  %22 = call i8* @last_component(i8* %21) #17
  %23 = load i8*, i8** %2, align 8
  %24 = ptrtoint i8* %22 to i64
  %25 = ptrtoint i8* %23 to i64
  %26 = sub i64 %24, %25
  store i64 %26, i64* %4, align 8
  br label %27

27:                                               ; preds = %41, %16
  %28 = load i64, i64* %3, align 8
  %29 = load i64, i64* %4, align 8
  %30 = icmp ult i64 %28, %29
  br i1 %30, label %31, label %44

31:                                               ; preds = %27
  %32 = load i8*, i8** %2, align 8
  %33 = load i64, i64* %4, align 8
  %34 = sub i64 %33, 1
  %35 = getelementptr inbounds i8, i8* %32, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = sext i8 %36 to i32
  %38 = icmp eq i32 %37, 47
  br i1 %38, label %40, label %39

39:                                               ; preds = %31
  br label %44

40:                                               ; preds = %31
  br label %41

41:                                               ; preds = %40
  %42 = load i64, i64* %4, align 8
  %43 = add i64 %42, -1
  store i64 %43, i64* %4, align 8
  br label %27, !llvm.loop !69

44:                                               ; preds = %39, %27
  %45 = load i64, i64* %4, align 8
  ret i64 %45
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i8* @last_component(i8* %0) #9 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8, align 1
  store i8* %0, i8** %2, align 8
  %6 = load i8*, i8** %2, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 0
  store i8* %7, i8** %3, align 8
  store i8 0, i8* %5, align 1
  br label %8

8:                                                ; preds = %13, %1
  %9 = load i8*, i8** %3, align 8
  %10 = load i8, i8* %9, align 1
  %11 = sext i8 %10 to i32
  %12 = icmp eq i32 %11, 47
  br i1 %12, label %13, label %16

13:                                               ; preds = %8
  %14 = load i8*, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i32 1
  store i8* %15, i8** %3, align 8
  br label %8, !llvm.loop !70

16:                                               ; preds = %8
  %17 = load i8*, i8** %3, align 8
  store i8* %17, i8** %4, align 8
  br label %18

18:                                               ; preds = %35, %16
  %19 = load i8*, i8** %4, align 8
  %20 = load i8, i8* %19, align 1
  %21 = icmp ne i8 %20, 0
  br i1 %21, label %22, label %38

22:                                               ; preds = %18
  %23 = load i8*, i8** %4, align 8
  %24 = load i8, i8* %23, align 1
  %25 = sext i8 %24 to i32
  %26 = icmp eq i32 %25, 47
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  store i8 1, i8* %5, align 1
  br label %34

28:                                               ; preds = %22
  %29 = load i8, i8* %5, align 1
  %30 = trunc i8 %29 to i1
  br i1 %30, label %31, label %33

31:                                               ; preds = %28
  %32 = load i8*, i8** %4, align 8
  store i8* %32, i8** %3, align 8
  store i8 0, i8* %5, align 1
  br label %33

33:                                               ; preds = %31, %28
  br label %34

34:                                               ; preds = %33, %27
  br label %35

35:                                               ; preds = %34
  %36 = load i8*, i8** %4, align 8
  %37 = getelementptr inbounds i8, i8* %36, i32 1
  store i8* %37, i8** %4, align 8
  br label %18, !llvm.loop !71

38:                                               ; preds = %18
  %39 = load i8*, i8** %3, align 8
  ret i8* %39
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i64 @base_len(i8* %0) #9 {
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i8* %0, i8** %2, align 8
  store i64 0, i64* %4, align 8
  %5 = load i8*, i8** %2, align 8
  %6 = call i64 @strlen(i8* %5) #17
  store i64 %6, i64* %3, align 8
  br label %7

7:                                                ; preds = %21, %1
  %8 = load i64, i64* %3, align 8
  %9 = icmp ult i64 1, %8
  br i1 %9, label %10, label %18

10:                                               ; preds = %7
  %11 = load i8*, i8** %2, align 8
  %12 = load i64, i64* %3, align 8
  %13 = sub i64 %12, 1
  %14 = getelementptr inbounds i8, i8* %11, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = sext i8 %15 to i32
  %17 = icmp eq i32 %16, 47
  br label %18

18:                                               ; preds = %10, %7
  %19 = phi i1 [ false, %7 ], [ %17, %10 ]
  br i1 %19, label %20, label %24

20:                                               ; preds = %18
  br label %21

21:                                               ; preds = %20
  %22 = load i64, i64* %3, align 8
  %23 = add i64 %22, -1
  store i64 %23, i64* %3, align 8
  br label %7, !llvm.loop !72

24:                                               ; preds = %18
  %25 = load i64, i64* %3, align 8
  ret i64 %25
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @file_has_acl(i8* %0, %struct.stat* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca %struct.stat*, align 8
  store i8* %0, i8** %3, align 8
  store %struct.stat* %1, %struct.stat** %4, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @record_file(%struct.hash_table* %0, i8* nonnull %1, %struct.stat* nonnull %2) #0 {
  %4 = alloca %struct.hash_table*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %struct.stat*, align 8
  %7 = alloca %struct.F_triple*, align 8
  %8 = alloca %struct.F_triple*, align 8
  store %struct.hash_table* %0, %struct.hash_table** %4, align 8
  store i8* %1, i8** %5, align 8
  store %struct.stat* %2, %struct.stat** %6, align 8
  %9 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %10 = icmp eq %struct.hash_table* %9, null
  br i1 %10, label %11, label %12

11:                                               ; preds = %3
  br label %44

12:                                               ; preds = %3
  %13 = call noalias i8* @xmalloc(i64 24)
  %14 = bitcast i8* %13 to %struct.F_triple*
  store %struct.F_triple* %14, %struct.F_triple** %7, align 8
  %15 = load i8*, i8** %5, align 8
  %16 = call noalias i8* @xstrdup(i8* %15)
  %17 = load %struct.F_triple*, %struct.F_triple** %7, align 8
  %18 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %17, i32 0, i32 0
  store i8* %16, i8** %18, align 8
  %19 = load %struct.stat*, %struct.stat** %6, align 8
  %20 = getelementptr inbounds %struct.stat, %struct.stat* %19, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = load %struct.F_triple*, %struct.F_triple** %7, align 8
  %23 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %22, i32 0, i32 1
  store i64 %21, i64* %23, align 8
  %24 = load %struct.stat*, %struct.stat** %6, align 8
  %25 = getelementptr inbounds %struct.stat, %struct.stat* %24, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = load %struct.F_triple*, %struct.F_triple** %7, align 8
  %28 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %27, i32 0, i32 2
  store i64 %26, i64* %28, align 8
  %29 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %30 = load %struct.F_triple*, %struct.F_triple** %7, align 8
  %31 = bitcast %struct.F_triple* %30 to i8*
  %32 = call i8* @hash_insert(%struct.hash_table* %29, i8* %31)
  %33 = bitcast i8* %32 to %struct.F_triple*
  store %struct.F_triple* %33, %struct.F_triple** %8, align 8
  %34 = load %struct.F_triple*, %struct.F_triple** %8, align 8
  %35 = icmp eq %struct.F_triple* %34, null
  br i1 %35, label %36, label %37

36:                                               ; preds = %12
  call void @xalloc_die() #15
  unreachable

37:                                               ; preds = %12
  %38 = load %struct.F_triple*, %struct.F_triple** %8, align 8
  %39 = load %struct.F_triple*, %struct.F_triple** %7, align 8
  %40 = icmp ne %struct.F_triple* %38, %39
  br i1 %40, label %41, label %44

41:                                               ; preds = %37
  %42 = load %struct.F_triple*, %struct.F_triple** %7, align 8
  %43 = bitcast %struct.F_triple* %42 to i8*
  call void @triple_free(i8* %43)
  br label %44

44:                                               ; preds = %41, %37, %11
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @seen_file(%struct.hash_table* %0, i8* %1, %struct.stat* %2) #0 {
  %4 = alloca i1, align 1
  %5 = alloca %struct.hash_table*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %struct.stat*, align 8
  %8 = alloca %struct.F_triple, align 8
  store %struct.hash_table* %0, %struct.hash_table** %5, align 8
  store i8* %1, i8** %6, align 8
  store %struct.stat* %2, %struct.stat** %7, align 8
  %9 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %10 = icmp eq %struct.hash_table* %9, null
  br i1 %10, label %11, label %12

11:                                               ; preds = %3
  store i1 false, i1* %4, align 1
  br label %29

12:                                               ; preds = %3
  %13 = load i8*, i8** %6, align 8
  %14 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %8, i32 0, i32 0
  store i8* %13, i8** %14, align 8
  %15 = load %struct.stat*, %struct.stat** %7, align 8
  %16 = getelementptr inbounds %struct.stat, %struct.stat* %15, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %8, i32 0, i32 1
  store i64 %17, i64* %18, align 8
  %19 = load %struct.stat*, %struct.stat** %7, align 8
  %20 = getelementptr inbounds %struct.stat, %struct.stat* %19, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %8, i32 0, i32 2
  store i64 %21, i64* %22, align 8
  %23 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %24 = bitcast %struct.F_triple* %8 to i8*
  %25 = call i8* @hash_lookup(%struct.hash_table* %23, i8* %24)
  %26 = icmp ne i8* %25, null
  %27 = xor i1 %26, true
  %28 = xor i1 %27, true
  store i1 %28, i1* %4, align 1
  br label %29

29:                                               ; preds = %12, %11
  %30 = load i1, i1* %4, align 1
  ret i1 %30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @strmode(i32 %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  %5 = load i32, i32* %3, align 4
  %6 = call signext i8 @ftypelet(i32 %5)
  %7 = load i8*, i8** %4, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 0
  store i8 %6, i8* %8, align 1
  %9 = load i32, i32* %3, align 4
  %10 = and i32 %9, 256
  %11 = icmp ne i32 %10, 0
  %12 = zext i1 %11 to i64
  %13 = select i1 %11, i32 114, i32 45
  %14 = trunc i32 %13 to i8
  %15 = load i8*, i8** %4, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8 %14, i8* %16, align 1
  %17 = load i32, i32* %3, align 4
  %18 = and i32 %17, 128
  %19 = icmp ne i32 %18, 0
  %20 = zext i1 %19 to i64
  %21 = select i1 %19, i32 119, i32 45
  %22 = trunc i32 %21 to i8
  %23 = load i8*, i8** %4, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 2
  store i8 %22, i8* %24, align 1
  %25 = load i32, i32* %3, align 4
  %26 = and i32 %25, 2048
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %34

28:                                               ; preds = %2
  %29 = load i32, i32* %3, align 4
  %30 = and i32 %29, 64
  %31 = icmp ne i32 %30, 0
  %32 = zext i1 %31 to i64
  %33 = select i1 %31, i32 115, i32 83
  br label %40

34:                                               ; preds = %2
  %35 = load i32, i32* %3, align 4
  %36 = and i32 %35, 64
  %37 = icmp ne i32 %36, 0
  %38 = zext i1 %37 to i64
  %39 = select i1 %37, i32 120, i32 45
  br label %40

40:                                               ; preds = %34, %28
  %41 = phi i32 [ %33, %28 ], [ %39, %34 ]
  %42 = trunc i32 %41 to i8
  %43 = load i8*, i8** %4, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 3
  store i8 %42, i8* %44, align 1
  %45 = load i32, i32* %3, align 4
  %46 = and i32 %45, 32
  %47 = icmp ne i32 %46, 0
  %48 = zext i1 %47 to i64
  %49 = select i1 %47, i32 114, i32 45
  %50 = trunc i32 %49 to i8
  %51 = load i8*, i8** %4, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 4
  store i8 %50, i8* %52, align 1
  %53 = load i32, i32* %3, align 4
  %54 = and i32 %53, 16
  %55 = icmp ne i32 %54, 0
  %56 = zext i1 %55 to i64
  %57 = select i1 %55, i32 119, i32 45
  %58 = trunc i32 %57 to i8
  %59 = load i8*, i8** %4, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 5
  store i8 %58, i8* %60, align 1
  %61 = load i32, i32* %3, align 4
  %62 = and i32 %61, 1024
  %63 = icmp ne i32 %62, 0
  br i1 %63, label %64, label %70

64:                                               ; preds = %40
  %65 = load i32, i32* %3, align 4
  %66 = and i32 %65, 8
  %67 = icmp ne i32 %66, 0
  %68 = zext i1 %67 to i64
  %69 = select i1 %67, i32 115, i32 83
  br label %76

70:                                               ; preds = %40
  %71 = load i32, i32* %3, align 4
  %72 = and i32 %71, 8
  %73 = icmp ne i32 %72, 0
  %74 = zext i1 %73 to i64
  %75 = select i1 %73, i32 120, i32 45
  br label %76

76:                                               ; preds = %70, %64
  %77 = phi i32 [ %69, %64 ], [ %75, %70 ]
  %78 = trunc i32 %77 to i8
  %79 = load i8*, i8** %4, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 6
  store i8 %78, i8* %80, align 1
  %81 = load i32, i32* %3, align 4
  %82 = and i32 %81, 4
  %83 = icmp ne i32 %82, 0
  %84 = zext i1 %83 to i64
  %85 = select i1 %83, i32 114, i32 45
  %86 = trunc i32 %85 to i8
  %87 = load i8*, i8** %4, align 8
  %88 = getelementptr inbounds i8, i8* %87, i64 7
  store i8 %86, i8* %88, align 1
  %89 = load i32, i32* %3, align 4
  %90 = and i32 %89, 2
  %91 = icmp ne i32 %90, 0
  %92 = zext i1 %91 to i64
  %93 = select i1 %91, i32 119, i32 45
  %94 = trunc i32 %93 to i8
  %95 = load i8*, i8** %4, align 8
  %96 = getelementptr inbounds i8, i8* %95, i64 8
  store i8 %94, i8* %96, align 1
  %97 = load i32, i32* %3, align 4
  %98 = and i32 %97, 512
  %99 = icmp ne i32 %98, 0
  br i1 %99, label %100, label %106

100:                                              ; preds = %76
  %101 = load i32, i32* %3, align 4
  %102 = and i32 %101, 1
  %103 = icmp ne i32 %102, 0
  %104 = zext i1 %103 to i64
  %105 = select i1 %103, i32 116, i32 84
  br label %112

106:                                              ; preds = %76
  %107 = load i32, i32* %3, align 4
  %108 = and i32 %107, 1
  %109 = icmp ne i32 %108, 0
  %110 = zext i1 %109 to i64
  %111 = select i1 %109, i32 120, i32 45
  br label %112

112:                                              ; preds = %106, %100
  %113 = phi i32 [ %105, %100 ], [ %111, %106 ]
  %114 = trunc i32 %113 to i8
  %115 = load i8*, i8** %4, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 9
  store i8 %114, i8* %116, align 1
  %117 = load i8*, i8** %4, align 8
  %118 = getelementptr inbounds i8, i8* %117, i64 10
  store i8 32, i8* %118, align 1
  %119 = load i8*, i8** %4, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 11
  store i8 0, i8* %120, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal signext i8 @ftypelet(i32 %0) #0 {
  %2 = alloca i8, align 1
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = and i32 %4, 61440
  %6 = icmp eq i32 %5, 32768
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  store i8 45, i8* %2, align 1
  br label %39

8:                                                ; preds = %1
  %9 = load i32, i32* %3, align 4
  %10 = and i32 %9, 61440
  %11 = icmp eq i32 %10, 16384
  br i1 %11, label %12, label %13

12:                                               ; preds = %8
  store i8 100, i8* %2, align 1
  br label %39

13:                                               ; preds = %8
  %14 = load i32, i32* %3, align 4
  %15 = and i32 %14, 61440
  %16 = icmp eq i32 %15, 24576
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  store i8 98, i8* %2, align 1
  br label %39

18:                                               ; preds = %13
  %19 = load i32, i32* %3, align 4
  %20 = and i32 %19, 61440
  %21 = icmp eq i32 %20, 8192
  br i1 %21, label %22, label %23

22:                                               ; preds = %18
  store i8 99, i8* %2, align 1
  br label %39

23:                                               ; preds = %18
  %24 = load i32, i32* %3, align 4
  %25 = and i32 %24, 61440
  %26 = icmp eq i32 %25, 40960
  br i1 %26, label %27, label %28

27:                                               ; preds = %23
  store i8 108, i8* %2, align 1
  br label %39

28:                                               ; preds = %23
  %29 = load i32, i32* %3, align 4
  %30 = and i32 %29, 61440
  %31 = icmp eq i32 %30, 4096
  br i1 %31, label %32, label %33

32:                                               ; preds = %28
  store i8 112, i8* %2, align 1
  br label %39

33:                                               ; preds = %28
  %34 = load i32, i32* %3, align 4
  %35 = and i32 %34, 61440
  %36 = icmp eq i32 %35, 49152
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  store i8 115, i8* %2, align 1
  br label %39

38:                                               ; preds = %33
  store i8 63, i8* %2, align 1
  br label %39

39:                                               ; preds = %38, %37, %32, %27, %22, %17, %12, %7
  %40 = load i8, i8* %2, align 1
  ret i8 %40
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @filemodestring(%struct.stat* %0, i8* %1) #0 {
  %3 = alloca %struct.stat*, align 8
  %4 = alloca i8*, align 8
  store %struct.stat* %0, %struct.stat** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load %struct.stat*, %struct.stat** %3, align 8
  %6 = getelementptr inbounds %struct.stat, %struct.stat* %5, i32 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = load i8*, i8** %4, align 8
  call void @strmode(i32 %7, i8* %8)
  %9 = load %struct.stat*, %struct.stat** %3, align 8
  %10 = getelementptr inbounds %struct.stat, %struct.stat* %9, i32 0, i32 3
  %11 = load i32, i32* %10, align 8
  %12 = load %struct.stat*, %struct.stat** %3, align 8
  %13 = getelementptr inbounds %struct.stat, %struct.stat* %12, i32 0, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = sub i32 %11, %14
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %2
  %18 = load i8*, i8** %4, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 0
  store i8 70, i8* %19, align 1
  br label %47

20:                                               ; preds = %2
  %21 = load %struct.stat*, %struct.stat** %3, align 8
  %22 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 3
  %23 = load i32, i32* %22, align 8
  %24 = load %struct.stat*, %struct.stat** %3, align 8
  %25 = getelementptr inbounds %struct.stat, %struct.stat* %24, i32 0, i32 3
  %26 = load i32, i32* %25, align 8
  %27 = sub i32 %23, %26
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %20
  %30 = load i8*, i8** %4, align 8
  %31 = getelementptr inbounds i8, i8* %30, i64 0
  store i8 81, i8* %31, align 1
  br label %46

32:                                               ; preds = %20
  %33 = load %struct.stat*, %struct.stat** %3, align 8
  %34 = getelementptr inbounds %struct.stat, %struct.stat* %33, i32 0, i32 3
  %35 = load i32, i32* %34, align 8
  %36 = load %struct.stat*, %struct.stat** %3, align 8
  %37 = getelementptr inbounds %struct.stat, %struct.stat* %36, i32 0, i32 3
  %38 = load i32, i32* %37, align 8
  %39 = sub i32 %35, %38
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %32
  %42 = load i8*, i8** %4, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 0
  store i8 83, i8* %43, align 1
  br label %45

44:                                               ; preds = %32
  br label %45

45:                                               ; preds = %44, %41
  br label %46

46:                                               ; preds = %45, %29
  br label %47

47:                                               ; preds = %46, %17
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @file_name_concat(i8* %0, i8* %1, i8** %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8**, align 8
  %7 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i8** %2, i8*** %6, align 8
  %8 = load i8*, i8** %4, align 8
  %9 = load i8*, i8** %5, align 8
  %10 = load i8**, i8*** %6, align 8
  %11 = call i8* @mfile_name_concat(i8* %8, i8* %9, i8** %10)
  store i8* %11, i8** %7, align 8
  %12 = load i8*, i8** %7, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %14, label %15

14:                                               ; preds = %3
  call void @xalloc_die() #15
  unreachable

15:                                               ; preds = %3
  %16 = load i8*, i8** %7, align 8
  ret i8* %16
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @mfile_name_concat(i8* %0, i8* %1, i8** %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8**, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8** %2, i8*** %7, align 8
  %15 = load i8*, i8** %5, align 8
  %16 = call i8* @last_component(i8* %15) #17
  store i8* %16, i8** %8, align 8
  %17 = load i8*, i8** %8, align 8
  %18 = call i64 @base_len(i8* %17) #17
  store i64 %18, i64* %9, align 8
  %19 = load i8*, i8** %8, align 8
  %20 = load i8*, i8** %5, align 8
  %21 = ptrtoint i8* %19 to i64
  %22 = ptrtoint i8* %20 to i64
  %23 = sub i64 %21, %22
  %24 = load i64, i64* %9, align 8
  %25 = add i64 %23, %24
  store i64 %25, i64* %10, align 8
  %26 = load i8*, i8** %6, align 8
  %27 = call i64 @strlen(i8* %26) #17
  store i64 %27, i64* %11, align 8
  store i8 0, i8* %12, align 1
  %28 = load i64, i64* %9, align 8
  %29 = icmp ne i64 %28, 0
  br i1 %29, label %30, label %45

30:                                               ; preds = %3
  %31 = load i8*, i8** %5, align 8
  %32 = load i64, i64* %10, align 8
  %33 = sub i64 %32, 1
  %34 = getelementptr inbounds i8, i8* %31, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i32
  %37 = icmp eq i32 %36, 47
  br i1 %37, label %44, label %38

38:                                               ; preds = %30
  %39 = load i8*, i8** %6, align 8
  %40 = load i8, i8* %39, align 1
  %41 = sext i8 %40 to i32
  %42 = icmp eq i32 %41, 47
  br i1 %42, label %44, label %43

43:                                               ; preds = %38
  store i8 47, i8* %12, align 1
  br label %44

44:                                               ; preds = %43, %38, %30
  br label %52

45:                                               ; preds = %3
  %46 = load i8*, i8** %6, align 8
  %47 = load i8, i8* %46, align 1
  %48 = sext i8 %47 to i32
  %49 = icmp eq i32 %48, 47
  br i1 %49, label %50, label %51

50:                                               ; preds = %45
  store i8 46, i8* %12, align 1
  br label %51

51:                                               ; preds = %50, %45
  br label %52

52:                                               ; preds = %51, %44
  %53 = load i64, i64* %10, align 8
  %54 = load i8, i8* %12, align 1
  %55 = sext i8 %54 to i32
  %56 = icmp ne i32 %55, 0
  %57 = zext i1 %56 to i32
  %58 = sext i32 %57 to i64
  %59 = add i64 %53, %58
  %60 = load i64, i64* %11, align 8
  %61 = add i64 %59, %60
  %62 = add i64 %61, 1
  %63 = call noalias i8* @malloc(i64 %62) #14
  store i8* %63, i8** %13, align 8
  %64 = load i8*, i8** %13, align 8
  %65 = icmp eq i8* %64, null
  br i1 %65, label %66, label %67

66:                                               ; preds = %52
  store i8* null, i8** %4, align 8
  br label %93

67:                                               ; preds = %52
  %68 = load i8*, i8** %13, align 8
  %69 = load i8*, i8** %5, align 8
  %70 = load i64, i64* %10, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %68, i8* align 1 %69, i64 %70, i1 false)
  %71 = getelementptr inbounds i8, i8* %68, i64 %70
  store i8* %71, i8** %14, align 8
  %72 = load i8, i8* %12, align 1
  %73 = load i8*, i8** %14, align 8
  store i8 %72, i8* %73, align 1
  %74 = load i8, i8* %12, align 1
  %75 = sext i8 %74 to i32
  %76 = icmp ne i32 %75, 0
  %77 = zext i1 %76 to i32
  %78 = load i8*, i8** %14, align 8
  %79 = sext i32 %77 to i64
  %80 = getelementptr inbounds i8, i8* %78, i64 %79
  store i8* %80, i8** %14, align 8
  %81 = load i8**, i8*** %7, align 8
  %82 = icmp ne i8** %81, null
  br i1 %82, label %83, label %86

83:                                               ; preds = %67
  %84 = load i8*, i8** %14, align 8
  %85 = load i8**, i8*** %7, align 8
  store i8* %84, i8** %85, align 8
  br label %86

86:                                               ; preds = %83, %67
  %87 = load i8*, i8** %14, align 8
  %88 = load i8*, i8** %6, align 8
  %89 = load i64, i64* %11, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %87, i8* align 1 %88, i64 %89, i1 false)
  %90 = getelementptr inbounds i8, i8* %87, i64 %89
  store i8* %90, i8** %14, align 8
  %91 = load i8*, i8** %14, align 8
  store i8 0, i8* %91, align 1
  %92 = load i8*, i8** %13, align 8
  store i8* %92, i8** %4, align 8
  br label %93

93:                                               ; preds = %86, %66
  %94 = load i8*, i8** %4, align 8
  ret i8* %94
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @filevercmp(i8* %0, i8* %1) #9 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  %14 = load i8*, i8** %4, align 8
  %15 = load i8*, i8** %5, align 8
  %16 = call i32 @strcmp(i8* %14, i8* %15) #17
  store i32 %16, i32* %13, align 4
  %17 = load i32, i32* %13, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %20

19:                                               ; preds = %2
  store i32 0, i32* %3, align 4
  br label %156

20:                                               ; preds = %2
  %21 = load i8*, i8** %4, align 8
  %22 = load i8, i8* %21, align 1
  %23 = icmp ne i8 %22, 0
  br i1 %23, label %25, label %24

24:                                               ; preds = %20
  store i32 -1, i32* %3, align 4
  br label %156

25:                                               ; preds = %20
  %26 = load i8*, i8** %5, align 8
  %27 = load i8, i8* %26, align 1
  %28 = icmp ne i8 %27, 0
  br i1 %28, label %30, label %29

29:                                               ; preds = %25
  store i32 1, i32* %3, align 4
  br label %156

30:                                               ; preds = %25
  %31 = load i8*, i8** %4, align 8
  %32 = call i32 @strcmp(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.296, i64 0, i64 0), i8* %31) #17
  %33 = icmp eq i32 0, %32
  br i1 %33, label %34, label %35

34:                                               ; preds = %30
  store i32 -1, i32* %3, align 4
  br label %156

35:                                               ; preds = %30
  %36 = load i8*, i8** %5, align 8
  %37 = call i32 @strcmp(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.296, i64 0, i64 0), i8* %36) #17
  %38 = icmp eq i32 0, %37
  br i1 %38, label %39, label %40

39:                                               ; preds = %35
  store i32 1, i32* %3, align 4
  br label %156

40:                                               ; preds = %35
  %41 = load i8*, i8** %4, align 8
  %42 = call i32 @strcmp(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1.297, i64 0, i64 0), i8* %41) #17
  %43 = icmp eq i32 0, %42
  br i1 %43, label %44, label %45

44:                                               ; preds = %40
  store i32 -1, i32* %3, align 4
  br label %156

45:                                               ; preds = %40
  %46 = load i8*, i8** %5, align 8
  %47 = call i32 @strcmp(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1.297, i64 0, i64 0), i8* %46) #17
  %48 = icmp eq i32 0, %47
  br i1 %48, label %49, label %50

49:                                               ; preds = %45
  store i32 1, i32* %3, align 4
  br label %156

50:                                               ; preds = %45
  %51 = load i8*, i8** %4, align 8
  %52 = load i8, i8* %51, align 1
  %53 = sext i8 %52 to i32
  %54 = icmp eq i32 %53, 46
  br i1 %54, label %55, label %61

55:                                               ; preds = %50
  %56 = load i8*, i8** %5, align 8
  %57 = load i8, i8* %56, align 1
  %58 = sext i8 %57 to i32
  %59 = icmp ne i32 %58, 46
  br i1 %59, label %60, label %61

60:                                               ; preds = %55
  store i32 -1, i32* %3, align 4
  br label %156

61:                                               ; preds = %55, %50
  %62 = load i8*, i8** %4, align 8
  %63 = load i8, i8* %62, align 1
  %64 = sext i8 %63 to i32
  %65 = icmp ne i32 %64, 46
  br i1 %65, label %66, label %72

66:                                               ; preds = %61
  %67 = load i8*, i8** %5, align 8
  %68 = load i8, i8* %67, align 1
  %69 = sext i8 %68 to i32
  %70 = icmp eq i32 %69, 46
  br i1 %70, label %71, label %72

71:                                               ; preds = %66
  store i32 1, i32* %3, align 4
  br label %156

72:                                               ; preds = %66, %61
  %73 = load i8*, i8** %4, align 8
  %74 = load i8, i8* %73, align 1
  %75 = sext i8 %74 to i32
  %76 = icmp eq i32 %75, 46
  br i1 %76, label %77, label %87

77:                                               ; preds = %72
  %78 = load i8*, i8** %5, align 8
  %79 = load i8, i8* %78, align 1
  %80 = sext i8 %79 to i32
  %81 = icmp eq i32 %80, 46
  br i1 %81, label %82, label %87

82:                                               ; preds = %77
  %83 = load i8*, i8** %4, align 8
  %84 = getelementptr inbounds i8, i8* %83, i32 1
  store i8* %84, i8** %4, align 8
  %85 = load i8*, i8** %5, align 8
  %86 = getelementptr inbounds i8, i8* %85, i32 1
  store i8* %86, i8** %5, align 8
  br label %87

87:                                               ; preds = %82, %77, %72
  %88 = load i8*, i8** %4, align 8
  store i8* %88, i8** %6, align 8
  %89 = load i8*, i8** %5, align 8
  store i8* %89, i8** %7, align 8
  %90 = call i8* @match_suffix(i8** %6)
  store i8* %90, i8** %8, align 8
  %91 = call i8* @match_suffix(i8** %7)
  store i8* %91, i8** %9, align 8
  %92 = load i8*, i8** %8, align 8
  %93 = icmp ne i8* %92, null
  br i1 %93, label %94, label %96

94:                                               ; preds = %87
  %95 = load i8*, i8** %8, align 8
  br label %98

96:                                               ; preds = %87
  %97 = load i8*, i8** %6, align 8
  br label %98

98:                                               ; preds = %96, %94
  %99 = phi i8* [ %95, %94 ], [ %97, %96 ]
  %100 = load i8*, i8** %4, align 8
  %101 = ptrtoint i8* %99 to i64
  %102 = ptrtoint i8* %100 to i64
  %103 = sub i64 %101, %102
  store i64 %103, i64* %10, align 8
  %104 = load i8*, i8** %9, align 8
  %105 = icmp ne i8* %104, null
  br i1 %105, label %106, label %108

106:                                              ; preds = %98
  %107 = load i8*, i8** %9, align 8
  br label %110

108:                                              ; preds = %98
  %109 = load i8*, i8** %7, align 8
  br label %110

110:                                              ; preds = %108, %106
  %111 = phi i8* [ %107, %106 ], [ %109, %108 ]
  %112 = load i8*, i8** %5, align 8
  %113 = ptrtoint i8* %111 to i64
  %114 = ptrtoint i8* %112 to i64
  %115 = sub i64 %113, %114
  store i64 %115, i64* %11, align 8
  %116 = load i8*, i8** %8, align 8
  %117 = icmp ne i8* %116, null
  br i1 %117, label %121, label %118

118:                                              ; preds = %110
  %119 = load i8*, i8** %9, align 8
  %120 = icmp ne i8* %119, null
  br i1 %120, label %121, label %142

121:                                              ; preds = %118, %110
  %122 = load i64, i64* %10, align 8
  %123 = load i64, i64* %11, align 8
  %124 = icmp eq i64 %122, %123
  br i1 %124, label %125, label %142

125:                                              ; preds = %121
  %126 = load i8*, i8** %4, align 8
  %127 = load i8*, i8** %5, align 8
  %128 = load i64, i64* %10, align 8
  %129 = call i32 @strncmp(i8* %126, i8* %127, i64 %128) #17
  %130 = icmp eq i32 0, %129
  br i1 %130, label %131, label %142

131:                                              ; preds = %125
  %132 = load i8*, i8** %6, align 8
  %133 = load i8*, i8** %4, align 8
  %134 = ptrtoint i8* %132 to i64
  %135 = ptrtoint i8* %133 to i64
  %136 = sub i64 %134, %135
  store i64 %136, i64* %10, align 8
  %137 = load i8*, i8** %7, align 8
  %138 = load i8*, i8** %5, align 8
  %139 = ptrtoint i8* %137 to i64
  %140 = ptrtoint i8* %138 to i64
  %141 = sub i64 %139, %140
  store i64 %141, i64* %11, align 8
  br label %142

142:                                              ; preds = %131, %125, %121, %118
  %143 = load i8*, i8** %4, align 8
  %144 = load i64, i64* %10, align 8
  %145 = load i8*, i8** %5, align 8
  %146 = load i64, i64* %11, align 8
  %147 = call i32 @verrevcmp(i8* %143, i64 %144, i8* %145, i64 %146) #17
  store i32 %147, i32* %12, align 4
  %148 = load i32, i32* %12, align 4
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %152

150:                                              ; preds = %142
  %151 = load i32, i32* %13, align 4
  br label %154

152:                                              ; preds = %142
  %153 = load i32, i32* %12, align 4
  br label %154

154:                                              ; preds = %152, %150
  %155 = phi i32 [ %151, %150 ], [ %153, %152 ]
  store i32 %155, i32* %3, align 4
  br label %156

156:                                              ; preds = %154, %71, %60, %49, %44, %39, %34, %29, %24, %19
  %157 = load i32, i32* %3, align 4
  ret i32 %157
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @match_suffix(i8** %0) #0 {
  %2 = alloca i8**, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8, align 1
  store i8** %0, i8*** %2, align 8
  store i8* null, i8** %3, align 8
  store i8 0, i8* %4, align 1
  br label %5

5:                                                ; preds = %55, %1
  %6 = load i8**, i8*** %2, align 8
  %7 = load i8*, i8** %6, align 8
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  br i1 %9, label %10, label %59

10:                                               ; preds = %5
  %11 = load i8, i8* %4, align 1
  %12 = trunc i8 %11 to i1
  br i1 %12, label %13, label %27

13:                                               ; preds = %10
  store i8 0, i8* %4, align 1
  %14 = load i8**, i8*** %2, align 8
  %15 = load i8*, i8** %14, align 8
  %16 = load i8, i8* %15, align 1
  %17 = sext i8 %16 to i32
  %18 = call zeroext i1 @c_isalpha(i32 %17)
  br i1 %18, label %26, label %19

19:                                               ; preds = %13
  %20 = load i8**, i8*** %2, align 8
  %21 = load i8*, i8** %20, align 8
  %22 = load i8, i8* %21, align 1
  %23 = sext i8 %22 to i32
  %24 = icmp ne i32 126, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %19
  store i8* null, i8** %3, align 8
  br label %26

26:                                               ; preds = %25, %19, %13
  br label %55

27:                                               ; preds = %10
  %28 = load i8**, i8*** %2, align 8
  %29 = load i8*, i8** %28, align 8
  %30 = load i8, i8* %29, align 1
  %31 = sext i8 %30 to i32
  %32 = icmp eq i32 46, %31
  br i1 %32, label %33, label %40

33:                                               ; preds = %27
  store i8 1, i8* %4, align 1
  %34 = load i8*, i8** %3, align 8
  %35 = icmp ne i8* %34, null
  br i1 %35, label %39, label %36

36:                                               ; preds = %33
  %37 = load i8**, i8*** %2, align 8
  %38 = load i8*, i8** %37, align 8
  store i8* %38, i8** %3, align 8
  br label %39

39:                                               ; preds = %36, %33
  br label %54

40:                                               ; preds = %27
  %41 = load i8**, i8*** %2, align 8
  %42 = load i8*, i8** %41, align 8
  %43 = load i8, i8* %42, align 1
  %44 = sext i8 %43 to i32
  %45 = call zeroext i1 @c_isalnum(i32 %44)
  br i1 %45, label %53, label %46

46:                                               ; preds = %40
  %47 = load i8**, i8*** %2, align 8
  %48 = load i8*, i8** %47, align 8
  %49 = load i8, i8* %48, align 1
  %50 = sext i8 %49 to i32
  %51 = icmp ne i32 126, %50
  br i1 %51, label %52, label %53

52:                                               ; preds = %46
  store i8* null, i8** %3, align 8
  br label %53

53:                                               ; preds = %52, %46, %40
  br label %54

54:                                               ; preds = %53, %39
  br label %55

55:                                               ; preds = %54, %26
  %56 = load i8**, i8*** %2, align 8
  %57 = load i8*, i8** %56, align 8
  %58 = getelementptr inbounds i8, i8* %57, i32 1
  store i8* %58, i8** %56, align 8
  br label %5, !llvm.loop !73

59:                                               ; preds = %5
  %60 = load i8*, i8** %3, align 8
  ret i8* %60
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @verrevcmp(i8* %0, i64 %1, i8* %2, i64 %3) #9 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i8* %0, i8** %6, align 8
  store i64 %1, i64* %7, align 8
  store i8* %2, i8** %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 0, i64* %10, align 8
  store i64 0, i64* %11, align 8
  br label %15

15:                                               ; preds = %170, %4
  %16 = load i64, i64* %10, align 8
  %17 = load i64, i64* %7, align 8
  %18 = icmp ult i64 %16, %17
  br i1 %18, label %23, label %19

19:                                               ; preds = %15
  %20 = load i64, i64* %11, align 8
  %21 = load i64, i64* %9, align 8
  %22 = icmp ult i64 %20, %21
  br label %23

23:                                               ; preds = %19, %15
  %24 = phi i1 [ true, %15 ], [ %22, %19 ]
  br i1 %24, label %25, label %171

25:                                               ; preds = %23
  store i32 0, i32* %12, align 4
  br label %26

26:                                               ; preds = %85, %25
  %27 = load i64, i64* %10, align 8
  %28 = load i64, i64* %7, align 8
  %29 = icmp ult i64 %27, %28
  br i1 %29, label %30, label %37

30:                                               ; preds = %26
  %31 = load i8*, i8** %6, align 8
  %32 = load i64, i64* %10, align 8
  %33 = getelementptr inbounds i8, i8* %31, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = sext i8 %34 to i32
  %36 = call zeroext i1 @c_isdigit(i32 %35)
  br i1 %36, label %37, label %51

37:                                               ; preds = %30, %26
  %38 = load i64, i64* %11, align 8
  %39 = load i64, i64* %9, align 8
  %40 = icmp ult i64 %38, %39
  br i1 %40, label %41, label %49

41:                                               ; preds = %37
  %42 = load i8*, i8** %8, align 8
  %43 = load i64, i64* %11, align 8
  %44 = getelementptr inbounds i8, i8* %42, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = sext i8 %45 to i32
  %47 = call zeroext i1 @c_isdigit(i32 %46)
  %48 = xor i1 %47, true
  br label %49

49:                                               ; preds = %41, %37
  %50 = phi i1 [ false, %37 ], [ %48, %41 ]
  br label %51

51:                                               ; preds = %49, %30
  %52 = phi i1 [ true, %30 ], [ %50, %49 ]
  br i1 %52, label %53, label %90

53:                                               ; preds = %51
  %54 = load i64, i64* %10, align 8
  %55 = load i64, i64* %7, align 8
  %56 = icmp eq i64 %54, %55
  br i1 %56, label %57, label %58

57:                                               ; preds = %53
  br label %64

58:                                               ; preds = %53
  %59 = load i8*, i8** %6, align 8
  %60 = load i64, i64* %10, align 8
  %61 = getelementptr inbounds i8, i8* %59, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = call i32 @order(i8 zeroext %62)
  br label %64

64:                                               ; preds = %58, %57
  %65 = phi i32 [ 0, %57 ], [ %63, %58 ]
  store i32 %65, i32* %13, align 4
  %66 = load i64, i64* %11, align 8
  %67 = load i64, i64* %9, align 8
  %68 = icmp eq i64 %66, %67
  br i1 %68, label %69, label %70

69:                                               ; preds = %64
  br label %76

70:                                               ; preds = %64
  %71 = load i8*, i8** %8, align 8
  %72 = load i64, i64* %11, align 8
  %73 = getelementptr inbounds i8, i8* %71, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = call i32 @order(i8 zeroext %74)
  br label %76

76:                                               ; preds = %70, %69
  %77 = phi i32 [ 0, %69 ], [ %75, %70 ]
  store i32 %77, i32* %14, align 4
  %78 = load i32, i32* %13, align 4
  %79 = load i32, i32* %14, align 4
  %80 = icmp ne i32 %78, %79
  br i1 %80, label %81, label %85

81:                                               ; preds = %76
  %82 = load i32, i32* %13, align 4
  %83 = load i32, i32* %14, align 4
  %84 = sub nsw i32 %82, %83
  store i32 %84, i32* %5, align 4
  br label %172

85:                                               ; preds = %76
  %86 = load i64, i64* %10, align 8
  %87 = add i64 %86, 1
  store i64 %87, i64* %10, align 8
  %88 = load i64, i64* %11, align 8
  %89 = add i64 %88, 1
  store i64 %89, i64* %11, align 8
  br label %26, !llvm.loop !74

90:                                               ; preds = %51
  br label %91

91:                                               ; preds = %98, %90
  %92 = load i8*, i8** %6, align 8
  %93 = load i64, i64* %10, align 8
  %94 = getelementptr inbounds i8, i8* %92, i64 %93
  %95 = load i8, i8* %94, align 1
  %96 = sext i8 %95 to i32
  %97 = icmp eq i32 %96, 48
  br i1 %97, label %98, label %101

98:                                               ; preds = %91
  %99 = load i64, i64* %10, align 8
  %100 = add i64 %99, 1
  store i64 %100, i64* %10, align 8
  br label %91, !llvm.loop !75

101:                                              ; preds = %91
  br label %102

102:                                              ; preds = %109, %101
  %103 = load i8*, i8** %8, align 8
  %104 = load i64, i64* %11, align 8
  %105 = getelementptr inbounds i8, i8* %103, i64 %104
  %106 = load i8, i8* %105, align 1
  %107 = sext i8 %106 to i32
  %108 = icmp eq i32 %107, 48
  br i1 %108, label %109, label %112

109:                                              ; preds = %102
  %110 = load i64, i64* %11, align 8
  %111 = add i64 %110, 1
  store i64 %111, i64* %11, align 8
  br label %102, !llvm.loop !76

112:                                              ; preds = %102
  br label %113

113:                                              ; preds = %144, %112
  %114 = load i8*, i8** %6, align 8
  %115 = load i64, i64* %10, align 8
  %116 = getelementptr inbounds i8, i8* %114, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = sext i8 %117 to i32
  %119 = call zeroext i1 @c_isdigit(i32 %118)
  br i1 %119, label %120, label %127

120:                                              ; preds = %113
  %121 = load i8*, i8** %8, align 8
  %122 = load i64, i64* %11, align 8
  %123 = getelementptr inbounds i8, i8* %121, i64 %122
  %124 = load i8, i8* %123, align 1
  %125 = sext i8 %124 to i32
  %126 = call zeroext i1 @c_isdigit(i32 %125)
  br label %127

127:                                              ; preds = %120, %113
  %128 = phi i1 [ false, %113 ], [ %126, %120 ]
  br i1 %128, label %129, label %149

129:                                              ; preds = %127
  %130 = load i32, i32* %12, align 4
  %131 = icmp ne i32 %130, 0
  br i1 %131, label %144, label %132

132:                                              ; preds = %129
  %133 = load i8*, i8** %6, align 8
  %134 = load i64, i64* %10, align 8
  %135 = getelementptr inbounds i8, i8* %133, i64 %134
  %136 = load i8, i8* %135, align 1
  %137 = sext i8 %136 to i32
  %138 = load i8*, i8** %8, align 8
  %139 = load i64, i64* %11, align 8
  %140 = getelementptr inbounds i8, i8* %138, i64 %139
  %141 = load i8, i8* %140, align 1
  %142 = sext i8 %141 to i32
  %143 = sub nsw i32 %137, %142
  store i32 %143, i32* %12, align 4
  br label %144

144:                                              ; preds = %132, %129
  %145 = load i64, i64* %10, align 8
  %146 = add i64 %145, 1
  store i64 %146, i64* %10, align 8
  %147 = load i64, i64* %11, align 8
  %148 = add i64 %147, 1
  store i64 %148, i64* %11, align 8
  br label %113, !llvm.loop !77

149:                                              ; preds = %127
  %150 = load i8*, i8** %6, align 8
  %151 = load i64, i64* %10, align 8
  %152 = getelementptr inbounds i8, i8* %150, i64 %151
  %153 = load i8, i8* %152, align 1
  %154 = sext i8 %153 to i32
  %155 = call zeroext i1 @c_isdigit(i32 %154)
  br i1 %155, label %156, label %157

156:                                              ; preds = %149
  store i32 1, i32* %5, align 4
  br label %172

157:                                              ; preds = %149
  %158 = load i8*, i8** %8, align 8
  %159 = load i64, i64* %11, align 8
  %160 = getelementptr inbounds i8, i8* %158, i64 %159
  %161 = load i8, i8* %160, align 1
  %162 = sext i8 %161 to i32
  %163 = call zeroext i1 @c_isdigit(i32 %162)
  br i1 %163, label %164, label %165

164:                                              ; preds = %157
  store i32 -1, i32* %5, align 4
  br label %172

165:                                              ; preds = %157
  %166 = load i32, i32* %12, align 4
  %167 = icmp ne i32 %166, 0
  br i1 %167, label %168, label %170

168:                                              ; preds = %165
  %169 = load i32, i32* %12, align 4
  store i32 %169, i32* %5, align 4
  br label %172

170:                                              ; preds = %165
  br label %15, !llvm.loop !78

171:                                              ; preds = %23
  store i32 0, i32* %5, align 4
  br label %172

172:                                              ; preds = %171, %168, %164, %156, %81
  %173 = load i32, i32* %5, align 4
  ret i32 %173
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @order(i8 zeroext %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8, align 1
  store i8 %0, i8* %3, align 1
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = call zeroext i1 @c_isdigit(i32 %5)
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  store i32 0, i32* %2, align 4
  br label %25

8:                                                ; preds = %1
  %9 = load i8, i8* %3, align 1
  %10 = zext i8 %9 to i32
  %11 = call zeroext i1 @c_isalpha(i32 %10)
  br i1 %11, label %12, label %15

12:                                               ; preds = %8
  %13 = load i8, i8* %3, align 1
  %14 = zext i8 %13 to i32
  store i32 %14, i32* %2, align 4
  br label %25

15:                                               ; preds = %8
  %16 = load i8, i8* %3, align 1
  %17 = zext i8 %16 to i32
  %18 = icmp eq i32 %17, 126
  br i1 %18, label %19, label %20

19:                                               ; preds = %15
  store i32 -1, i32* %2, align 4
  br label %25

20:                                               ; preds = %15
  %21 = load i8, i8* %3, align 1
  %22 = zext i8 %21 to i32
  %23 = add nsw i32 %22, 255
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %2, align 4
  br label %25

25:                                               ; preds = %20, %19, %12, %7
  %26 = load i32, i32* %2, align 4
  ret i32 %26
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @gettime(%struct.dev_ino* %0) #0 {
  %2 = alloca %struct.dev_ino*, align 8
  %3 = alloca %struct.dev_ino, align 8
  store %struct.dev_ino* %0, %struct.dev_ino** %2, align 8
  %4 = load %struct.dev_ino*, %struct.dev_ino** %2, align 8
  %5 = call i32 @clock_gettime(i32 0, %struct.dev_ino* %4) #14
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  br label %19

8:                                                ; preds = %1
  %9 = call i32 @gettimeofday(%struct.dev_ino* %3, i8* null) #14
  %10 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %3, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = load %struct.dev_ino*, %struct.dev_ino** %2, align 8
  %13 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %12, i32 0, i32 0
  store i64 %11, i64* %13, align 8
  %14 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %3, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = mul nsw i64 %15, 1000
  %17 = load %struct.dev_ino*, %struct.dev_ino** %2, align 8
  %18 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %17, i32 0, i32 1
  store i64 %16, i64* %18, align 8
  br label %19

19:                                               ; preds = %8, %7
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @clock_gettime(i32, %struct.dev_ino*) #1

; Function Attrs: nounwind
declare dso_local i32 @gettimeofday(%struct.dev_ino*, i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8, align 1
  %4 = alloca i8*, align 8
  store i32 %0, i32* %2, align 4
  store i8 1, i8* %3, align 1
  %5 = load i32, i32* %2, align 4
  %6 = call i8* @setlocale(i32 %5, i8* null) #14
  store i8* %6, i8** %4, align 8
  %7 = load i8*, i8** %4, align 8
  %8 = icmp ne i8* %7, null
  br i1 %8, label %9, label %19

9:                                                ; preds = %1
  %10 = load i8*, i8** %4, align 8
  %11 = call i32 @strcmp(i8* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.302, i64 0, i64 0)) #17
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %9
  %14 = load i8*, i8** %4, align 8
  %15 = call i32 @strcmp(i8* %14, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.303, i64 0, i64 0)) #17
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %13, %9
  store i8 0, i8* %3, align 1
  br label %18

18:                                               ; preds = %17, %13
  br label %19

19:                                               ; preds = %18, %1
  %20 = load i8, i8* %3, align 1
  %21 = trunc i8 %20 to i1
  ret i1 %21
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i64 @hash_get_n_entries(%struct.hash_table* %0) #9 {
  %2 = alloca %struct.hash_table*, align 8
  store %struct.hash_table* %0, %struct.hash_table** %2, align 8
  %3 = load %struct.hash_table*, %struct.hash_table** %2, align 8
  %4 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %3, i32 0, i32 4
  %5 = load i64, i64* %4, align 8
  ret i64 %5
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @hash_lookup(%struct.hash_table* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca %struct.hash_table*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %struct.hash_entry*, align 8
  %7 = alloca %struct.hash_entry*, align 8
  store %struct.hash_table* %0, %struct.hash_table** %4, align 8
  store i8* %1, i8** %5, align 8
  %8 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %9 = load i8*, i8** %5, align 8
  %10 = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %8, i8* %9)
  store %struct.hash_entry* %10, %struct.hash_entry** %6, align 8
  %11 = load %struct.hash_entry*, %struct.hash_entry** %6, align 8
  %12 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %11, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %13, null
  br i1 %14, label %15, label %16

15:                                               ; preds = %2
  store i8* null, i8** %3, align 8
  br label %46

16:                                               ; preds = %2
  %17 = load %struct.hash_entry*, %struct.hash_entry** %6, align 8
  store %struct.hash_entry* %17, %struct.hash_entry** %7, align 8
  br label %18

18:                                               ; preds = %41, %16
  %19 = load %struct.hash_entry*, %struct.hash_entry** %7, align 8
  %20 = icmp ne %struct.hash_entry* %19, null
  br i1 %20, label %21, label %45

21:                                               ; preds = %18
  %22 = load i8*, i8** %5, align 8
  %23 = load %struct.hash_entry*, %struct.hash_entry** %7, align 8
  %24 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %23, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = icmp eq i8* %22, %25
  br i1 %26, label %36, label %27

27:                                               ; preds = %21
  %28 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %29 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %28, i32 0, i32 7
  %30 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %29, align 8
  %31 = load i8*, i8** %5, align 8
  %32 = load %struct.hash_entry*, %struct.hash_entry** %7, align 8
  %33 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %32, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = call zeroext i1 %30(i8* %31, i8* %34)
  br i1 %35, label %36, label %40

36:                                               ; preds = %27, %21
  %37 = load %struct.hash_entry*, %struct.hash_entry** %7, align 8
  %38 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %37, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  store i8* %39, i8** %3, align 8
  br label %46

40:                                               ; preds = %27
  br label %41

41:                                               ; preds = %40
  %42 = load %struct.hash_entry*, %struct.hash_entry** %7, align 8
  %43 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %42, i32 0, i32 1
  %44 = load %struct.hash_entry*, %struct.hash_entry** %43, align 8
  store %struct.hash_entry* %44, %struct.hash_entry** %7, align 8
  br label %18, !llvm.loop !79

45:                                               ; preds = %18
  store i8* null, i8** %3, align 8
  br label %46

46:                                               ; preds = %45, %36, %15
  %47 = load i8*, i8** %3, align 8
  ret i8* %47
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.hash_entry* @safe_hasher(%struct.hash_table* %0, i8* %1) #0 {
  %3 = alloca %struct.hash_table*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  store %struct.hash_table* %0, %struct.hash_table** %3, align 8
  store i8* %1, i8** %4, align 8
  %6 = load %struct.hash_table*, %struct.hash_table** %3, align 8
  %7 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %6, i32 0, i32 6
  %8 = load i64 (i8*, i64)*, i64 (i8*, i64)** %7, align 8
  %9 = load i8*, i8** %4, align 8
  %10 = load %struct.hash_table*, %struct.hash_table** %3, align 8
  %11 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %10, i32 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = call i64 %8(i8* %9, i64 %12)
  store i64 %13, i64* %5, align 8
  %14 = load i64, i64* %5, align 8
  %15 = load %struct.hash_table*, %struct.hash_table** %3, align 8
  %16 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %15, i32 0, i32 2
  %17 = load i64, i64* %16, align 8
  %18 = icmp ult i64 %14, %17
  br i1 %18, label %20, label %19

19:                                               ; preds = %2
  call void @abort() #16
  unreachable

20:                                               ; preds = %2
  %21 = load %struct.hash_table*, %struct.hash_table** %3, align 8
  %22 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %21, i32 0, i32 0
  %23 = load %struct.hash_entry*, %struct.hash_entry** %22, align 8
  %24 = load i64, i64* %5, align 8
  %25 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %23, i64 %24
  ret %struct.hash_entry* %25
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.hash_table* @hash_initialize(i64 %0, %struct.hash_tuning* %1, i64 (i8*, i64)* %2, i1 (i8*, i8*)* %3, void (i8*)* %4) #0 {
  %6 = alloca %struct.hash_table*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.hash_tuning*, align 8
  %9 = alloca i64 (i8*, i64)*, align 8
  %10 = alloca i1 (i8*, i8*)*, align 8
  %11 = alloca void (i8*)*, align 8
  %12 = alloca %struct.hash_table*, align 8
  store i64 %0, i64* %7, align 8
  store %struct.hash_tuning* %1, %struct.hash_tuning** %8, align 8
  store i64 (i8*, i64)* %2, i64 (i8*, i64)** %9, align 8
  store i1 (i8*, i8*)* %3, i1 (i8*, i8*)** %10, align 8
  store void (i8*)* %4, void (i8*)** %11, align 8
  %13 = load i64 (i8*, i64)*, i64 (i8*, i64)** %9, align 8
  %14 = icmp eq i64 (i8*, i64)* %13, null
  br i1 %14, label %15, label %16

15:                                               ; preds = %5
  store i64 (i8*, i64)* @raw_hasher, i64 (i8*, i64)** %9, align 8
  br label %16

16:                                               ; preds = %15, %5
  %17 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %10, align 8
  %18 = icmp eq i1 (i8*, i8*)* %17, null
  br i1 %18, label %19, label %20

19:                                               ; preds = %16
  store i1 (i8*, i8*)* @raw_comparator, i1 (i8*, i8*)** %10, align 8
  br label %20

20:                                               ; preds = %19, %16
  %21 = call noalias i8* @malloc(i64 80) #14
  %22 = bitcast i8* %21 to %struct.hash_table*
  store %struct.hash_table* %22, %struct.hash_table** %12, align 8
  %23 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  %24 = icmp eq %struct.hash_table* %23, null
  br i1 %24, label %25, label %26

25:                                               ; preds = %20
  store %struct.hash_table* null, %struct.hash_table** %6, align 8
  br label %90

26:                                               ; preds = %20
  %27 = load %struct.hash_tuning*, %struct.hash_tuning** %8, align 8
  %28 = icmp ne %struct.hash_tuning* %27, null
  br i1 %28, label %30, label %29

29:                                               ; preds = %26
  store %struct.hash_tuning* @default_tuning, %struct.hash_tuning** %8, align 8
  br label %30

30:                                               ; preds = %29, %26
  %31 = load %struct.hash_tuning*, %struct.hash_tuning** %8, align 8
  %32 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  %33 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %32, i32 0, i32 5
  store %struct.hash_tuning* %31, %struct.hash_tuning** %33, align 8
  %34 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  %35 = call zeroext i1 @check_tuning(%struct.hash_table* %34)
  br i1 %35, label %37, label %36

36:                                               ; preds = %30
  br label %87

37:                                               ; preds = %30
  %38 = load i64, i64* %7, align 8
  %39 = load %struct.hash_tuning*, %struct.hash_tuning** %8, align 8
  %40 = call i64 @compute_bucket_size(i64 %38, %struct.hash_tuning* %39) #17
  %41 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  %42 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %41, i32 0, i32 2
  store i64 %40, i64* %42, align 8
  %43 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  %44 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %43, i32 0, i32 2
  %45 = load i64, i64* %44, align 8
  %46 = icmp ne i64 %45, 0
  br i1 %46, label %48, label %47

47:                                               ; preds = %37
  br label %87

48:                                               ; preds = %37
  %49 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  %50 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %49, i32 0, i32 2
  %51 = load i64, i64* %50, align 8
  %52 = call noalias i8* @calloc(i64 %51, i64 16) #14
  %53 = bitcast i8* %52 to %struct.hash_entry*
  %54 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  %55 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %54, i32 0, i32 0
  store %struct.hash_entry* %53, %struct.hash_entry** %55, align 8
  %56 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  %57 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %56, i32 0, i32 0
  %58 = load %struct.hash_entry*, %struct.hash_entry** %57, align 8
  %59 = icmp eq %struct.hash_entry* %58, null
  br i1 %59, label %60, label %61

60:                                               ; preds = %48
  br label %87

61:                                               ; preds = %48
  %62 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  %63 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %62, i32 0, i32 0
  %64 = load %struct.hash_entry*, %struct.hash_entry** %63, align 8
  %65 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  %66 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %65, i32 0, i32 2
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %64, i64 %67
  %69 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  %70 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %69, i32 0, i32 1
  store %struct.hash_entry* %68, %struct.hash_entry** %70, align 8
  %71 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  %72 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %71, i32 0, i32 3
  store i64 0, i64* %72, align 8
  %73 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  %74 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %73, i32 0, i32 4
  store i64 0, i64* %74, align 8
  %75 = load i64 (i8*, i64)*, i64 (i8*, i64)** %9, align 8
  %76 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  %77 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %76, i32 0, i32 6
  store i64 (i8*, i64)* %75, i64 (i8*, i64)** %77, align 8
  %78 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %10, align 8
  %79 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  %80 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %79, i32 0, i32 7
  store i1 (i8*, i8*)* %78, i1 (i8*, i8*)** %80, align 8
  %81 = load void (i8*)*, void (i8*)** %11, align 8
  %82 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  %83 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %82, i32 0, i32 8
  store void (i8*)* %81, void (i8*)** %83, align 8
  %84 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  %85 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %84, i32 0, i32 9
  store %struct.hash_entry* null, %struct.hash_entry** %85, align 8
  %86 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  store %struct.hash_table* %86, %struct.hash_table** %6, align 8
  br label %90

87:                                               ; preds = %60, %47, %36
  %88 = load %struct.hash_table*, %struct.hash_table** %12, align 8
  %89 = bitcast %struct.hash_table* %88 to i8*
  call void @free(i8* %89) #14
  store %struct.hash_table* null, %struct.hash_table** %6, align 8
  br label %90

90:                                               ; preds = %87, %61, %25
  %91 = load %struct.hash_table*, %struct.hash_table** %6, align 8
  ret %struct.hash_table* %91
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @raw_hasher(i8* %0, i64 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %6 = load i8*, i8** %3, align 8
  %7 = ptrtoint i8* %6 to i64
  %8 = call i64 @rotr_sz(i64 %7, i32 3)
  store i64 %8, i64* %5, align 8
  %9 = load i64, i64* %5, align 8
  %10 = load i64, i64* %4, align 8
  %11 = urem i64 %9, %10
  ret i64 %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @raw_comparator(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = load i8*, i8** %4, align 8
  %7 = icmp eq i8* %5, %6
  ret i1 %7
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @check_tuning(%struct.hash_table* %0) #0 {
  %2 = alloca i1, align 1
  %3 = alloca %struct.hash_table*, align 8
  %4 = alloca %struct.hash_tuning*, align 8
  %5 = alloca float, align 4
  store %struct.hash_table* %0, %struct.hash_table** %3, align 8
  %6 = load %struct.hash_table*, %struct.hash_table** %3, align 8
  %7 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %6, i32 0, i32 5
  %8 = load %struct.hash_tuning*, %struct.hash_tuning** %7, align 8
  store %struct.hash_tuning* %8, %struct.hash_tuning** %4, align 8
  %9 = load %struct.hash_tuning*, %struct.hash_tuning** %4, align 8
  %10 = icmp eq %struct.hash_tuning* %9, @default_tuning
  br i1 %10, label %11, label %12

11:                                               ; preds = %1
  store i1 true, i1* %2, align 1
  br label %66

12:                                               ; preds = %1
  store float 0x3FB99999A0000000, float* %5, align 4
  %13 = load float, float* %5, align 4
  %14 = load %struct.hash_tuning*, %struct.hash_tuning** %4, align 8
  %15 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %14, i32 0, i32 2
  %16 = load float, float* %15, align 4
  %17 = fcmp olt float %13, %16
  br i1 %17, label %18, label %63

18:                                               ; preds = %12
  %19 = load %struct.hash_tuning*, %struct.hash_tuning** %4, align 8
  %20 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %19, i32 0, i32 2
  %21 = load float, float* %20, align 4
  %22 = load float, float* %5, align 4
  %23 = fsub float 1.000000e+00, %22
  %24 = fcmp olt float %21, %23
  br i1 %24, label %25, label %63

25:                                               ; preds = %18
  %26 = load float, float* %5, align 4
  %27 = fadd float 1.000000e+00, %26
  %28 = load %struct.hash_tuning*, %struct.hash_tuning** %4, align 8
  %29 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %28, i32 0, i32 3
  %30 = load float, float* %29, align 4
  %31 = fcmp olt float %27, %30
  br i1 %31, label %32, label %63

32:                                               ; preds = %25
  %33 = load %struct.hash_tuning*, %struct.hash_tuning** %4, align 8
  %34 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %33, i32 0, i32 0
  %35 = load float, float* %34, align 4
  %36 = fcmp ole float 0.000000e+00, %35
  br i1 %36, label %37, label %63

37:                                               ; preds = %32
  %38 = load %struct.hash_tuning*, %struct.hash_tuning** %4, align 8
  %39 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %38, i32 0, i32 0
  %40 = load float, float* %39, align 4
  %41 = load float, float* %5, align 4
  %42 = fadd float %40, %41
  %43 = load %struct.hash_tuning*, %struct.hash_tuning** %4, align 8
  %44 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %43, i32 0, i32 1
  %45 = load float, float* %44, align 4
  %46 = fcmp olt float %42, %45
  br i1 %46, label %47, label %63

47:                                               ; preds = %37
  %48 = load %struct.hash_tuning*, %struct.hash_tuning** %4, align 8
  %49 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %48, i32 0, i32 1
  %50 = load float, float* %49, align 4
  %51 = fcmp ole float %50, 1.000000e+00
  br i1 %51, label %52, label %63

52:                                               ; preds = %47
  %53 = load %struct.hash_tuning*, %struct.hash_tuning** %4, align 8
  %54 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %53, i32 0, i32 0
  %55 = load float, float* %54, align 4
  %56 = load float, float* %5, align 4
  %57 = fadd float %55, %56
  %58 = load %struct.hash_tuning*, %struct.hash_tuning** %4, align 8
  %59 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %58, i32 0, i32 2
  %60 = load float, float* %59, align 4
  %61 = fcmp olt float %57, %60
  br i1 %61, label %62, label %63

62:                                               ; preds = %52
  store i1 true, i1* %2, align 1
  br label %66

63:                                               ; preds = %52, %47, %37, %32, %25, %18, %12
  %64 = load %struct.hash_table*, %struct.hash_table** %3, align 8
  %65 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %64, i32 0, i32 5
  store %struct.hash_tuning* @default_tuning, %struct.hash_tuning** %65, align 8
  store i1 false, i1* %2, align 1
  br label %66

66:                                               ; preds = %63, %62, %11
  %67 = load i1, i1* %2, align 1
  ret i1 %67
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i64 @compute_bucket_size(i64 %0, %struct.hash_tuning* %1) #9 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %struct.hash_tuning*, align 8
  %6 = alloca float, align 4
  store i64 %0, i64* %4, align 8
  store %struct.hash_tuning* %1, %struct.hash_tuning** %5, align 8
  %7 = load %struct.hash_tuning*, %struct.hash_tuning** %5, align 8
  %8 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %7, i32 0, i32 4
  %9 = load i8, i8* %8, align 4
  %10 = trunc i8 %9 to i1
  br i1 %10, label %24, label %11

11:                                               ; preds = %2
  %12 = load i64, i64* %4, align 8
  %13 = uitofp i64 %12 to float
  %14 = load %struct.hash_tuning*, %struct.hash_tuning** %5, align 8
  %15 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %14, i32 0, i32 2
  %16 = load float, float* %15, align 4
  %17 = fdiv float %13, %16
  store float %17, float* %6, align 4
  %18 = load float, float* %6, align 4
  %19 = fcmp ole float 0x43F0000000000000, %18
  br i1 %19, label %20, label %21

20:                                               ; preds = %11
  store i64 0, i64* %3, align 8
  br label %32

21:                                               ; preds = %11
  %22 = load float, float* %6, align 4
  %23 = fptoui float %22 to i64
  store i64 %23, i64* %4, align 8
  br label %24

24:                                               ; preds = %21, %2
  %25 = load i64, i64* %4, align 8
  %26 = call i64 @next_prime(i64 %25) #18
  store i64 %26, i64* %4, align 8
  %27 = load i64, i64* %4, align 8
  %28 = icmp ult i64 1152921504606846975, %27
  br i1 %28, label %29, label %30

29:                                               ; preds = %24
  store i64 0, i64* %3, align 8
  br label %32

30:                                               ; preds = %24
  %31 = load i64, i64* %4, align 8
  store i64 %31, i64* %3, align 8
  br label %32

32:                                               ; preds = %30, %29, %20
  %33 = load i64, i64* %3, align 8
  ret i64 %33
}

; Function Attrs: nounwind
declare dso_local noalias i8* @calloc(i64, i64) #1

; Function Attrs: noinline nounwind optnone readnone uwtable
define internal i64 @next_prime(i64 %0) #12 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = icmp ult i64 %3, 10
  br i1 %4, label %5, label %6

5:                                                ; preds = %1
  store i64 10, i64* %2, align 8
  br label %6

6:                                                ; preds = %5, %1
  %7 = load i64, i64* %2, align 8
  %8 = or i64 %7, 1
  store i64 %8, i64* %2, align 8
  br label %9

9:                                                ; preds = %18, %6
  %10 = load i64, i64* %2, align 8
  %11 = icmp ne i64 -1, %10
  br i1 %11, label %12, label %16

12:                                               ; preds = %9
  %13 = load i64, i64* %2, align 8
  %14 = call zeroext i1 @is_prime(i64 %13) #18
  %15 = xor i1 %14, true
  br label %16

16:                                               ; preds = %12, %9
  %17 = phi i1 [ false, %9 ], [ %15, %12 ]
  br i1 %17, label %18, label %21

18:                                               ; preds = %16
  %19 = load i64, i64* %2, align 8
  %20 = add i64 %19, 2
  store i64 %20, i64* %2, align 8
  br label %9, !llvm.loop !80

21:                                               ; preds = %16
  %22 = load i64, i64* %2, align 8
  ret i64 %22
}

; Function Attrs: noinline nounwind optnone readnone uwtable
define internal zeroext i1 @is_prime(i64 %0) #12 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  store i64 3, i64* %3, align 8
  %5 = load i64, i64* %3, align 8
  %6 = load i64, i64* %3, align 8
  %7 = mul i64 %5, %6
  store i64 %7, i64* %4, align 8
  br label %8

8:                                                ; preds = %19, %1
  %9 = load i64, i64* %4, align 8
  %10 = load i64, i64* %2, align 8
  %11 = icmp ult i64 %9, %10
  br i1 %11, label %12, label %17

12:                                               ; preds = %8
  %13 = load i64, i64* %2, align 8
  %14 = load i64, i64* %3, align 8
  %15 = urem i64 %13, %14
  %16 = icmp ne i64 %15, 0
  br label %17

17:                                               ; preds = %12, %8
  %18 = phi i1 [ false, %8 ], [ %16, %12 ]
  br i1 %18, label %19, label %28

19:                                               ; preds = %17
  %20 = load i64, i64* %3, align 8
  %21 = add i64 %20, 1
  store i64 %21, i64* %3, align 8
  %22 = load i64, i64* %3, align 8
  %23 = mul i64 4, %22
  %24 = load i64, i64* %4, align 8
  %25 = add i64 %24, %23
  store i64 %25, i64* %4, align 8
  %26 = load i64, i64* %3, align 8
  %27 = add i64 %26, 1
  store i64 %27, i64* %3, align 8
  br label %8, !llvm.loop !81

28:                                               ; preds = %17
  %29 = load i64, i64* %2, align 8
  %30 = load i64, i64* %3, align 8
  %31 = urem i64 %29, %30
  %32 = icmp ne i64 %31, 0
  %33 = zext i1 %32 to i64
  %34 = select i1 %32, i32 1, i32 0
  %35 = icmp ne i32 %34, 0
  ret i1 %35
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @hash_free(%struct.hash_table* %0) #0 {
  %2 = alloca %struct.hash_table*, align 8
  %3 = alloca %struct.hash_entry*, align 8
  %4 = alloca %struct.hash_entry*, align 8
  %5 = alloca %struct.hash_entry*, align 8
  store %struct.hash_table* %0, %struct.hash_table** %2, align 8
  %6 = load %struct.hash_table*, %struct.hash_table** %2, align 8
  %7 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %6, i32 0, i32 8
  %8 = load void (i8*)*, void (i8*)** %7, align 8
  %9 = icmp ne void (i8*)* %8, null
  br i1 %9, label %10, label %52

10:                                               ; preds = %1
  %11 = load %struct.hash_table*, %struct.hash_table** %2, align 8
  %12 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %11, i32 0, i32 4
  %13 = load i64, i64* %12, align 8
  %14 = icmp ne i64 %13, 0
  br i1 %14, label %15, label %52

15:                                               ; preds = %10
  %16 = load %struct.hash_table*, %struct.hash_table** %2, align 8
  %17 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %16, i32 0, i32 0
  %18 = load %struct.hash_entry*, %struct.hash_entry** %17, align 8
  store %struct.hash_entry* %18, %struct.hash_entry** %3, align 8
  br label %19

19:                                               ; preds = %48, %15
  %20 = load %struct.hash_entry*, %struct.hash_entry** %3, align 8
  %21 = load %struct.hash_table*, %struct.hash_table** %2, align 8
  %22 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %21, i32 0, i32 1
  %23 = load %struct.hash_entry*, %struct.hash_entry** %22, align 8
  %24 = icmp ult %struct.hash_entry* %20, %23
  br i1 %24, label %25, label %51

25:                                               ; preds = %19
  %26 = load %struct.hash_entry*, %struct.hash_entry** %3, align 8
  %27 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %26, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = icmp ne i8* %28, null
  br i1 %29, label %30, label %47

30:                                               ; preds = %25
  %31 = load %struct.hash_entry*, %struct.hash_entry** %3, align 8
  store %struct.hash_entry* %31, %struct.hash_entry** %4, align 8
  br label %32

32:                                               ; preds = %42, %30
  %33 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  %34 = icmp ne %struct.hash_entry* %33, null
  br i1 %34, label %35, label %46

35:                                               ; preds = %32
  %36 = load %struct.hash_table*, %struct.hash_table** %2, align 8
  %37 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %36, i32 0, i32 8
  %38 = load void (i8*)*, void (i8*)** %37, align 8
  %39 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  %40 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %39, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  call void %38(i8* %41)
  br label %42

42:                                               ; preds = %35
  %43 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  %44 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %43, i32 0, i32 1
  %45 = load %struct.hash_entry*, %struct.hash_entry** %44, align 8
  store %struct.hash_entry* %45, %struct.hash_entry** %4, align 8
  br label %32, !llvm.loop !82

46:                                               ; preds = %32
  br label %47

47:                                               ; preds = %46, %25
  br label %48

48:                                               ; preds = %47
  %49 = load %struct.hash_entry*, %struct.hash_entry** %3, align 8
  %50 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %49, i32 1
  store %struct.hash_entry* %50, %struct.hash_entry** %3, align 8
  br label %19, !llvm.loop !83

51:                                               ; preds = %19
  br label %52

52:                                               ; preds = %51, %10, %1
  %53 = load %struct.hash_table*, %struct.hash_table** %2, align 8
  %54 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %53, i32 0, i32 0
  %55 = load %struct.hash_entry*, %struct.hash_entry** %54, align 8
  store %struct.hash_entry* %55, %struct.hash_entry** %3, align 8
  br label %56

56:                                               ; preds = %78, %52
  %57 = load %struct.hash_entry*, %struct.hash_entry** %3, align 8
  %58 = load %struct.hash_table*, %struct.hash_table** %2, align 8
  %59 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %58, i32 0, i32 1
  %60 = load %struct.hash_entry*, %struct.hash_entry** %59, align 8
  %61 = icmp ult %struct.hash_entry* %57, %60
  br i1 %61, label %62, label %81

62:                                               ; preds = %56
  %63 = load %struct.hash_entry*, %struct.hash_entry** %3, align 8
  %64 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %63, i32 0, i32 1
  %65 = load %struct.hash_entry*, %struct.hash_entry** %64, align 8
  store %struct.hash_entry* %65, %struct.hash_entry** %4, align 8
  br label %66

66:                                               ; preds = %75, %62
  %67 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  %68 = icmp ne %struct.hash_entry* %67, null
  br i1 %68, label %69, label %77

69:                                               ; preds = %66
  %70 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  %71 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %70, i32 0, i32 1
  %72 = load %struct.hash_entry*, %struct.hash_entry** %71, align 8
  store %struct.hash_entry* %72, %struct.hash_entry** %5, align 8
  %73 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  %74 = bitcast %struct.hash_entry* %73 to i8*
  call void @free(i8* %74) #14
  br label %75

75:                                               ; preds = %69
  %76 = load %struct.hash_entry*, %struct.hash_entry** %5, align 8
  store %struct.hash_entry* %76, %struct.hash_entry** %4, align 8
  br label %66, !llvm.loop !84

77:                                               ; preds = %66
  br label %78

78:                                               ; preds = %77
  %79 = load %struct.hash_entry*, %struct.hash_entry** %3, align 8
  %80 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %79, i32 1
  store %struct.hash_entry* %80, %struct.hash_entry** %3, align 8
  br label %56, !llvm.loop !85

81:                                               ; preds = %56
  %82 = load %struct.hash_table*, %struct.hash_table** %2, align 8
  %83 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %82, i32 0, i32 9
  %84 = load %struct.hash_entry*, %struct.hash_entry** %83, align 8
  store %struct.hash_entry* %84, %struct.hash_entry** %4, align 8
  br label %85

85:                                               ; preds = %94, %81
  %86 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  %87 = icmp ne %struct.hash_entry* %86, null
  br i1 %87, label %88, label %96

88:                                               ; preds = %85
  %89 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  %90 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %89, i32 0, i32 1
  %91 = load %struct.hash_entry*, %struct.hash_entry** %90, align 8
  store %struct.hash_entry* %91, %struct.hash_entry** %5, align 8
  %92 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  %93 = bitcast %struct.hash_entry* %92 to i8*
  call void @free(i8* %93) #14
  br label %94

94:                                               ; preds = %88
  %95 = load %struct.hash_entry*, %struct.hash_entry** %5, align 8
  store %struct.hash_entry* %95, %struct.hash_entry** %4, align 8
  br label %85, !llvm.loop !86

96:                                               ; preds = %85
  %97 = load %struct.hash_table*, %struct.hash_table** %2, align 8
  %98 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %97, i32 0, i32 0
  %99 = load %struct.hash_entry*, %struct.hash_entry** %98, align 8
  %100 = bitcast %struct.hash_entry* %99 to i8*
  call void @free(i8* %100) #14
  %101 = load %struct.hash_table*, %struct.hash_table** %2, align 8
  %102 = bitcast %struct.hash_table* %101 to i8*
  call void @free(i8* %102) #14
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hash_rehash(%struct.hash_table* %0, i64 %1) #0 {
  %3 = alloca i1, align 1
  %4 = alloca %struct.hash_table*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.hash_table, align 8
  %7 = alloca %struct.hash_table*, align 8
  %8 = alloca i64, align 8
  store %struct.hash_table* %0, %struct.hash_table** %4, align 8
  store i64 %1, i64* %5, align 8
  %9 = load i64, i64* %5, align 8
  %10 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %11 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %10, i32 0, i32 5
  %12 = load %struct.hash_tuning*, %struct.hash_tuning** %11, align 8
  %13 = call i64 @compute_bucket_size(i64 %9, %struct.hash_tuning* %12) #17
  store i64 %13, i64* %8, align 8
  %14 = load i64, i64* %8, align 8
  %15 = icmp ne i64 %14, 0
  br i1 %15, label %17, label %16

16:                                               ; preds = %2
  store i1 false, i1* %3, align 1
  br label %127

17:                                               ; preds = %2
  %18 = load i64, i64* %8, align 8
  %19 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %20 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %19, i32 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = icmp eq i64 %18, %21
  br i1 %22, label %23, label %24

23:                                               ; preds = %17
  store i1 true, i1* %3, align 1
  br label %127

24:                                               ; preds = %17
  store %struct.hash_table* %6, %struct.hash_table** %7, align 8
  %25 = load i64, i64* %8, align 8
  %26 = call noalias i8* @calloc(i64 %25, i64 16) #14
  %27 = bitcast i8* %26 to %struct.hash_entry*
  %28 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %29 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %28, i32 0, i32 0
  store %struct.hash_entry* %27, %struct.hash_entry** %29, align 8
  %30 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %31 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %30, i32 0, i32 0
  %32 = load %struct.hash_entry*, %struct.hash_entry** %31, align 8
  %33 = icmp eq %struct.hash_entry* %32, null
  br i1 %33, label %34, label %35

34:                                               ; preds = %24
  store i1 false, i1* %3, align 1
  br label %127

35:                                               ; preds = %24
  %36 = load i64, i64* %8, align 8
  %37 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %38 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %37, i32 0, i32 2
  store i64 %36, i64* %38, align 8
  %39 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %40 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %39, i32 0, i32 0
  %41 = load %struct.hash_entry*, %struct.hash_entry** %40, align 8
  %42 = load i64, i64* %8, align 8
  %43 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %41, i64 %42
  %44 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %45 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %44, i32 0, i32 1
  store %struct.hash_entry* %43, %struct.hash_entry** %45, align 8
  %46 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %47 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %46, i32 0, i32 3
  store i64 0, i64* %47, align 8
  %48 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %49 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %48, i32 0, i32 4
  store i64 0, i64* %49, align 8
  %50 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %51 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %50, i32 0, i32 5
  %52 = load %struct.hash_tuning*, %struct.hash_tuning** %51, align 8
  %53 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %54 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %53, i32 0, i32 5
  store %struct.hash_tuning* %52, %struct.hash_tuning** %54, align 8
  %55 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %56 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %55, i32 0, i32 6
  %57 = load i64 (i8*, i64)*, i64 (i8*, i64)** %56, align 8
  %58 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %59 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %58, i32 0, i32 6
  store i64 (i8*, i64)* %57, i64 (i8*, i64)** %59, align 8
  %60 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %61 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %60, i32 0, i32 7
  %62 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %61, align 8
  %63 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %64 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %63, i32 0, i32 7
  store i1 (i8*, i8*)* %62, i1 (i8*, i8*)** %64, align 8
  %65 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %66 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %65, i32 0, i32 8
  %67 = load void (i8*)*, void (i8*)** %66, align 8
  %68 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %69 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %68, i32 0, i32 8
  store void (i8*)* %67, void (i8*)** %69, align 8
  %70 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %71 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %70, i32 0, i32 9
  %72 = load %struct.hash_entry*, %struct.hash_entry** %71, align 8
  %73 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %74 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %73, i32 0, i32 9
  store %struct.hash_entry* %72, %struct.hash_entry** %74, align 8
  %75 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %76 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %77 = call zeroext i1 @transfer_entries(%struct.hash_table* %75, %struct.hash_table* %76, i1 zeroext false)
  br i1 %77, label %78, label %108

78:                                               ; preds = %35
  %79 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %80 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %79, i32 0, i32 0
  %81 = load %struct.hash_entry*, %struct.hash_entry** %80, align 8
  %82 = bitcast %struct.hash_entry* %81 to i8*
  call void @free(i8* %82) #14
  %83 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %84 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %83, i32 0, i32 0
  %85 = load %struct.hash_entry*, %struct.hash_entry** %84, align 8
  %86 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %87 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %86, i32 0, i32 0
  store %struct.hash_entry* %85, %struct.hash_entry** %87, align 8
  %88 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %89 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %88, i32 0, i32 1
  %90 = load %struct.hash_entry*, %struct.hash_entry** %89, align 8
  %91 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %92 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %91, i32 0, i32 1
  store %struct.hash_entry* %90, %struct.hash_entry** %92, align 8
  %93 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %94 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %93, i32 0, i32 2
  %95 = load i64, i64* %94, align 8
  %96 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %97 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %96, i32 0, i32 2
  store i64 %95, i64* %97, align 8
  %98 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %99 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %98, i32 0, i32 3
  %100 = load i64, i64* %99, align 8
  %101 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %102 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %101, i32 0, i32 3
  store i64 %100, i64* %102, align 8
  %103 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %104 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %103, i32 0, i32 9
  %105 = load %struct.hash_entry*, %struct.hash_entry** %104, align 8
  %106 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %107 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %106, i32 0, i32 9
  store %struct.hash_entry* %105, %struct.hash_entry** %107, align 8
  store i1 true, i1* %3, align 1
  br label %127

108:                                              ; preds = %35
  %109 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %110 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %109, i32 0, i32 9
  %111 = load %struct.hash_entry*, %struct.hash_entry** %110, align 8
  %112 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %113 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %112, i32 0, i32 9
  store %struct.hash_entry* %111, %struct.hash_entry** %113, align 8
  %114 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %115 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %116 = call zeroext i1 @transfer_entries(%struct.hash_table* %114, %struct.hash_table* %115, i1 zeroext true)
  br i1 %116, label %117, label %121

117:                                              ; preds = %108
  %118 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %119 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %120 = call zeroext i1 @transfer_entries(%struct.hash_table* %118, %struct.hash_table* %119, i1 zeroext false)
  br i1 %120, label %122, label %121

121:                                              ; preds = %117, %108
  call void @abort() #16
  unreachable

122:                                              ; preds = %117
  %123 = load %struct.hash_table*, %struct.hash_table** %7, align 8
  %124 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %123, i32 0, i32 0
  %125 = load %struct.hash_entry*, %struct.hash_entry** %124, align 8
  %126 = bitcast %struct.hash_entry* %125 to i8*
  call void @free(i8* %126) #14
  store i1 false, i1* %3, align 1
  br label %127

127:                                              ; preds = %122, %78, %34, %23, %16
  %128 = load i1, i1* %3, align 1
  ret i1 %128
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @transfer_entries(%struct.hash_table* %0, %struct.hash_table* %1, i1 zeroext %2) #0 {
  %4 = alloca i1, align 1
  %5 = alloca %struct.hash_table*, align 8
  %6 = alloca %struct.hash_table*, align 8
  %7 = alloca i8, align 1
  %8 = alloca %struct.hash_entry*, align 8
  %9 = alloca %struct.hash_entry*, align 8
  %10 = alloca %struct.hash_entry*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca %struct.hash_entry*, align 8
  %13 = alloca %struct.hash_entry*, align 8
  store %struct.hash_table* %0, %struct.hash_table** %5, align 8
  store %struct.hash_table* %1, %struct.hash_table** %6, align 8
  %14 = zext i1 %2 to i8
  store i8 %14, i8* %7, align 1
  %15 = load %struct.hash_table*, %struct.hash_table** %6, align 8
  %16 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %15, i32 0, i32 0
  %17 = load %struct.hash_entry*, %struct.hash_entry** %16, align 8
  store %struct.hash_entry* %17, %struct.hash_entry** %8, align 8
  br label %18

18:                                               ; preds = %123, %3
  %19 = load %struct.hash_entry*, %struct.hash_entry** %8, align 8
  %20 = load %struct.hash_table*, %struct.hash_table** %6, align 8
  %21 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %20, i32 0, i32 1
  %22 = load %struct.hash_entry*, %struct.hash_entry** %21, align 8
  %23 = icmp ult %struct.hash_entry* %19, %22
  br i1 %23, label %24, label %126

24:                                               ; preds = %18
  %25 = load %struct.hash_entry*, %struct.hash_entry** %8, align 8
  %26 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %25, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = icmp ne i8* %27, null
  br i1 %28, label %29, label %122

29:                                               ; preds = %24
  %30 = load %struct.hash_entry*, %struct.hash_entry** %8, align 8
  %31 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %30, i32 0, i32 1
  %32 = load %struct.hash_entry*, %struct.hash_entry** %31, align 8
  store %struct.hash_entry* %32, %struct.hash_entry** %9, align 8
  br label %33

33:                                               ; preds = %70, %29
  %34 = load %struct.hash_entry*, %struct.hash_entry** %9, align 8
  %35 = icmp ne %struct.hash_entry* %34, null
  br i1 %35, label %36, label %72

36:                                               ; preds = %33
  %37 = load %struct.hash_entry*, %struct.hash_entry** %9, align 8
  %38 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %37, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  store i8* %39, i8** %11, align 8
  %40 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %41 = load i8*, i8** %11, align 8
  %42 = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %40, i8* %41)
  store %struct.hash_entry* %42, %struct.hash_entry** %12, align 8
  %43 = load %struct.hash_entry*, %struct.hash_entry** %9, align 8
  %44 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %43, i32 0, i32 1
  %45 = load %struct.hash_entry*, %struct.hash_entry** %44, align 8
  store %struct.hash_entry* %45, %struct.hash_entry** %10, align 8
  %46 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  %47 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %46, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = icmp ne i8* %48, null
  br i1 %49, label %50, label %59

50:                                               ; preds = %36
  %51 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  %52 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %51, i32 0, i32 1
  %53 = load %struct.hash_entry*, %struct.hash_entry** %52, align 8
  %54 = load %struct.hash_entry*, %struct.hash_entry** %9, align 8
  %55 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %54, i32 0, i32 1
  store %struct.hash_entry* %53, %struct.hash_entry** %55, align 8
  %56 = load %struct.hash_entry*, %struct.hash_entry** %9, align 8
  %57 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  %58 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %57, i32 0, i32 1
  store %struct.hash_entry* %56, %struct.hash_entry** %58, align 8
  br label %69

59:                                               ; preds = %36
  %60 = load i8*, i8** %11, align 8
  %61 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  %62 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %61, i32 0, i32 0
  store i8* %60, i8** %62, align 8
  %63 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %64 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %63, i32 0, i32 3
  %65 = load i64, i64* %64, align 8
  %66 = add i64 %65, 1
  store i64 %66, i64* %64, align 8
  %67 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %68 = load %struct.hash_entry*, %struct.hash_entry** %9, align 8
  call void @free_entry(%struct.hash_table* %67, %struct.hash_entry* %68)
  br label %69

69:                                               ; preds = %59, %50
  br label %70

70:                                               ; preds = %69
  %71 = load %struct.hash_entry*, %struct.hash_entry** %10, align 8
  store %struct.hash_entry* %71, %struct.hash_entry** %9, align 8
  br label %33, !llvm.loop !87

72:                                               ; preds = %33
  %73 = load %struct.hash_entry*, %struct.hash_entry** %8, align 8
  %74 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %73, i32 0, i32 0
  %75 = load i8*, i8** %74, align 8
  store i8* %75, i8** %11, align 8
  %76 = load %struct.hash_entry*, %struct.hash_entry** %8, align 8
  %77 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %76, i32 0, i32 1
  store %struct.hash_entry* null, %struct.hash_entry** %77, align 8
  %78 = load i8, i8* %7, align 1
  %79 = trunc i8 %78 to i1
  br i1 %79, label %80, label %81

80:                                               ; preds = %72
  br label %123

81:                                               ; preds = %72
  %82 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %83 = load i8*, i8** %11, align 8
  %84 = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %82, i8* %83)
  store %struct.hash_entry* %84, %struct.hash_entry** %12, align 8
  %85 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  %86 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %85, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8
  %88 = icmp ne i8* %87, null
  br i1 %88, label %89, label %107

89:                                               ; preds = %81
  %90 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %91 = call %struct.hash_entry* @allocate_entry(%struct.hash_table* %90)
  store %struct.hash_entry* %91, %struct.hash_entry** %13, align 8
  %92 = load %struct.hash_entry*, %struct.hash_entry** %13, align 8
  %93 = icmp eq %struct.hash_entry* %92, null
  br i1 %93, label %94, label %95

94:                                               ; preds = %89
  store i1 false, i1* %4, align 1
  br label %127

95:                                               ; preds = %89
  %96 = load i8*, i8** %11, align 8
  %97 = load %struct.hash_entry*, %struct.hash_entry** %13, align 8
  %98 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %97, i32 0, i32 0
  store i8* %96, i8** %98, align 8
  %99 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  %100 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %99, i32 0, i32 1
  %101 = load %struct.hash_entry*, %struct.hash_entry** %100, align 8
  %102 = load %struct.hash_entry*, %struct.hash_entry** %13, align 8
  %103 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %102, i32 0, i32 1
  store %struct.hash_entry* %101, %struct.hash_entry** %103, align 8
  %104 = load %struct.hash_entry*, %struct.hash_entry** %13, align 8
  %105 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  %106 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %105, i32 0, i32 1
  store %struct.hash_entry* %104, %struct.hash_entry** %106, align 8
  br label %115

107:                                              ; preds = %81
  %108 = load i8*, i8** %11, align 8
  %109 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  %110 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %109, i32 0, i32 0
  store i8* %108, i8** %110, align 8
  %111 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %112 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %111, i32 0, i32 3
  %113 = load i64, i64* %112, align 8
  %114 = add i64 %113, 1
  store i64 %114, i64* %112, align 8
  br label %115

115:                                              ; preds = %107, %95
  %116 = load %struct.hash_entry*, %struct.hash_entry** %8, align 8
  %117 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %116, i32 0, i32 0
  store i8* null, i8** %117, align 8
  %118 = load %struct.hash_table*, %struct.hash_table** %6, align 8
  %119 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %118, i32 0, i32 3
  %120 = load i64, i64* %119, align 8
  %121 = add i64 %120, -1
  store i64 %121, i64* %119, align 8
  br label %122

122:                                              ; preds = %115, %24
  br label %123

123:                                              ; preds = %122, %80
  %124 = load %struct.hash_entry*, %struct.hash_entry** %8, align 8
  %125 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %124, i32 1
  store %struct.hash_entry* %125, %struct.hash_entry** %8, align 8
  br label %18, !llvm.loop !88

126:                                              ; preds = %18
  store i1 true, i1* %4, align 1
  br label %127

127:                                              ; preds = %126, %94
  %128 = load i1, i1* %4, align 1
  ret i1 %128
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @free_entry(%struct.hash_table* %0, %struct.hash_entry* %1) #0 {
  %3 = alloca %struct.hash_table*, align 8
  %4 = alloca %struct.hash_entry*, align 8
  store %struct.hash_table* %0, %struct.hash_table** %3, align 8
  store %struct.hash_entry* %1, %struct.hash_entry** %4, align 8
  %5 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  %6 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %5, i32 0, i32 0
  store i8* null, i8** %6, align 8
  %7 = load %struct.hash_table*, %struct.hash_table** %3, align 8
  %8 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %7, i32 0, i32 9
  %9 = load %struct.hash_entry*, %struct.hash_entry** %8, align 8
  %10 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  %11 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %10, i32 0, i32 1
  store %struct.hash_entry* %9, %struct.hash_entry** %11, align 8
  %12 = load %struct.hash_entry*, %struct.hash_entry** %4, align 8
  %13 = load %struct.hash_table*, %struct.hash_table** %3, align 8
  %14 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %13, i32 0, i32 9
  store %struct.hash_entry* %12, %struct.hash_entry** %14, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.hash_entry* @allocate_entry(%struct.hash_table* %0) #0 {
  %2 = alloca %struct.hash_table*, align 8
  %3 = alloca %struct.hash_entry*, align 8
  store %struct.hash_table* %0, %struct.hash_table** %2, align 8
  %4 = load %struct.hash_table*, %struct.hash_table** %2, align 8
  %5 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %4, i32 0, i32 9
  %6 = load %struct.hash_entry*, %struct.hash_entry** %5, align 8
  %7 = icmp ne %struct.hash_entry* %6, null
  br i1 %7, label %8, label %17

8:                                                ; preds = %1
  %9 = load %struct.hash_table*, %struct.hash_table** %2, align 8
  %10 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %9, i32 0, i32 9
  %11 = load %struct.hash_entry*, %struct.hash_entry** %10, align 8
  store %struct.hash_entry* %11, %struct.hash_entry** %3, align 8
  %12 = load %struct.hash_entry*, %struct.hash_entry** %3, align 8
  %13 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %12, i32 0, i32 1
  %14 = load %struct.hash_entry*, %struct.hash_entry** %13, align 8
  %15 = load %struct.hash_table*, %struct.hash_table** %2, align 8
  %16 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %15, i32 0, i32 9
  store %struct.hash_entry* %14, %struct.hash_entry** %16, align 8
  br label %20

17:                                               ; preds = %1
  %18 = call noalias i8* @malloc(i64 16) #14
  %19 = bitcast i8* %18 to %struct.hash_entry*
  store %struct.hash_entry* %19, %struct.hash_entry** %3, align 8
  br label %20

20:                                               ; preds = %17, %8
  %21 = load %struct.hash_entry*, %struct.hash_entry** %3, align 8
  ret %struct.hash_entry* %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @hash_insert_if_absent(%struct.hash_table* %0, i8* %1, i8** %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.hash_table*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8**, align 8
  %8 = alloca i8*, align 8
  %9 = alloca %struct.hash_entry*, align 8
  %10 = alloca %struct.hash_tuning*, align 8
  %11 = alloca float, align 4
  %12 = alloca %struct.hash_entry*, align 8
  store %struct.hash_table* %0, %struct.hash_table** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8** %2, i8*** %7, align 8
  %13 = load i8*, i8** %6, align 8
  %14 = icmp ne i8* %13, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %3
  call void @abort() #16
  unreachable

16:                                               ; preds = %3
  %17 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %18 = load i8*, i8** %6, align 8
  %19 = call i8* @hash_find_entry(%struct.hash_table* %17, i8* %18, %struct.hash_entry** %9, i1 zeroext false)
  store i8* %19, i8** %8, align 8
  %20 = icmp ne i8* %19, null
  br i1 %20, label %21, label %28

21:                                               ; preds = %16
  %22 = load i8**, i8*** %7, align 8
  %23 = icmp ne i8** %22, null
  br i1 %23, label %24, label %27

24:                                               ; preds = %21
  %25 = load i8*, i8** %8, align 8
  %26 = load i8**, i8*** %7, align 8
  store i8* %25, i8** %26, align 8
  br label %27

27:                                               ; preds = %24, %21
  store i32 0, i32* %4, align 4
  br label %150

28:                                               ; preds = %16
  %29 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %30 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %29, i32 0, i32 3
  %31 = load i64, i64* %30, align 8
  %32 = uitofp i64 %31 to float
  %33 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %34 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %33, i32 0, i32 5
  %35 = load %struct.hash_tuning*, %struct.hash_tuning** %34, align 8
  %36 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %35, i32 0, i32 2
  %37 = load float, float* %36, align 4
  %38 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %39 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %38, i32 0, i32 2
  %40 = load i64, i64* %39, align 8
  %41 = uitofp i64 %40 to float
  %42 = fmul float %37, %41
  %43 = fcmp ogt float %32, %42
  br i1 %43, label %44, label %111

44:                                               ; preds = %28
  %45 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %46 = call zeroext i1 @check_tuning(%struct.hash_table* %45)
  %47 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %48 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %47, i32 0, i32 3
  %49 = load i64, i64* %48, align 8
  %50 = uitofp i64 %49 to float
  %51 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %52 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %51, i32 0, i32 5
  %53 = load %struct.hash_tuning*, %struct.hash_tuning** %52, align 8
  %54 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %53, i32 0, i32 2
  %55 = load float, float* %54, align 4
  %56 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %57 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %56, i32 0, i32 2
  %58 = load i64, i64* %57, align 8
  %59 = uitofp i64 %58 to float
  %60 = fmul float %55, %59
  %61 = fcmp ogt float %50, %60
  br i1 %61, label %62, label %110

62:                                               ; preds = %44
  %63 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %64 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %63, i32 0, i32 5
  %65 = load %struct.hash_tuning*, %struct.hash_tuning** %64, align 8
  store %struct.hash_tuning* %65, %struct.hash_tuning** %10, align 8
  %66 = load %struct.hash_tuning*, %struct.hash_tuning** %10, align 8
  %67 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %66, i32 0, i32 4
  %68 = load i8, i8* %67, align 4
  %69 = trunc i8 %68 to i1
  br i1 %69, label %70, label %79

70:                                               ; preds = %62
  %71 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %72 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %71, i32 0, i32 2
  %73 = load i64, i64* %72, align 8
  %74 = uitofp i64 %73 to float
  %75 = load %struct.hash_tuning*, %struct.hash_tuning** %10, align 8
  %76 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %75, i32 0, i32 3
  %77 = load float, float* %76, align 4
  %78 = fmul float %74, %77
  br label %92

79:                                               ; preds = %62
  %80 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %81 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %80, i32 0, i32 2
  %82 = load i64, i64* %81, align 8
  %83 = uitofp i64 %82 to float
  %84 = load %struct.hash_tuning*, %struct.hash_tuning** %10, align 8
  %85 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %84, i32 0, i32 3
  %86 = load float, float* %85, align 4
  %87 = fmul float %83, %86
  %88 = load %struct.hash_tuning*, %struct.hash_tuning** %10, align 8
  %89 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %88, i32 0, i32 2
  %90 = load float, float* %89, align 4
  %91 = fmul float %87, %90
  br label %92

92:                                               ; preds = %79, %70
  %93 = phi float [ %78, %70 ], [ %91, %79 ]
  store float %93, float* %11, align 4
  %94 = load float, float* %11, align 4
  %95 = fcmp ole float 0x43F0000000000000, %94
  br i1 %95, label %96, label %97

96:                                               ; preds = %92
  store i32 -1, i32* %4, align 4
  br label %150

97:                                               ; preds = %92
  %98 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %99 = load float, float* %11, align 4
  %100 = fptoui float %99 to i64
  %101 = call zeroext i1 @hash_rehash(%struct.hash_table* %98, i64 %100)
  br i1 %101, label %103, label %102

102:                                              ; preds = %97
  store i32 -1, i32* %4, align 4
  br label %150

103:                                              ; preds = %97
  %104 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %105 = load i8*, i8** %6, align 8
  %106 = call i8* @hash_find_entry(%struct.hash_table* %104, i8* %105, %struct.hash_entry** %9, i1 zeroext false)
  %107 = icmp ne i8* %106, null
  br i1 %107, label %108, label %109

108:                                              ; preds = %103
  call void @abort() #16
  unreachable

109:                                              ; preds = %103
  br label %110

110:                                              ; preds = %109, %44
  br label %111

111:                                              ; preds = %110, %28
  %112 = load %struct.hash_entry*, %struct.hash_entry** %9, align 8
  %113 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %112, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8
  %115 = icmp ne i8* %114, null
  br i1 %115, label %116, label %138

116:                                              ; preds = %111
  %117 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %118 = call %struct.hash_entry* @allocate_entry(%struct.hash_table* %117)
  store %struct.hash_entry* %118, %struct.hash_entry** %12, align 8
  %119 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  %120 = icmp eq %struct.hash_entry* %119, null
  br i1 %120, label %121, label %122

121:                                              ; preds = %116
  store i32 -1, i32* %4, align 4
  br label %150

122:                                              ; preds = %116
  %123 = load i8*, i8** %6, align 8
  %124 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  %125 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %124, i32 0, i32 0
  store i8* %123, i8** %125, align 8
  %126 = load %struct.hash_entry*, %struct.hash_entry** %9, align 8
  %127 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %126, i32 0, i32 1
  %128 = load %struct.hash_entry*, %struct.hash_entry** %127, align 8
  %129 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  %130 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %129, i32 0, i32 1
  store %struct.hash_entry* %128, %struct.hash_entry** %130, align 8
  %131 = load %struct.hash_entry*, %struct.hash_entry** %12, align 8
  %132 = load %struct.hash_entry*, %struct.hash_entry** %9, align 8
  %133 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %132, i32 0, i32 1
  store %struct.hash_entry* %131, %struct.hash_entry** %133, align 8
  %134 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %135 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %134, i32 0, i32 4
  %136 = load i64, i64* %135, align 8
  %137 = add i64 %136, 1
  store i64 %137, i64* %135, align 8
  store i32 1, i32* %4, align 4
  br label %150

138:                                              ; preds = %111
  %139 = load i8*, i8** %6, align 8
  %140 = load %struct.hash_entry*, %struct.hash_entry** %9, align 8
  %141 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %140, i32 0, i32 0
  store i8* %139, i8** %141, align 8
  %142 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %143 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %142, i32 0, i32 4
  %144 = load i64, i64* %143, align 8
  %145 = add i64 %144, 1
  store i64 %145, i64* %143, align 8
  %146 = load %struct.hash_table*, %struct.hash_table** %5, align 8
  %147 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %146, i32 0, i32 3
  %148 = load i64, i64* %147, align 8
  %149 = add i64 %148, 1
  store i64 %149, i64* %147, align 8
  store i32 1, i32* %4, align 4
  br label %150

150:                                              ; preds = %138, %122, %121, %102, %96, %27
  %151 = load i32, i32* %4, align 4
  ret i32 %151
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @hash_find_entry(%struct.hash_table* %0, i8* %1, %struct.hash_entry** %2, i1 zeroext %3) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca %struct.hash_table*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %struct.hash_entry**, align 8
  %9 = alloca i8, align 1
  %10 = alloca %struct.hash_entry*, align 8
  %11 = alloca %struct.hash_entry*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca %struct.hash_entry*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca %struct.hash_entry*, align 8
  store %struct.hash_table* %0, %struct.hash_table** %6, align 8
  store i8* %1, i8** %7, align 8
  store %struct.hash_entry** %2, %struct.hash_entry*** %8, align 8
  %16 = zext i1 %3 to i8
  store i8 %16, i8* %9, align 1
  %17 = load %struct.hash_table*, %struct.hash_table** %6, align 8
  %18 = load i8*, i8** %7, align 8
  %19 = call %struct.hash_entry* @safe_hasher(%struct.hash_table* %17, i8* %18)
  store %struct.hash_entry* %19, %struct.hash_entry** %10, align 8
  %20 = load %struct.hash_entry*, %struct.hash_entry** %10, align 8
  %21 = load %struct.hash_entry**, %struct.hash_entry*** %8, align 8
  store %struct.hash_entry* %20, %struct.hash_entry** %21, align 8
  %22 = load %struct.hash_entry*, %struct.hash_entry** %10, align 8
  %23 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %22, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %26, label %27

26:                                               ; preds = %4
  store i8* null, i8** %5, align 8
  br label %122

27:                                               ; preds = %4
  %28 = load i8*, i8** %7, align 8
  %29 = load %struct.hash_entry*, %struct.hash_entry** %10, align 8
  %30 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %29, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = icmp eq i8* %28, %31
  br i1 %32, label %42, label %33

33:                                               ; preds = %27
  %34 = load %struct.hash_table*, %struct.hash_table** %6, align 8
  %35 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %34, i32 0, i32 7
  %36 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %35, align 8
  %37 = load i8*, i8** %7, align 8
  %38 = load %struct.hash_entry*, %struct.hash_entry** %10, align 8
  %39 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %38, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = call zeroext i1 %36(i8* %37, i8* %40)
  br i1 %41, label %42, label %69

42:                                               ; preds = %33, %27
  %43 = load %struct.hash_entry*, %struct.hash_entry** %10, align 8
  %44 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %43, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  store i8* %45, i8** %12, align 8
  %46 = load i8, i8* %9, align 1
  %47 = trunc i8 %46 to i1
  br i1 %47, label %48, label %67

48:                                               ; preds = %42
  %49 = load %struct.hash_entry*, %struct.hash_entry** %10, align 8
  %50 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %49, i32 0, i32 1
  %51 = load %struct.hash_entry*, %struct.hash_entry** %50, align 8
  %52 = icmp ne %struct.hash_entry* %51, null
  br i1 %52, label %53, label %63

53:                                               ; preds = %48
  %54 = load %struct.hash_entry*, %struct.hash_entry** %10, align 8
  %55 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %54, i32 0, i32 1
  %56 = load %struct.hash_entry*, %struct.hash_entry** %55, align 8
  store %struct.hash_entry* %56, %struct.hash_entry** %13, align 8
  %57 = load %struct.hash_entry*, %struct.hash_entry** %10, align 8
  %58 = load %struct.hash_entry*, %struct.hash_entry** %13, align 8
  %59 = bitcast %struct.hash_entry* %57 to i8*
  %60 = bitcast %struct.hash_entry* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 16, i1 false)
  %61 = load %struct.hash_table*, %struct.hash_table** %6, align 8
  %62 = load %struct.hash_entry*, %struct.hash_entry** %13, align 8
  call void @free_entry(%struct.hash_table* %61, %struct.hash_entry* %62)
  br label %66

63:                                               ; preds = %48
  %64 = load %struct.hash_entry*, %struct.hash_entry** %10, align 8
  %65 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %64, i32 0, i32 0
  store i8* null, i8** %65, align 8
  br label %66

66:                                               ; preds = %63, %53
  br label %67

67:                                               ; preds = %66, %42
  %68 = load i8*, i8** %12, align 8
  store i8* %68, i8** %5, align 8
  br label %122

69:                                               ; preds = %33
  %70 = load %struct.hash_entry*, %struct.hash_entry** %10, align 8
  store %struct.hash_entry* %70, %struct.hash_entry** %11, align 8
  br label %71

71:                                               ; preds = %117, %69
  %72 = load %struct.hash_entry*, %struct.hash_entry** %11, align 8
  %73 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %72, i32 0, i32 1
  %74 = load %struct.hash_entry*, %struct.hash_entry** %73, align 8
  %75 = icmp ne %struct.hash_entry* %74, null
  br i1 %75, label %76, label %121

76:                                               ; preds = %71
  %77 = load i8*, i8** %7, align 8
  %78 = load %struct.hash_entry*, %struct.hash_entry** %11, align 8
  %79 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %78, i32 0, i32 1
  %80 = load %struct.hash_entry*, %struct.hash_entry** %79, align 8
  %81 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %80, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = icmp eq i8* %77, %82
  br i1 %83, label %95, label %84

84:                                               ; preds = %76
  %85 = load %struct.hash_table*, %struct.hash_table** %6, align 8
  %86 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %85, i32 0, i32 7
  %87 = load i1 (i8*, i8*)*, i1 (i8*, i8*)** %86, align 8
  %88 = load i8*, i8** %7, align 8
  %89 = load %struct.hash_entry*, %struct.hash_entry** %11, align 8
  %90 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %89, i32 0, i32 1
  %91 = load %struct.hash_entry*, %struct.hash_entry** %90, align 8
  %92 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %91, i32 0, i32 0
  %93 = load i8*, i8** %92, align 8
  %94 = call zeroext i1 %87(i8* %88, i8* %93)
  br i1 %94, label %95, label %116

95:                                               ; preds = %84, %76
  %96 = load %struct.hash_entry*, %struct.hash_entry** %11, align 8
  %97 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %96, i32 0, i32 1
  %98 = load %struct.hash_entry*, %struct.hash_entry** %97, align 8
  %99 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %98, i32 0, i32 0
  %100 = load i8*, i8** %99, align 8
  store i8* %100, i8** %14, align 8
  %101 = load i8, i8* %9, align 1
  %102 = trunc i8 %101 to i1
  br i1 %102, label %103, label %114

103:                                              ; preds = %95
  %104 = load %struct.hash_entry*, %struct.hash_entry** %11, align 8
  %105 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %104, i32 0, i32 1
  %106 = load %struct.hash_entry*, %struct.hash_entry** %105, align 8
  store %struct.hash_entry* %106, %struct.hash_entry** %15, align 8
  %107 = load %struct.hash_entry*, %struct.hash_entry** %15, align 8
  %108 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %107, i32 0, i32 1
  %109 = load %struct.hash_entry*, %struct.hash_entry** %108, align 8
  %110 = load %struct.hash_entry*, %struct.hash_entry** %11, align 8
  %111 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %110, i32 0, i32 1
  store %struct.hash_entry* %109, %struct.hash_entry** %111, align 8
  %112 = load %struct.hash_table*, %struct.hash_table** %6, align 8
  %113 = load %struct.hash_entry*, %struct.hash_entry** %15, align 8
  call void @free_entry(%struct.hash_table* %112, %struct.hash_entry* %113)
  br label %114

114:                                              ; preds = %103, %95
  %115 = load i8*, i8** %14, align 8
  store i8* %115, i8** %5, align 8
  br label %122

116:                                              ; preds = %84
  br label %117

117:                                              ; preds = %116
  %118 = load %struct.hash_entry*, %struct.hash_entry** %11, align 8
  %119 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %118, i32 0, i32 1
  %120 = load %struct.hash_entry*, %struct.hash_entry** %119, align 8
  store %struct.hash_entry* %120, %struct.hash_entry** %11, align 8
  br label %71, !llvm.loop !89

121:                                              ; preds = %71
  store i8* null, i8** %5, align 8
  br label %122

122:                                              ; preds = %121, %114, %67, %26
  %123 = load i8*, i8** %5, align 8
  ret i8* %123
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @hash_insert(%struct.hash_table* %0, i8* %1) #0 {
  %3 = alloca %struct.hash_table*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  store %struct.hash_table* %0, %struct.hash_table** %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = load %struct.hash_table*, %struct.hash_table** %3, align 8
  %8 = load i8*, i8** %4, align 8
  %9 = call i32 @hash_insert_if_absent(%struct.hash_table* %7, i8* %8, i8** %5)
  store i32 %9, i32* %6, align 4
  %10 = load i32, i32* %6, align 4
  %11 = icmp eq i32 %10, -1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  br label %22

13:                                               ; preds = %2
  %14 = load i32, i32* %6, align 4
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %13
  %17 = load i8*, i8** %5, align 8
  br label %20

18:                                               ; preds = %13
  %19 = load i8*, i8** %4, align 8
  br label %20

20:                                               ; preds = %18, %16
  %21 = phi i8* [ %17, %16 ], [ %19, %18 ]
  br label %22

22:                                               ; preds = %20, %12
  %23 = phi i8* [ null, %12 ], [ %21, %20 ]
  ret i8* %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @hash_delete(%struct.hash_table* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca %struct.hash_table*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %struct.hash_entry*, align 8
  %8 = alloca %struct.hash_tuning*, align 8
  %9 = alloca i64, align 8
  %10 = alloca %struct.hash_entry*, align 8
  %11 = alloca %struct.hash_entry*, align 8
  store %struct.hash_table* %0, %struct.hash_table** %4, align 8
  store i8* %1, i8** %5, align 8
  %12 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %13 = load i8*, i8** %5, align 8
  %14 = call i8* @hash_find_entry(%struct.hash_table* %12, i8* %13, %struct.hash_entry** %7, i1 zeroext true)
  store i8* %14, i8** %6, align 8
  %15 = load i8*, i8** %6, align 8
  %16 = icmp ne i8* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %2
  store i8* null, i8** %3, align 8
  br label %123

18:                                               ; preds = %2
  %19 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %20 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %19, i32 0, i32 4
  %21 = load i64, i64* %20, align 8
  %22 = add i64 %21, -1
  store i64 %22, i64* %20, align 8
  %23 = load %struct.hash_entry*, %struct.hash_entry** %7, align 8
  %24 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %23, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = icmp ne i8* %25, null
  br i1 %26, label %121, label %27

27:                                               ; preds = %18
  %28 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %29 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %28, i32 0, i32 3
  %30 = load i64, i64* %29, align 8
  %31 = add i64 %30, -1
  store i64 %31, i64* %29, align 8
  %32 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %33 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %32, i32 0, i32 3
  %34 = load i64, i64* %33, align 8
  %35 = uitofp i64 %34 to float
  %36 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %37 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %36, i32 0, i32 5
  %38 = load %struct.hash_tuning*, %struct.hash_tuning** %37, align 8
  %39 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %38, i32 0, i32 0
  %40 = load float, float* %39, align 4
  %41 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %42 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %41, i32 0, i32 2
  %43 = load i64, i64* %42, align 8
  %44 = uitofp i64 %43 to float
  %45 = fmul float %40, %44
  %46 = fcmp olt float %35, %45
  br i1 %46, label %47, label %120

47:                                               ; preds = %27
  %48 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %49 = call zeroext i1 @check_tuning(%struct.hash_table* %48)
  %50 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %51 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %50, i32 0, i32 3
  %52 = load i64, i64* %51, align 8
  %53 = uitofp i64 %52 to float
  %54 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %55 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %54, i32 0, i32 5
  %56 = load %struct.hash_tuning*, %struct.hash_tuning** %55, align 8
  %57 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %56, i32 0, i32 0
  %58 = load float, float* %57, align 4
  %59 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %60 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %59, i32 0, i32 2
  %61 = load i64, i64* %60, align 8
  %62 = uitofp i64 %61 to float
  %63 = fmul float %58, %62
  %64 = fcmp olt float %53, %63
  br i1 %64, label %65, label %119

65:                                               ; preds = %47
  %66 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %67 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %66, i32 0, i32 5
  %68 = load %struct.hash_tuning*, %struct.hash_tuning** %67, align 8
  store %struct.hash_tuning* %68, %struct.hash_tuning** %8, align 8
  %69 = load %struct.hash_tuning*, %struct.hash_tuning** %8, align 8
  %70 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %69, i32 0, i32 4
  %71 = load i8, i8* %70, align 4
  %72 = trunc i8 %71 to i1
  br i1 %72, label %73, label %82

73:                                               ; preds = %65
  %74 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %75 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %74, i32 0, i32 2
  %76 = load i64, i64* %75, align 8
  %77 = uitofp i64 %76 to float
  %78 = load %struct.hash_tuning*, %struct.hash_tuning** %8, align 8
  %79 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %78, i32 0, i32 1
  %80 = load float, float* %79, align 4
  %81 = fmul float %77, %80
  br label %95

82:                                               ; preds = %65
  %83 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %84 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %83, i32 0, i32 2
  %85 = load i64, i64* %84, align 8
  %86 = uitofp i64 %85 to float
  %87 = load %struct.hash_tuning*, %struct.hash_tuning** %8, align 8
  %88 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %87, i32 0, i32 1
  %89 = load float, float* %88, align 4
  %90 = fmul float %86, %89
  %91 = load %struct.hash_tuning*, %struct.hash_tuning** %8, align 8
  %92 = getelementptr inbounds %struct.hash_tuning, %struct.hash_tuning* %91, i32 0, i32 2
  %93 = load float, float* %92, align 4
  %94 = fmul float %90, %93
  br label %95

95:                                               ; preds = %82, %73
  %96 = phi float [ %81, %73 ], [ %94, %82 ]
  %97 = fptoui float %96 to i64
  store i64 %97, i64* %9, align 8
  %98 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %99 = load i64, i64* %9, align 8
  %100 = call zeroext i1 @hash_rehash(%struct.hash_table* %98, i64 %99)
  br i1 %100, label %118, label %101

101:                                              ; preds = %95
  %102 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %103 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %102, i32 0, i32 9
  %104 = load %struct.hash_entry*, %struct.hash_entry** %103, align 8
  store %struct.hash_entry* %104, %struct.hash_entry** %10, align 8
  br label %105

105:                                              ; preds = %108, %101
  %106 = load %struct.hash_entry*, %struct.hash_entry** %10, align 8
  %107 = icmp ne %struct.hash_entry* %106, null
  br i1 %107, label %108, label %115

108:                                              ; preds = %105
  %109 = load %struct.hash_entry*, %struct.hash_entry** %10, align 8
  %110 = getelementptr inbounds %struct.hash_entry, %struct.hash_entry* %109, i32 0, i32 1
  %111 = load %struct.hash_entry*, %struct.hash_entry** %110, align 8
  store %struct.hash_entry* %111, %struct.hash_entry** %11, align 8
  %112 = load %struct.hash_entry*, %struct.hash_entry** %10, align 8
  %113 = bitcast %struct.hash_entry* %112 to i8*
  call void @free(i8* %113) #14
  %114 = load %struct.hash_entry*, %struct.hash_entry** %11, align 8
  store %struct.hash_entry* %114, %struct.hash_entry** %10, align 8
  br label %105, !llvm.loop !90

115:                                              ; preds = %105
  %116 = load %struct.hash_table*, %struct.hash_table** %4, align 8
  %117 = getelementptr inbounds %struct.hash_table, %struct.hash_table* %116, i32 0, i32 9
  store %struct.hash_entry* null, %struct.hash_entry** %117, align 8
  br label %118

118:                                              ; preds = %115, %95
  br label %119

119:                                              ; preds = %118, %47
  br label %120

120:                                              ; preds = %119, %27
  br label %121

121:                                              ; preds = %120, %18
  %122 = load i8*, i8** %6, align 8
  store i8* %122, i8** %3, align 8
  br label %123

123:                                              ; preds = %121, %17
  %124 = load i8*, i8** %3, align 8
  ret i8* %124
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i64 @triple_hash(i8* %0, i64 %1) #9 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca %struct.F_triple*, align 8
  %6 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.F_triple*
  store %struct.F_triple* %8, %struct.F_triple** %5, align 8
  %9 = load %struct.F_triple*, %struct.F_triple** %5, align 8
  %10 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %9, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = load i64, i64* %4, align 8
  %13 = call i64 @hash_pjw(i8* %11, i64 %12) #17
  store i64 %13, i64* %6, align 8
  %14 = load i64, i64* %6, align 8
  %15 = load %struct.F_triple*, %struct.F_triple** %5, align 8
  %16 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %15, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = xor i64 %14, %17
  %19 = load i64, i64* %4, align 8
  %20 = urem i64 %18, %19
  ret i64 %20
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal zeroext i1 @triple_compare_ino_str(i8* %0, i8* %1) #9 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.F_triple*, align 8
  %6 = alloca %struct.F_triple*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.F_triple*
  store %struct.F_triple* %8, %struct.F_triple** %5, align 8
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast i8* %9 to %struct.F_triple*
  store %struct.F_triple* %10, %struct.F_triple** %6, align 8
  %11 = load %struct.F_triple*, %struct.F_triple** %5, align 8
  %12 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %11, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = load %struct.F_triple*, %struct.F_triple** %6, align 8
  %15 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %14, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %13, %16
  br i1 %17, label %18, label %35

18:                                               ; preds = %2
  %19 = load %struct.F_triple*, %struct.F_triple** %5, align 8
  %20 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %19, i32 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = load %struct.F_triple*, %struct.F_triple** %6, align 8
  %23 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %22, i32 0, i32 2
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %21, %24
  br i1 %25, label %26, label %35

26:                                               ; preds = %18
  %27 = load %struct.F_triple*, %struct.F_triple** %5, align 8
  %28 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %27, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = load %struct.F_triple*, %struct.F_triple** %6, align 8
  %31 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %30, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = call i32 @strcmp(i8* %29, i8* %32) #17
  %34 = icmp eq i32 %33, 0
  br label %35

35:                                               ; preds = %26, %18, %2
  %36 = phi i1 [ false, %18 ], [ false, %2 ], [ %34, %26 ]
  %37 = zext i1 %36 to i64
  %38 = select i1 %36, i32 1, i32 0
  %39 = icmp ne i32 %38, 0
  ret i1 %39
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @triple_free(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.F_triple*, align 8
  store i8* %0, i8** %2, align 8
  %4 = load i8*, i8** %2, align 8
  %5 = bitcast i8* %4 to %struct.F_triple*
  store %struct.F_triple* %5, %struct.F_triple** %3, align 8
  %6 = load %struct.F_triple*, %struct.F_triple** %3, align 8
  %7 = getelementptr inbounds %struct.F_triple, %struct.F_triple* %6, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  call void @free(i8* %8) #14
  %9 = load %struct.F_triple*, %struct.F_triple** %3, align 8
  %10 = bitcast %struct.F_triple* %9 to i8*
  call void @free(i8* %10) #14
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @human_readable(i64 %0, i8* %1, i32 %2, i64 %3, i64 %4) #0 {
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i32, align 4
  %21 = alloca i8*, align 8
  %22 = alloca i64, align 8
  %23 = alloca i8*, align 8
  %24 = alloca i8*, align 8
  %25 = alloca %struct.lconv*, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca x86_fp80, align 16
  %32 = alloca x86_fp80, align 16
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca x86_fp80, align 16
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i64, align 8
  store i64 %0, i64* %6, align 8
  store i8* %1, i8** %7, align 8
  store i32 %2, i32* %8, align 4
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  %40 = load i32, i32* %8, align 4
  %41 = and i32 %40, 3
  store i32 %41, i32* %11, align 4
  %42 = load i32, i32* %8, align 4
  %43 = and i32 %42, 32
  %44 = icmp ne i32 %43, 0
  %45 = zext i1 %44 to i64
  %46 = select i1 %44, i32 1024, i32 1000
  store i32 %46, i32* %12, align 4
  store i32 -1, i32* %15, align 4
  store i32 8, i32* %16, align 4
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.324, i64 0, i64 0), i8** %21, align 8
  store i64 1, i64* %22, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.325, i64 0, i64 0), i8** %23, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.325, i64 0, i64 0), i8** %24, align 8
  %47 = call %struct.lconv* @localeconv() #14
  store %struct.lconv* %47, %struct.lconv** %25, align 8
  %48 = load %struct.lconv*, %struct.lconv** %25, align 8
  %49 = getelementptr inbounds %struct.lconv, %struct.lconv* %48, i32 0, i32 0
  %50 = load i8*, i8** %49, align 8
  %51 = call i64 @strlen(i8* %50) #17
  store i64 %51, i64* %26, align 8
  %52 = load i64, i64* %26, align 8
  %53 = icmp ult i64 0, %52
  br i1 %53, label %54, label %62

54:                                               ; preds = %5
  %55 = load i64, i64* %26, align 8
  %56 = icmp ule i64 %55, 16
  br i1 %56, label %57, label %62

57:                                               ; preds = %54
  %58 = load %struct.lconv*, %struct.lconv** %25, align 8
  %59 = getelementptr inbounds %struct.lconv, %struct.lconv* %58, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  store i8* %60, i8** %21, align 8
  %61 = load i64, i64* %26, align 8
  store i64 %61, i64* %22, align 8
  br label %62

62:                                               ; preds = %57, %54, %5
  %63 = load %struct.lconv*, %struct.lconv** %25, align 8
  %64 = getelementptr inbounds %struct.lconv, %struct.lconv* %63, i32 0, i32 2
  %65 = load i8*, i8** %64, align 8
  store i8* %65, i8** %23, align 8
  %66 = load %struct.lconv*, %struct.lconv** %25, align 8
  %67 = getelementptr inbounds %struct.lconv, %struct.lconv* %66, i32 0, i32 1
  %68 = load i8*, i8** %67, align 8
  %69 = call i64 @strlen(i8* %68) #17
  %70 = icmp ule i64 %69, 16
  br i1 %70, label %71, label %75

71:                                               ; preds = %62
  %72 = load %struct.lconv*, %struct.lconv** %25, align 8
  %73 = getelementptr inbounds %struct.lconv, %struct.lconv* %72, i32 0, i32 1
  %74 = load i8*, i8** %73, align 8
  store i8* %74, i8** %24, align 8
  br label %75

75:                                               ; preds = %71, %62
  %76 = load i8*, i8** %7, align 8
  %77 = getelementptr inbounds i8, i8* %76, i64 651
  %78 = getelementptr inbounds i8, i8* %77, i64 -1
  %79 = getelementptr inbounds i8, i8* %78, i64 -3
  store i8* %79, i8** %18, align 8
  %80 = load i8*, i8** %18, align 8
  store i8* %80, i8** %17, align 8
  %81 = load i64, i64* %10, align 8
  %82 = load i64, i64* %9, align 8
  %83 = icmp ule i64 %81, %82
  br i1 %83, label %84, label %104

84:                                               ; preds = %75
  %85 = load i64, i64* %9, align 8
  %86 = load i64, i64* %10, align 8
  %87 = urem i64 %85, %86
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %103

89:                                               ; preds = %84
  %90 = load i64, i64* %9, align 8
  %91 = load i64, i64* %10, align 8
  %92 = udiv i64 %90, %91
  store i64 %92, i64* %27, align 8
  %93 = load i64, i64* %6, align 8
  %94 = load i64, i64* %27, align 8
  %95 = mul i64 %93, %94
  store i64 %95, i64* %13, align 8
  %96 = load i64, i64* %13, align 8
  %97 = load i64, i64* %27, align 8
  %98 = udiv i64 %96, %97
  %99 = load i64, i64* %6, align 8
  %100 = icmp eq i64 %98, %99
  br i1 %100, label %101, label %102

101:                                              ; preds = %89
  store i32 0, i32* %14, align 4
  store i32 0, i32* %20, align 4
  br label %250

102:                                              ; preds = %89
  br label %103

103:                                              ; preds = %102, %84
  br label %147

104:                                              ; preds = %75
  %105 = load i64, i64* %9, align 8
  %106 = icmp ne i64 %105, 0
  br i1 %106, label %107, label %146

107:                                              ; preds = %104
  %108 = load i64, i64* %10, align 8
  %109 = load i64, i64* %9, align 8
  %110 = urem i64 %108, %109
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %112, label %146

112:                                              ; preds = %107
  %113 = load i64, i64* %10, align 8
  %114 = load i64, i64* %9, align 8
  %115 = udiv i64 %113, %114
  store i64 %115, i64* %28, align 8
  %116 = load i64, i64* %6, align 8
  %117 = load i64, i64* %28, align 8
  %118 = urem i64 %116, %117
  %119 = mul i64 %118, 10
  store i64 %119, i64* %29, align 8
  %120 = load i64, i64* %29, align 8
  %121 = load i64, i64* %28, align 8
  %122 = urem i64 %120, %121
  %123 = mul i64 %122, 2
  store i64 %123, i64* %30, align 8
  %124 = load i64, i64* %6, align 8
  %125 = load i64, i64* %28, align 8
  %126 = udiv i64 %124, %125
  store i64 %126, i64* %13, align 8
  %127 = load i64, i64* %29, align 8
  %128 = load i64, i64* %28, align 8
  %129 = udiv i64 %127, %128
  %130 = trunc i64 %129 to i32
  store i32 %130, i32* %14, align 4
  %131 = load i64, i64* %30, align 8
  %132 = load i64, i64* %28, align 8
  %133 = icmp ult i64 %131, %132
  br i1 %133, label %134, label %138

134:                                              ; preds = %112
  %135 = load i64, i64* %30, align 8
  %136 = icmp ult i64 0, %135
  %137 = zext i1 %136 to i32
  br label %144

138:                                              ; preds = %112
  %139 = load i64, i64* %28, align 8
  %140 = load i64, i64* %30, align 8
  %141 = icmp ult i64 %139, %140
  %142 = zext i1 %141 to i32
  %143 = add nsw i32 2, %142
  br label %144

144:                                              ; preds = %138, %134
  %145 = phi i32 [ %137, %134 ], [ %143, %138 ]
  store i32 %145, i32* %20, align 4
  br label %250

146:                                              ; preds = %107, %104
  br label %147

147:                                              ; preds = %146, %103
  %148 = load i64, i64* %10, align 8
  %149 = uitofp i64 %148 to x86_fp80
  store x86_fp80 %149, x86_fp80* %31, align 16
  %150 = load i64, i64* %6, align 8
  %151 = uitofp i64 %150 to x86_fp80
  %152 = load i64, i64* %9, align 8
  %153 = uitofp i64 %152 to x86_fp80
  %154 = load x86_fp80, x86_fp80* %31, align 16
  %155 = fdiv x86_fp80 %153, %154
  %156 = fmul x86_fp80 %151, %155
  store x86_fp80 %156, x86_fp80* %32, align 16
  %157 = load i32, i32* %8, align 4
  %158 = and i32 %157, 16
  %159 = icmp ne i32 %158, 0
  br i1 %159, label %168, label %160

160:                                              ; preds = %147
  %161 = load i8*, i8** %7, align 8
  %162 = load i32, i32* %11, align 4
  %163 = load x86_fp80, x86_fp80* %32, align 16
  %164 = call x86_fp80 @adjust_value(i32 %162, x86_fp80 %163)
  %165 = call i32 (i8*, i8*, ...) @sprintf(i8* %161, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2.326, i64 0, i64 0), x86_fp80 %164) #14
  %166 = load i8*, i8** %7, align 8
  %167 = call i64 @strlen(i8* %166) #17
  store i64 %167, i64* %33, align 8
  store i64 0, i64* %34, align 8
  br label %236

168:                                              ; preds = %147
  store x86_fp80 0xK3FFF8000000000000000, x86_fp80* %35, align 16
  store i32 0, i32* %15, align 4
  br label %169

169:                                              ; preds = %187, %168
  %170 = load i32, i32* %12, align 4
  %171 = uitofp i32 %170 to x86_fp80
  %172 = load x86_fp80, x86_fp80* %35, align 16
  %173 = fmul x86_fp80 %172, %171
  store x86_fp80 %173, x86_fp80* %35, align 16
  %174 = load i32, i32* %15, align 4
  %175 = add nsw i32 %174, 1
  store i32 %175, i32* %15, align 4
  br label %176

176:                                              ; preds = %169
  %177 = load x86_fp80, x86_fp80* %35, align 16
  %178 = load i32, i32* %12, align 4
  %179 = uitofp i32 %178 to x86_fp80
  %180 = fmul x86_fp80 %177, %179
  %181 = load x86_fp80, x86_fp80* %32, align 16
  %182 = fcmp ole x86_fp80 %180, %181
  br i1 %182, label %183, label %187

183:                                              ; preds = %176
  %184 = load i32, i32* %15, align 4
  %185 = load i32, i32* %16, align 4
  %186 = icmp slt i32 %184, %185
  br label %187

187:                                              ; preds = %183, %176
  %188 = phi i1 [ false, %176 ], [ %186, %183 ]
  br i1 %188, label %169, label %189, !llvm.loop !91

189:                                              ; preds = %187
  %190 = load x86_fp80, x86_fp80* %35, align 16
  %191 = load x86_fp80, x86_fp80* %32, align 16
  %192 = fdiv x86_fp80 %191, %190
  store x86_fp80 %192, x86_fp80* %32, align 16
  %193 = load i8*, i8** %7, align 8
  %194 = load i32, i32* %11, align 4
  %195 = load x86_fp80, x86_fp80* %32, align 16
  %196 = call x86_fp80 @adjust_value(i32 %194, x86_fp80 %195)
  %197 = call i32 (i8*, i8*, ...) @sprintf(i8* %193, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.327, i64 0, i64 0), x86_fp80 %196) #14
  %198 = load i8*, i8** %7, align 8
  %199 = call i64 @strlen(i8* %198) #17
  store i64 %199, i64* %33, align 8
  %200 = load i64, i64* %22, align 8
  %201 = add i64 %200, 1
  store i64 %201, i64* %34, align 8
  %202 = load i64, i64* %34, align 8
  %203 = add i64 1, %202
  %204 = load i32, i32* %8, align 4
  %205 = and i32 %204, 32
  %206 = icmp ne i32 %205, 0
  %207 = xor i1 %206, true
  %208 = zext i1 %207 to i32
  %209 = sext i32 %208 to i64
  %210 = add i64 %203, %209
  %211 = load i64, i64* %33, align 8
  %212 = icmp ult i64 %210, %211
  br i1 %212, label %225, label %213

213:                                              ; preds = %189
  %214 = load i32, i32* %8, align 4
  %215 = and i32 %214, 8
  %216 = icmp ne i32 %215, 0
  br i1 %216, label %217, label %235

217:                                              ; preds = %213
  %218 = load i8*, i8** %7, align 8
  %219 = load i64, i64* %33, align 8
  %220 = sub i64 %219, 1
  %221 = getelementptr inbounds i8, i8* %218, i64 %220
  %222 = load i8, i8* %221, align 1
  %223 = sext i8 %222 to i32
  %224 = icmp eq i32 %223, 48
  br i1 %224, label %225, label %235

225:                                              ; preds = %217, %189
  %226 = load i8*, i8** %7, align 8
  %227 = load i32, i32* %11, align 4
  %228 = load x86_fp80, x86_fp80* %32, align 16
  %229 = fmul x86_fp80 %228, 0xK4002A000000000000000
  %230 = call x86_fp80 @adjust_value(i32 %227, x86_fp80 %229)
  %231 = fdiv x86_fp80 %230, 0xK4002A000000000000000
  %232 = call i32 (i8*, i8*, ...) @sprintf(i8* %226, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2.326, i64 0, i64 0), x86_fp80 %231) #14
  %233 = load i8*, i8** %7, align 8
  %234 = call i64 @strlen(i8* %233) #17
  store i64 %234, i64* %33, align 8
  store i64 0, i64* %34, align 8
  br label %235

235:                                              ; preds = %225, %217, %213
  br label %236

236:                                              ; preds = %235, %160
  %237 = load i8*, i8** %18, align 8
  %238 = load i64, i64* %33, align 8
  %239 = sub i64 0, %238
  %240 = getelementptr inbounds i8, i8* %237, i64 %239
  store i8* %240, i8** %17, align 8
  %241 = load i8*, i8** %17, align 8
  %242 = load i8*, i8** %7, align 8
  %243 = load i64, i64* %33, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %241, i8* align 1 %242, i64 %243, i1 false)
  %244 = load i8*, i8** %17, align 8
  %245 = load i64, i64* %33, align 8
  %246 = getelementptr inbounds i8, i8* %244, i64 %245
  %247 = load i64, i64* %34, align 8
  %248 = sub i64 0, %247
  %249 = getelementptr inbounds i8, i8* %246, i64 %248
  store i8* %249, i8** %19, align 8
  br label %440

250:                                              ; preds = %144, %101
  %251 = load i32, i32* %8, align 4
  %252 = and i32 %251, 16
  %253 = icmp ne i32 %252, 0
  br i1 %253, label %254, label %369

254:                                              ; preds = %250
  store i32 0, i32* %15, align 4
  %255 = load i32, i32* %12, align 4
  %256 = zext i32 %255 to i64
  %257 = load i64, i64* %13, align 8
  %258 = icmp ule i64 %256, %257
  br i1 %258, label %259, label %368

259:                                              ; preds = %254
  br label %260

260:                                              ; preds = %314, %259
  %261 = load i64, i64* %13, align 8
  %262 = load i32, i32* %12, align 4
  %263 = zext i32 %262 to i64
  %264 = urem i64 %261, %263
  %265 = mul i64 %264, 10
  %266 = load i32, i32* %14, align 4
  %267 = sext i32 %266 to i64
  %268 = add i64 %265, %267
  %269 = trunc i64 %268 to i32
  store i32 %269, i32* %36, align 4
  %270 = load i32, i32* %36, align 4
  %271 = load i32, i32* %12, align 4
  %272 = urem i32 %270, %271
  %273 = mul i32 %272, 2
  %274 = load i32, i32* %20, align 4
  %275 = ashr i32 %274, 1
  %276 = add i32 %273, %275
  store i32 %276, i32* %37, align 4
  %277 = load i32, i32* %12, align 4
  %278 = zext i32 %277 to i64
  %279 = load i64, i64* %13, align 8
  %280 = udiv i64 %279, %278
  store i64 %280, i64* %13, align 8
  %281 = load i32, i32* %36, align 4
  %282 = load i32, i32* %12, align 4
  %283 = udiv i32 %281, %282
  store i32 %283, i32* %14, align 4
  %284 = load i32, i32* %37, align 4
  %285 = load i32, i32* %12, align 4
  %286 = icmp ult i32 %284, %285
  br i1 %286, label %287, label %293

287:                                              ; preds = %260
  %288 = load i32, i32* %37, align 4
  %289 = load i32, i32* %20, align 4
  %290 = add i32 %288, %289
  %291 = icmp ne i32 %290, 0
  %292 = zext i1 %291 to i32
  br label %301

293:                                              ; preds = %260
  %294 = load i32, i32* %12, align 4
  %295 = load i32, i32* %37, align 4
  %296 = load i32, i32* %20, align 4
  %297 = add i32 %295, %296
  %298 = icmp ult i32 %294, %297
  %299 = zext i1 %298 to i32
  %300 = add nsw i32 2, %299
  br label %301

301:                                              ; preds = %293, %287
  %302 = phi i32 [ %292, %287 ], [ %300, %293 ]
  store i32 %302, i32* %20, align 4
  %303 = load i32, i32* %15, align 4
  %304 = add nsw i32 %303, 1
  store i32 %304, i32* %15, align 4
  br label %305

305:                                              ; preds = %301
  %306 = load i32, i32* %12, align 4
  %307 = zext i32 %306 to i64
  %308 = load i64, i64* %13, align 8
  %309 = icmp ule i64 %307, %308
  br i1 %309, label %310, label %314

310:                                              ; preds = %305
  %311 = load i32, i32* %15, align 4
  %312 = load i32, i32* %16, align 4
  %313 = icmp slt i32 %311, %312
  br label %314

314:                                              ; preds = %310, %305
  %315 = phi i1 [ false, %305 ], [ %313, %310 ]
  br i1 %315, label %260, label %316, !llvm.loop !92

316:                                              ; preds = %314
  %317 = load i64, i64* %13, align 8
  %318 = icmp ult i64 %317, 10
  br i1 %318, label %319, label %367

319:                                              ; preds = %316
  %320 = load i32, i32* %11, align 4
  %321 = icmp eq i32 %320, 1
  br i1 %321, label %322, label %328

322:                                              ; preds = %319
  %323 = load i32, i32* %20, align 4
  %324 = load i32, i32* %14, align 4
  %325 = and i32 %324, 1
  %326 = add nsw i32 %323, %325
  %327 = icmp slt i32 2, %326
  br i1 %327, label %334, label %343

328:                                              ; preds = %319
  %329 = load i32, i32* %11, align 4
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %331, label %343

331:                                              ; preds = %328
  %332 = load i32, i32* %20, align 4
  %333 = icmp slt i32 0, %332
  br i1 %333, label %334, label %343

334:                                              ; preds = %331, %322
  %335 = load i32, i32* %14, align 4
  %336 = add nsw i32 %335, 1
  store i32 %336, i32* %14, align 4
  store i32 0, i32* %20, align 4
  %337 = load i32, i32* %14, align 4
  %338 = icmp eq i32 %337, 10
  br i1 %338, label %339, label %342

339:                                              ; preds = %334
  %340 = load i64, i64* %13, align 8
  %341 = add i64 %340, 1
  store i64 %341, i64* %13, align 8
  store i32 0, i32* %14, align 4
  br label %342

342:                                              ; preds = %339, %334
  br label %343

343:                                              ; preds = %342, %331, %328, %322
  %344 = load i64, i64* %13, align 8
  %345 = icmp ult i64 %344, 10
  br i1 %345, label %346, label %366

346:                                              ; preds = %343
  %347 = load i32, i32* %14, align 4
  %348 = icmp ne i32 %347, 0
  br i1 %348, label %353, label %349

349:                                              ; preds = %346
  %350 = load i32, i32* %8, align 4
  %351 = and i32 %350, 8
  %352 = icmp ne i32 %351, 0
  br i1 %352, label %366, label %353

353:                                              ; preds = %349, %346
  %354 = load i32, i32* %14, align 4
  %355 = add nsw i32 48, %354
  %356 = trunc i32 %355 to i8
  %357 = load i8*, i8** %17, align 8
  %358 = getelementptr inbounds i8, i8* %357, i32 -1
  store i8* %358, i8** %17, align 8
  store i8 %356, i8* %358, align 1
  %359 = load i64, i64* %22, align 8
  %360 = load i8*, i8** %17, align 8
  %361 = sub i64 0, %359
  %362 = getelementptr inbounds i8, i8* %360, i64 %361
  store i8* %362, i8** %17, align 8
  %363 = load i8*, i8** %17, align 8
  %364 = load i8*, i8** %21, align 8
  %365 = load i64, i64* %22, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %363, i8* align 1 %364, i64 %365, i1 false)
  store i32 0, i32* %20, align 4
  store i32 0, i32* %14, align 4
  br label %366

366:                                              ; preds = %353, %349, %343
  br label %367

367:                                              ; preds = %366, %316
  br label %368

368:                                              ; preds = %367, %254
  br label %369

369:                                              ; preds = %368, %250
  %370 = load i32, i32* %11, align 4
  %371 = icmp eq i32 %370, 1
  br i1 %371, label %372, label %383

372:                                              ; preds = %369
  %373 = load i32, i32* %14, align 4
  %374 = load i32, i32* %20, align 4
  %375 = sext i32 %374 to i64
  %376 = load i64, i64* %13, align 8
  %377 = and i64 %376, 1
  %378 = add i64 %375, %377
  %379 = icmp ult i64 0, %378
  %380 = zext i1 %379 to i32
  %381 = add nsw i32 %373, %380
  %382 = icmp slt i32 5, %381
  br i1 %382, label %391, label %424

383:                                              ; preds = %369
  %384 = load i32, i32* %11, align 4
  %385 = icmp eq i32 %384, 0
  br i1 %385, label %386, label %424

386:                                              ; preds = %383
  %387 = load i32, i32* %14, align 4
  %388 = load i32, i32* %20, align 4
  %389 = add nsw i32 %387, %388
  %390 = icmp slt i32 0, %389
  br i1 %390, label %391, label %424

391:                                              ; preds = %386, %372
  %392 = load i64, i64* %13, align 8
  %393 = add i64 %392, 1
  store i64 %393, i64* %13, align 8
  %394 = load i32, i32* %8, align 4
  %395 = and i32 %394, 16
  %396 = icmp ne i32 %395, 0
  br i1 %396, label %397, label %423

397:                                              ; preds = %391
  %398 = load i64, i64* %13, align 8
  %399 = load i32, i32* %12, align 4
  %400 = zext i32 %399 to i64
  %401 = icmp eq i64 %398, %400
  br i1 %401, label %402, label %423

402:                                              ; preds = %397
  %403 = load i32, i32* %15, align 4
  %404 = load i32, i32* %16, align 4
  %405 = icmp slt i32 %403, %404
  br i1 %405, label %406, label %423

406:                                              ; preds = %402
  %407 = load i32, i32* %15, align 4
  %408 = add nsw i32 %407, 1
  store i32 %408, i32* %15, align 4
  %409 = load i32, i32* %8, align 4
  %410 = and i32 %409, 8
  %411 = icmp ne i32 %410, 0
  br i1 %411, label %422, label %412

412:                                              ; preds = %406
  %413 = load i8*, i8** %17, align 8
  %414 = getelementptr inbounds i8, i8* %413, i32 -1
  store i8* %414, i8** %17, align 8
  store i8 48, i8* %414, align 1
  %415 = load i64, i64* %22, align 8
  %416 = load i8*, i8** %17, align 8
  %417 = sub i64 0, %415
  %418 = getelementptr inbounds i8, i8* %416, i64 %417
  store i8* %418, i8** %17, align 8
  %419 = load i8*, i8** %17, align 8
  %420 = load i8*, i8** %21, align 8
  %421 = load i64, i64* %22, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %419, i8* align 1 %420, i64 %421, i1 false)
  br label %422

422:                                              ; preds = %412, %406
  store i64 1, i64* %13, align 8
  br label %423

423:                                              ; preds = %422, %402, %397, %391
  br label %424

424:                                              ; preds = %423, %386, %383, %372
  %425 = load i8*, i8** %17, align 8
  store i8* %425, i8** %19, align 8
  br label %426

426:                                              ; preds = %435, %424
  %427 = load i64, i64* %13, align 8
  %428 = urem i64 %427, 10
  %429 = trunc i64 %428 to i32
  store i32 %429, i32* %38, align 4
  %430 = load i32, i32* %38, align 4
  %431 = add nsw i32 %430, 48
  %432 = trunc i32 %431 to i8
  %433 = load i8*, i8** %17, align 8
  %434 = getelementptr inbounds i8, i8* %433, i32 -1
  store i8* %434, i8** %17, align 8
  store i8 %432, i8* %434, align 1
  br label %435

435:                                              ; preds = %426
  %436 = load i64, i64* %13, align 8
  %437 = udiv i64 %436, 10
  store i64 %437, i64* %13, align 8
  %438 = icmp ne i64 %437, 0
  br i1 %438, label %426, label %439, !llvm.loop !93

439:                                              ; preds = %435
  br label %440

440:                                              ; preds = %439, %236
  %441 = load i32, i32* %8, align 4
  %442 = and i32 %441, 4
  %443 = icmp ne i32 %442, 0
  br i1 %443, label %444, label %454

444:                                              ; preds = %440
  %445 = load i8*, i8** %17, align 8
  %446 = load i8*, i8** %19, align 8
  %447 = load i8*, i8** %17, align 8
  %448 = ptrtoint i8* %446 to i64
  %449 = ptrtoint i8* %447 to i64
  %450 = sub i64 %448, %449
  %451 = load i8*, i8** %23, align 8
  %452 = load i8*, i8** %24, align 8
  %453 = call i8* @group_number(i8* %445, i64 %450, i8* %451, i8* %452)
  store i8* %453, i8** %17, align 8
  br label %454

454:                                              ; preds = %444, %440
  %455 = load i32, i32* %8, align 4
  %456 = and i32 %455, 128
  %457 = icmp ne i32 %456, 0
  br i1 %457, label %458, label %532

458:                                              ; preds = %454
  %459 = load i32, i32* %15, align 4
  %460 = icmp slt i32 %459, 0
  br i1 %460, label %461, label %479

461:                                              ; preds = %458
  store i32 0, i32* %15, align 4
  store i64 1, i64* %39, align 8
  br label %462

462:                                              ; preds = %473, %461
  %463 = load i64, i64* %39, align 8
  %464 = load i64, i64* %10, align 8
  %465 = icmp ult i64 %463, %464
  br i1 %465, label %466, label %478

466:                                              ; preds = %462
  %467 = load i32, i32* %15, align 4
  %468 = add nsw i32 %467, 1
  store i32 %468, i32* %15, align 4
  %469 = load i32, i32* %16, align 4
  %470 = icmp eq i32 %468, %469
  br i1 %470, label %471, label %472

471:                                              ; preds = %466
  br label %478

472:                                              ; preds = %466
  br label %473

473:                                              ; preds = %472
  %474 = load i32, i32* %12, align 4
  %475 = zext i32 %474 to i64
  %476 = load i64, i64* %39, align 8
  %477 = mul i64 %476, %475
  store i64 %477, i64* %39, align 8
  br label %462, !llvm.loop !94

478:                                              ; preds = %471, %462
  br label %479

479:                                              ; preds = %478, %458
  %480 = load i32, i32* %15, align 4
  %481 = load i32, i32* %8, align 4
  %482 = and i32 %481, 256
  %483 = or i32 %480, %482
  %484 = icmp ne i32 %483, 0
  br i1 %484, label %485, label %492

485:                                              ; preds = %479
  %486 = load i32, i32* %8, align 4
  %487 = and i32 %486, 64
  %488 = icmp ne i32 %487, 0
  br i1 %488, label %489, label %492

489:                                              ; preds = %485
  %490 = load i8*, i8** %18, align 8
  %491 = getelementptr inbounds i8, i8* %490, i32 1
  store i8* %491, i8** %18, align 8
  store i8 32, i8* %490, align 1
  br label %492

492:                                              ; preds = %489, %485, %479
  %493 = load i32, i32* %15, align 4
  %494 = icmp ne i32 %493, 0
  br i1 %494, label %495, label %514

495:                                              ; preds = %492
  %496 = load i32, i32* %8, align 4
  %497 = and i32 %496, 32
  %498 = icmp ne i32 %497, 0
  br i1 %498, label %503, label %499

499:                                              ; preds = %495
  %500 = load i32, i32* %15, align 4
  %501 = icmp eq i32 %500, 1
  br i1 %501, label %502, label %503

502:                                              ; preds = %499
  br label %509

503:                                              ; preds = %499, %495
  %504 = load i32, i32* %15, align 4
  %505 = sext i32 %504 to i64
  %506 = getelementptr inbounds [9 x i8], [9 x i8]* @power_letter, i64 0, i64 %505
  %507 = load i8, i8* %506, align 1
  %508 = sext i8 %507 to i32
  br label %509

509:                                              ; preds = %503, %502
  %510 = phi i32 [ 107, %502 ], [ %508, %503 ]
  %511 = trunc i32 %510 to i8
  %512 = load i8*, i8** %18, align 8
  %513 = getelementptr inbounds i8, i8* %512, i32 1
  store i8* %513, i8** %18, align 8
  store i8 %511, i8* %512, align 1
  br label %514

514:                                              ; preds = %509, %492
  %515 = load i32, i32* %8, align 4
  %516 = and i32 %515, 256
  %517 = icmp ne i32 %516, 0
  br i1 %517, label %518, label %531

518:                                              ; preds = %514
  %519 = load i32, i32* %8, align 4
  %520 = and i32 %519, 32
  %521 = icmp ne i32 %520, 0
  br i1 %521, label %522, label %528

522:                                              ; preds = %518
  %523 = load i32, i32* %15, align 4
  %524 = icmp ne i32 %523, 0
  br i1 %524, label %525, label %528

525:                                              ; preds = %522
  %526 = load i8*, i8** %18, align 8
  %527 = getelementptr inbounds i8, i8* %526, i32 1
  store i8* %527, i8** %18, align 8
  store i8 105, i8* %526, align 1
  br label %528

528:                                              ; preds = %525, %522, %518
  %529 = load i8*, i8** %18, align 8
  %530 = getelementptr inbounds i8, i8* %529, i32 1
  store i8* %530, i8** %18, align 8
  store i8 66, i8* %529, align 1
  br label %531

531:                                              ; preds = %528, %514
  br label %532

532:                                              ; preds = %531, %454
  %533 = load i8*, i8** %18, align 8
  store i8 0, i8* %533, align 1
  %534 = load i8*, i8** %17, align 8
  ret i8* %534
}

; Function Attrs: nounwind
declare dso_local %struct.lconv* @localeconv() #1

; Function Attrs: noinline nounwind optnone uwtable
define internal x86_fp80 @adjust_value(i32 %0, x86_fp80 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca x86_fp80, align 16
  %5 = alloca i64, align 8
  store i32 %0, i32* %3, align 4
  store x86_fp80 %1, x86_fp80* %4, align 16
  %6 = load i32, i32* %3, align 4
  %7 = icmp ne i32 %6, 1
  br i1 %7, label %8, label %28

8:                                                ; preds = %2
  %9 = load x86_fp80, x86_fp80* %4, align 16
  %10 = fcmp olt x86_fp80 %9, 0xK403EFFFFFFFFFFFFFFFF
  br i1 %10, label %11, label %28

11:                                               ; preds = %8
  %12 = load x86_fp80, x86_fp80* %4, align 16
  %13 = fptoui x86_fp80 %12 to i64
  store i64 %13, i64* %5, align 8
  %14 = load i64, i64* %5, align 8
  %15 = load i32, i32* %3, align 4
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %22

17:                                               ; preds = %11
  %18 = load i64, i64* %5, align 8
  %19 = uitofp i64 %18 to x86_fp80
  %20 = load x86_fp80, x86_fp80* %4, align 16
  %21 = fcmp une x86_fp80 %19, %20
  br label %22

22:                                               ; preds = %17, %11
  %23 = phi i1 [ false, %11 ], [ %21, %17 ]
  %24 = zext i1 %23 to i32
  %25 = sext i32 %24 to i64
  %26 = add i64 %14, %25
  %27 = uitofp i64 %26 to x86_fp80
  store x86_fp80 %27, x86_fp80* %4, align 16
  br label %28

28:                                               ; preds = %22, %8, %2
  %29 = load x86_fp80, x86_fp80* %4, align 16
  ret x86_fp80 %29
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @group_number(i8* %0, i64 %1, i8* %2, i8* %3) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca [41 x i8], align 16
  %14 = alloca i8, align 1
  store i8* %0, i8** %5, align 8
  store i64 %1, i64* %6, align 8
  store i8* %2, i8** %7, align 8
  store i8* %3, i8** %8, align 8
  store i64 -1, i64* %10, align 8
  %15 = load i8*, i8** %8, align 8
  %16 = call i64 @strlen(i8* %15) #17
  store i64 %16, i64* %11, align 8
  %17 = load i64, i64* %6, align 8
  store i64 %17, i64* %12, align 8
  %18 = getelementptr inbounds [41 x i8], [41 x i8]* %13, i64 0, i64 0
  %19 = load i8*, i8** %5, align 8
  %20 = load i64, i64* %6, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %18, i8* align 1 %19, i64 %20, i1 false)
  %21 = load i8*, i8** %5, align 8
  %22 = load i64, i64* %6, align 8
  %23 = getelementptr inbounds i8, i8* %21, i64 %22
  store i8* %23, i8** %9, align 8
  br label %24

24:                                               ; preds = %65, %4
  %25 = load i8*, i8** %7, align 8
  %26 = load i8, i8* %25, align 1
  store i8 %26, i8* %14, align 1
  %27 = load i8, i8* %14, align 1
  %28 = icmp ne i8 %27, 0
  br i1 %28, label %29, label %42

29:                                               ; preds = %24
  %30 = load i8, i8* %14, align 1
  %31 = zext i8 %30 to i32
  %32 = icmp slt i32 %31, 127
  br i1 %32, label %33, label %36

33:                                               ; preds = %29
  %34 = load i8, i8* %14, align 1
  %35 = zext i8 %34 to i64
  br label %38

36:                                               ; preds = %29
  %37 = load i64, i64* %12, align 8
  br label %38

38:                                               ; preds = %36, %33
  %39 = phi i64 [ %35, %33 ], [ %37, %36 ]
  store i64 %39, i64* %10, align 8
  %40 = load i8*, i8** %7, align 8
  %41 = getelementptr inbounds i8, i8* %40, i32 1
  store i8* %41, i8** %7, align 8
  br label %42

42:                                               ; preds = %38, %24
  %43 = load i64, i64* %12, align 8
  %44 = load i64, i64* %10, align 8
  %45 = icmp ult i64 %43, %44
  br i1 %45, label %46, label %48

46:                                               ; preds = %42
  %47 = load i64, i64* %12, align 8
  store i64 %47, i64* %10, align 8
  br label %48

48:                                               ; preds = %46, %42
  %49 = load i64, i64* %10, align 8
  %50 = load i8*, i8** %9, align 8
  %51 = sub i64 0, %49
  %52 = getelementptr inbounds i8, i8* %50, i64 %51
  store i8* %52, i8** %9, align 8
  %53 = load i64, i64* %10, align 8
  %54 = load i64, i64* %12, align 8
  %55 = sub i64 %54, %53
  store i64 %55, i64* %12, align 8
  %56 = load i8*, i8** %9, align 8
  %57 = getelementptr inbounds [41 x i8], [41 x i8]* %13, i64 0, i64 0
  %58 = load i64, i64* %12, align 8
  %59 = getelementptr inbounds i8, i8* %57, i64 %58
  %60 = load i64, i64* %10, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %56, i8* align 1 %59, i64 %60, i1 false)
  %61 = load i64, i64* %12, align 8
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %48
  %64 = load i8*, i8** %9, align 8
  ret i8* %64

65:                                               ; preds = %48
  %66 = load i64, i64* %11, align 8
  %67 = load i8*, i8** %9, align 8
  %68 = sub i64 0, %66
  %69 = getelementptr inbounds i8, i8* %67, i64 %68
  store i8* %69, i8** %9, align 8
  %70 = load i8*, i8** %9, align 8
  %71 = load i8*, i8** %8, align 8
  %72 = load i64, i64* %11, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %70, i8* align 1 %71, i64 %72, i1 false)
  br label %24
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @human_options(i8* %0, i32* %1, i64* %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i32* %1, i32** %5, align 8
  store i64* %2, i64** %6, align 8
  %8 = load i8*, i8** %4, align 8
  %9 = load i64*, i64** %6, align 8
  %10 = load i32*, i32** %5, align 8
  %11 = call i32 @humblock(i8* %8, i64* %9, i32* %10)
  store i32 %11, i32* %7, align 4
  %12 = load i64*, i64** %6, align 8
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %3
  %16 = call i64 @default_block_size()
  %17 = load i64*, i64** %6, align 8
  store i64 %16, i64* %17, align 8
  store i32 4, i32* %7, align 4
  br label %18

18:                                               ; preds = %15, %3
  %19 = load i32, i32* %7, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @humblock(i8* %0, i64* %1, i32* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store i64* %1, i64** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32 0, i32* %9, align 4
  %12 = load i8*, i8** %5, align 8
  %13 = icmp ne i8* %12, null
  br i1 %13, label %23, label %14

14:                                               ; preds = %3
  %15 = call i8* @getenv(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4.331, i64 0, i64 0)) #14
  store i8* %15, i8** %5, align 8
  %16 = icmp ne i8* %15, null
  br i1 %16, label %23, label %17

17:                                               ; preds = %14
  %18 = call i8* @getenv(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5.332, i64 0, i64 0)) #14
  store i8* %18, i8** %5, align 8
  %19 = icmp ne i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %17
  %21 = call i64 @default_block_size()
  %22 = load i64*, i64** %6, align 8
  store i64 %21, i64* %22, align 8
  br label %106

23:                                               ; preds = %17, %14, %3
  %24 = load i8*, i8** %5, align 8
  %25 = load i8, i8* %24, align 1
  %26 = sext i8 %25 to i32
  %27 = icmp eq i32 %26, 39
  br i1 %27, label %28, label %33

28:                                               ; preds = %23
  %29 = load i32, i32* %9, align 4
  %30 = or i32 %29, 4
  store i32 %30, i32* %9, align 4
  %31 = load i8*, i8** %5, align 8
  %32 = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %32, i8** %5, align 8
  br label %33

33:                                               ; preds = %28, %23
  %34 = load i8*, i8** %5, align 8
  %35 = call i64 @argmatch(i8* %34, i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @block_size_args, i64 0, i64 0), i8* bitcast ([2 x i32]* @block_size_opts to i8*), i64 4) #17
  %36 = trunc i64 %35 to i32
  store i32 %36, i32* %8, align 4
  %37 = icmp sle i32 0, %36
  br i1 %37, label %38, label %46

38:                                               ; preds = %33
  %39 = load i32, i32* %8, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [2 x i32], [2 x i32]* @block_size_opts, i64 0, i64 %40
  %42 = load i32, i32* %41, align 4
  %43 = load i32, i32* %9, align 4
  %44 = or i32 %43, %42
  store i32 %44, i32* %9, align 4
  %45 = load i64*, i64** %6, align 8
  store i64 1, i64* %45, align 8
  br label %105

46:                                               ; preds = %33
  %47 = load i8*, i8** %5, align 8
  %48 = load i64*, i64** %6, align 8
  %49 = call i32 @xstrtoumax(i8* %47, i8** %10, i32 0, i64* %48, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6.333, i64 0, i64 0))
  store i32 %49, i32* %11, align 4
  %50 = load i32, i32* %11, align 4
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %46
  %53 = load i32*, i32** %7, align 8
  store i32 0, i32* %53, align 4
  %54 = load i32, i32* %11, align 4
  store i32 %54, i32* %4, align 4
  br label %109

55:                                               ; preds = %46
  br label %56

56:                                               ; preds = %101, %55
  %57 = load i8*, i8** %5, align 8
  %58 = load i8, i8* %57, align 1
  %59 = sext i8 %58 to i32
  %60 = icmp sle i32 48, %59
  br i1 %60, label %61, label %66

61:                                               ; preds = %56
  %62 = load i8*, i8** %5, align 8
  %63 = load i8, i8* %62, align 1
  %64 = sext i8 %63 to i32
  %65 = icmp sle i32 %64, 57
  br label %66

66:                                               ; preds = %61, %56
  %67 = phi i1 [ false, %56 ], [ %65, %61 ]
  %68 = xor i1 %67, true
  br i1 %68, label %69, label %104

69:                                               ; preds = %66
  %70 = load i8*, i8** %5, align 8
  %71 = load i8*, i8** %10, align 8
  %72 = icmp eq i8* %70, %71
  br i1 %72, label %73, label %100

73:                                               ; preds = %69
  %74 = load i32, i32* %9, align 4
  %75 = or i32 %74, 128
  store i32 %75, i32* %9, align 4
  %76 = load i8*, i8** %10, align 8
  %77 = getelementptr inbounds i8, i8* %76, i64 -1
  %78 = load i8, i8* %77, align 1
  %79 = sext i8 %78 to i32
  %80 = icmp eq i32 %79, 66
  br i1 %80, label %81, label %84

81:                                               ; preds = %73
  %82 = load i32, i32* %9, align 4
  %83 = or i32 %82, 256
  store i32 %83, i32* %9, align 4
  br label %84

84:                                               ; preds = %81, %73
  %85 = load i8*, i8** %10, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 -1
  %87 = load i8, i8* %86, align 1
  %88 = sext i8 %87 to i32
  %89 = icmp ne i32 %88, 66
  br i1 %89, label %96, label %90

90:                                               ; preds = %84
  %91 = load i8*, i8** %10, align 8
  %92 = getelementptr inbounds i8, i8* %91, i64 -2
  %93 = load i8, i8* %92, align 1
  %94 = sext i8 %93 to i32
  %95 = icmp eq i32 %94, 105
  br i1 %95, label %96, label %99

96:                                               ; preds = %90, %84
  %97 = load i32, i32* %9, align 4
  %98 = or i32 %97, 32
  store i32 %98, i32* %9, align 4
  br label %99

99:                                               ; preds = %96, %90
  br label %104

100:                                              ; preds = %69
  br label %101

101:                                              ; preds = %100
  %102 = load i8*, i8** %5, align 8
  %103 = getelementptr inbounds i8, i8* %102, i32 1
  store i8* %103, i8** %5, align 8
  br label %56, !llvm.loop !95

104:                                              ; preds = %99, %66
  br label %105

105:                                              ; preds = %104, %38
  br label %106

106:                                              ; preds = %105, %20
  %107 = load i32, i32* %9, align 4
  %108 = load i32*, i32** %7, align 8
  store i32 %107, i32* %108, align 4
  store i32 0, i32* %4, align 4
  br label %109

109:                                              ; preds = %106, %52
  %110 = load i32, i32* %4, align 4
  ret i32 %110
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @default_block_size() #0 {
  %1 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9.330, i64 0, i64 0)) #14
  %2 = icmp ne i8* %1, null
  %3 = zext i1 %2 to i64
  %4 = select i1 %2, i32 512, i32 1024
  %5 = sext i32 %4 to i64
  ret i64 %5
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @getuser(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.userid*, align 8
  %4 = alloca %struct.userid*, align 8
  %5 = alloca %struct.passwd*, align 8
  %6 = alloca i8*, align 8
  store i32 %0, i32* %2, align 4
  store %struct.userid* null, %struct.userid** %4, align 8
  %7 = load %struct.userid*, %struct.userid** @user_alist, align 8
  store %struct.userid* %7, %struct.userid** %3, align 8
  br label %8

8:                                                ; preds = %21, %1
  %9 = load %struct.userid*, %struct.userid** %3, align 8
  %10 = icmp ne %struct.userid* %9, null
  br i1 %10, label %11, label %25

11:                                               ; preds = %8
  %12 = load %struct.userid*, %struct.userid** %3, align 8
  %13 = getelementptr inbounds %struct.userid, %struct.userid* %12, i32 0, i32 0
  %14 = bitcast %union.anon.12* %13 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = load i32, i32* %2, align 4
  %17 = icmp eq i32 %15, %16
  br i1 %17, label %18, label %20

18:                                               ; preds = %11
  %19 = load %struct.userid*, %struct.userid** %3, align 8
  store %struct.userid* %19, %struct.userid** %4, align 8
  br label %25

20:                                               ; preds = %11
  br label %21

21:                                               ; preds = %20
  %22 = load %struct.userid*, %struct.userid** %3, align 8
  %23 = getelementptr inbounds %struct.userid, %struct.userid* %22, i32 0, i32 1
  %24 = load %struct.userid*, %struct.userid** %23, align 8
  store %struct.userid* %24, %struct.userid** %3, align 8
  br label %8, !llvm.loop !96

25:                                               ; preds = %18, %8
  %26 = load %struct.userid*, %struct.userid** %4, align 8
  %27 = icmp eq %struct.userid* %26, null
  br i1 %27, label %28, label %60

28:                                               ; preds = %25
  %29 = load i32, i32* %2, align 4
  %30 = call %struct.passwd* @getpwuid(i32 %29)
  store %struct.passwd* %30, %struct.passwd** %5, align 8
  %31 = load %struct.passwd*, %struct.passwd** %5, align 8
  %32 = icmp ne %struct.passwd* %31, null
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  %34 = load %struct.passwd*, %struct.passwd** %5, align 8
  %35 = getelementptr inbounds %struct.passwd, %struct.passwd* %34, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  br label %38

37:                                               ; preds = %28
  br label %38

38:                                               ; preds = %37, %33
  %39 = phi i8* [ %36, %33 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.338, i64 0, i64 0), %37 ]
  store i8* %39, i8** %6, align 8
  %40 = load i8*, i8** %6, align 8
  %41 = call i64 @strlen(i8* %40) #17
  %42 = add i64 %41, 1
  %43 = add i64 23, %42
  %44 = and i64 %43, -8
  %45 = call noalias i8* @xmalloc(i64 %44)
  %46 = bitcast i8* %45 to %struct.userid*
  store %struct.userid* %46, %struct.userid** %4, align 8
  %47 = load i32, i32* %2, align 4
  %48 = load %struct.userid*, %struct.userid** %4, align 8
  %49 = getelementptr inbounds %struct.userid, %struct.userid* %48, i32 0, i32 0
  %50 = bitcast %union.anon.12* %49 to i32*
  store i32 %47, i32* %50, align 8
  %51 = load %struct.userid*, %struct.userid** %4, align 8
  %52 = getelementptr inbounds %struct.userid, %struct.userid* %51, i32 0, i32 2
  %53 = getelementptr inbounds [0 x i8], [0 x i8]* %52, i64 0, i64 0
  %54 = load i8*, i8** %6, align 8
  %55 = call i8* @strcpy(i8* %53, i8* %54) #14
  %56 = load %struct.userid*, %struct.userid** @user_alist, align 8
  %57 = load %struct.userid*, %struct.userid** %4, align 8
  %58 = getelementptr inbounds %struct.userid, %struct.userid* %57, i32 0, i32 1
  store %struct.userid* %56, %struct.userid** %58, align 8
  %59 = load %struct.userid*, %struct.userid** %4, align 8
  store %struct.userid* %59, %struct.userid** @user_alist, align 8
  br label %60

60:                                               ; preds = %38, %25
  %61 = load %struct.userid*, %struct.userid** %4, align 8
  %62 = getelementptr inbounds %struct.userid, %struct.userid* %61, i32 0, i32 2
  %63 = getelementptr inbounds [0 x i8], [0 x i8]* %62, i64 0, i64 0
  %64 = load i8, i8* %63, align 8
  %65 = sext i8 %64 to i32
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %67, label %71

67:                                               ; preds = %60
  %68 = load %struct.userid*, %struct.userid** %4, align 8
  %69 = getelementptr inbounds %struct.userid, %struct.userid* %68, i32 0, i32 2
  %70 = getelementptr inbounds [0 x i8], [0 x i8]* %69, i64 0, i64 0
  br label %72

71:                                               ; preds = %60
  br label %72

72:                                               ; preds = %71, %67
  %73 = phi i8* [ %70, %67 ], [ null, %71 ]
  ret i8* %73
}

declare dso_local %struct.passwd* @getpwuid(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @getgroup(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.userid*, align 8
  %4 = alloca %struct.userid*, align 8
  %5 = alloca %struct.group*, align 8
  %6 = alloca i8*, align 8
  store i32 %0, i32* %2, align 4
  store %struct.userid* null, %struct.userid** %4, align 8
  %7 = load %struct.userid*, %struct.userid** @group_alist, align 8
  store %struct.userid* %7, %struct.userid** %3, align 8
  br label %8

8:                                                ; preds = %21, %1
  %9 = load %struct.userid*, %struct.userid** %3, align 8
  %10 = icmp ne %struct.userid* %9, null
  br i1 %10, label %11, label %25

11:                                               ; preds = %8
  %12 = load %struct.userid*, %struct.userid** %3, align 8
  %13 = getelementptr inbounds %struct.userid, %struct.userid* %12, i32 0, i32 0
  %14 = bitcast %union.anon.12* %13 to i32*
  %15 = load i32, i32* %14, align 8
  %16 = load i32, i32* %2, align 4
  %17 = icmp eq i32 %15, %16
  br i1 %17, label %18, label %20

18:                                               ; preds = %11
  %19 = load %struct.userid*, %struct.userid** %3, align 8
  store %struct.userid* %19, %struct.userid** %4, align 8
  br label %25

20:                                               ; preds = %11
  br label %21

21:                                               ; preds = %20
  %22 = load %struct.userid*, %struct.userid** %3, align 8
  %23 = getelementptr inbounds %struct.userid, %struct.userid* %22, i32 0, i32 1
  %24 = load %struct.userid*, %struct.userid** %23, align 8
  store %struct.userid* %24, %struct.userid** %3, align 8
  br label %8, !llvm.loop !97

25:                                               ; preds = %18, %8
  %26 = load %struct.userid*, %struct.userid** %4, align 8
  %27 = icmp eq %struct.userid* %26, null
  br i1 %27, label %28, label %60

28:                                               ; preds = %25
  %29 = load i32, i32* %2, align 4
  %30 = call %struct.group* @getgrgid(i32 %29)
  store %struct.group* %30, %struct.group** %5, align 8
  %31 = load %struct.group*, %struct.group** %5, align 8
  %32 = icmp ne %struct.group* %31, null
  br i1 %32, label %33, label %37

33:                                               ; preds = %28
  %34 = load %struct.group*, %struct.group** %5, align 8
  %35 = getelementptr inbounds %struct.group, %struct.group* %34, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  br label %38

37:                                               ; preds = %28
  br label %38

38:                                               ; preds = %37, %33
  %39 = phi i8* [ %36, %33 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.338, i64 0, i64 0), %37 ]
  store i8* %39, i8** %6, align 8
  %40 = load i8*, i8** %6, align 8
  %41 = call i64 @strlen(i8* %40) #17
  %42 = add i64 %41, 1
  %43 = add i64 23, %42
  %44 = and i64 %43, -8
  %45 = call noalias i8* @xmalloc(i64 %44)
  %46 = bitcast i8* %45 to %struct.userid*
  store %struct.userid* %46, %struct.userid** %4, align 8
  %47 = load i32, i32* %2, align 4
  %48 = load %struct.userid*, %struct.userid** %4, align 8
  %49 = getelementptr inbounds %struct.userid, %struct.userid* %48, i32 0, i32 0
  %50 = bitcast %union.anon.12* %49 to i32*
  store i32 %47, i32* %50, align 8
  %51 = load %struct.userid*, %struct.userid** %4, align 8
  %52 = getelementptr inbounds %struct.userid, %struct.userid* %51, i32 0, i32 2
  %53 = getelementptr inbounds [0 x i8], [0 x i8]* %52, i64 0, i64 0
  %54 = load i8*, i8** %6, align 8
  %55 = call i8* @strcpy(i8* %53, i8* %54) #14
  %56 = load %struct.userid*, %struct.userid** @group_alist, align 8
  %57 = load %struct.userid*, %struct.userid** %4, align 8
  %58 = getelementptr inbounds %struct.userid, %struct.userid* %57, i32 0, i32 1
  store %struct.userid* %56, %struct.userid** %58, align 8
  %59 = load %struct.userid*, %struct.userid** %4, align 8
  store %struct.userid* %59, %struct.userid** @group_alist, align 8
  br label %60

60:                                               ; preds = %38, %25
  %61 = load %struct.userid*, %struct.userid** %4, align 8
  %62 = getelementptr inbounds %struct.userid, %struct.userid* %61, i32 0, i32 2
  %63 = getelementptr inbounds [0 x i8], [0 x i8]* %62, i64 0, i64 0
  %64 = load i8, i8* %63, align 8
  %65 = sext i8 %64 to i32
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %67, label %71

67:                                               ; preds = %60
  %68 = load %struct.userid*, %struct.userid** %4, align 8
  %69 = getelementptr inbounds %struct.userid, %struct.userid* %68, i32 0, i32 2
  %70 = getelementptr inbounds [0 x i8], [0 x i8]* %69, i64 0, i64 0
  br label %72

71:                                               ; preds = %60
  br label %72

72:                                               ; preds = %71, %67
  %73 = phi i8* [ %70, %67 ], [ null, %71 ]
  ret i8* %73
}

declare dso_local %struct.group* @getgrgid(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @imaxtostr(i64 %0, i8* %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  store i64 %0, i64* %3, align 8
  store i8* %1, i8** %4, align 8
  %6 = load i8*, i8** %4, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 20
  store i8* %7, i8** %5, align 8
  %8 = load i8*, i8** %5, align 8
  store i8 0, i8* %8, align 1
  %9 = load i64, i64* %3, align 8
  %10 = icmp slt i64 %9, 0
  br i1 %10, label %11, label %26

11:                                               ; preds = %2
  br label %12

12:                                               ; preds = %19, %11
  %13 = load i64, i64* %3, align 8
  %14 = srem i64 %13, 10
  %15 = sub nsw i64 48, %14
  %16 = trunc i64 %15 to i8
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i32 -1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %18, align 1
  br label %19

19:                                               ; preds = %12
  %20 = load i64, i64* %3, align 8
  %21 = sdiv i64 %20, 10
  store i64 %21, i64* %3, align 8
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %12, label %23, !llvm.loop !98

23:                                               ; preds = %19
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i32 -1
  store i8* %25, i8** %5, align 8
  store i8 45, i8* %25, align 1
  br label %39

26:                                               ; preds = %2
  br label %27

27:                                               ; preds = %34, %26
  %28 = load i64, i64* %3, align 8
  %29 = srem i64 %28, 10
  %30 = add nsw i64 48, %29
  %31 = trunc i64 %30 to i8
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i32 -1
  store i8* %33, i8** %5, align 8
  store i8 %31, i8* %33, align 1
  br label %34

34:                                               ; preds = %27
  %35 = load i64, i64* %3, align 8
  %36 = sdiv i64 %35, 10
  store i64 %36, i64* %3, align 8
  %37 = icmp ne i64 %36, 0
  br i1 %37, label %27, label %38, !llvm.loop !99

38:                                               ; preds = %34
  br label %39

39:                                               ; preds = %38, %23
  %40 = load i8*, i8** %5, align 8
  ret i8* %40
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @umaxtostr(i64 %0, i8* %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  store i64 %0, i64* %3, align 8
  store i8* %1, i8** %4, align 8
  %6 = load i8*, i8** %4, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 20
  store i8* %7, i8** %5, align 8
  %8 = load i8*, i8** %5, align 8
  store i8 0, i8* %8, align 1
  %9 = load i64, i64* %3, align 8
  %10 = icmp ult i64 %9, 0
  br i1 %10, label %11, label %26

11:                                               ; preds = %2
  br label %12

12:                                               ; preds = %19, %11
  %13 = load i64, i64* %3, align 8
  %14 = urem i64 %13, 10
  %15 = sub i64 48, %14
  %16 = trunc i64 %15 to i8
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i32 -1
  store i8* %18, i8** %5, align 8
  store i8 %16, i8* %18, align 1
  br label %19

19:                                               ; preds = %12
  %20 = load i64, i64* %3, align 8
  %21 = udiv i64 %20, 10
  store i64 %21, i64* %3, align 8
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %12, label %23, !llvm.loop !100

23:                                               ; preds = %19
  %24 = load i8*, i8** %5, align 8
  %25 = getelementptr inbounds i8, i8* %24, i32 -1
  store i8* %25, i8** %5, align 8
  store i8 45, i8* %25, align 1
  br label %39

26:                                               ; preds = %2
  br label %27

27:                                               ; preds = %34, %26
  %28 = load i64, i64* %3, align 8
  %29 = urem i64 %28, 10
  %30 = add i64 48, %29
  %31 = trunc i64 %30 to i8
  %32 = load i8*, i8** %5, align 8
  %33 = getelementptr inbounds i8, i8* %32, i32 -1
  store i8* %33, i8** %5, align 8
  store i8 %31, i8* %33, align 1
  br label %34

34:                                               ; preds = %27
  %35 = load i64, i64* %3, align 8
  %36 = udiv i64 %35, 10
  store i64 %36, i64* %3, align 8
  %37 = icmp ne i64 %36, 0
  br i1 %37, label %27, label %38, !llvm.loop !101

38:                                               ; preds = %34
  br label %39

39:                                               ; preds = %38, %23
  %40 = load i8*, i8** %5, align 8
  ret i8* %40
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @mbsalign(i8* %0, i8* %1, i64 %2, i64* %3, i32 %4, i32 %5) #0 {
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i32*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8, align 1
  %22 = alloca i8, align 1
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i8*, align 8
  store i8* %0, i8** %7, align 8
  store i8* %1, i8** %8, align 8
  store i64 %2, i64* %9, align 8
  store i64* %3, i64** %10, align 8
  store i32 %4, i32* %11, align 4
  store i32 %5, i32* %12, align 4
  store i64 -1, i64* %13, align 8
  %28 = load i8*, i8** %7, align 8
  %29 = call i64 @strlen(i8* %28) #17
  %30 = add i64 %29, 1
  store i64 %30, i64* %14, align 8
  store i8* null, i8** %15, align 8
  store i32* null, i32** %16, align 8
  %31 = load i8*, i8** %7, align 8
  store i8* %31, i8** %17, align 8
  %32 = load i64, i64* %14, align 8
  %33 = sub i64 %32, 1
  store i64 %33, i64* %18, align 8
  %34 = load i64, i64* %18, align 8
  store i64 %34, i64* %19, align 8
  store i64 0, i64* %20, align 8
  store i8 0, i8* %21, align 1
  store i8 0, i8* %22, align 1
  %35 = load i32, i32* %12, align 4
  %36 = and i32 %35, 2
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %86, label %38

38:                                               ; preds = %6
  %39 = call i64 @__ctype_get_mb_cur_max() #14
  %40 = icmp ugt i64 %39, 1
  br i1 %40, label %41, label %86

41:                                               ; preds = %38
  %42 = load i8*, i8** %7, align 8
  %43 = call i64 @mbstowcs(i32* null, i8* %42, i64 0) #14
  store i64 %43, i64* %23, align 8
  %44 = load i64, i64* %23, align 8
  %45 = icmp eq i64 %44, -1
  br i1 %45, label %46, label %52

46:                                               ; preds = %41
  %47 = load i32, i32* %12, align 4
  %48 = and i32 %47, 1
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %46
  br label %126

51:                                               ; preds = %46
  br label %212

52:                                               ; preds = %41
  %53 = load i64, i64* %23, align 8
  %54 = add i64 %53, 1
  store i64 %54, i64* %23, align 8
  %55 = load i64, i64* %23, align 8
  %56 = mul i64 %55, 4
  %57 = call noalias i8* @malloc(i64 %56) #14
  %58 = bitcast i8* %57 to i32*
  store i32* %58, i32** %16, align 8
  %59 = load i32*, i32** %16, align 8
  %60 = icmp eq i32* %59, null
  br i1 %60, label %61, label %67

61:                                               ; preds = %52
  %62 = load i32, i32* %12, align 4
  %63 = and i32 %62, 1
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %61
  br label %126

66:                                               ; preds = %61
  br label %212

67:                                               ; preds = %52
  %68 = load i32*, i32** %16, align 8
  %69 = load i8*, i8** %7, align 8
  %70 = load i64, i64* %23, align 8
  %71 = call i64 @mbstowcs(i32* %68, i8* %69, i64 %70) #14
  %72 = icmp ne i64 %71, 0
  br i1 %72, label %73, label %85

73:                                               ; preds = %67
  %74 = load i32*, i32** %16, align 8
  %75 = load i64, i64* %23, align 8
  %76 = sub i64 %75, 1
  %77 = getelementptr inbounds i32, i32* %74, i64 %76
  store i32 0, i32* %77, align 4
  store i8 1, i8* %22, align 1
  %78 = load i32*, i32** %16, align 8
  %79 = call zeroext i1 @wc_ensure_printable(i32* %78)
  %80 = zext i1 %79 to i8
  store i8 %80, i8* %21, align 1
  %81 = load i32*, i32** %16, align 8
  %82 = load i64, i64* %23, align 8
  %83 = call i32 @wcswidth(i32* %81, i64 %82) #14
  %84 = sext i32 %83 to i64
  store i64 %84, i64* %18, align 8
  br label %85

85:                                               ; preds = %73, %67
  br label %86

86:                                               ; preds = %85, %38, %6
  %87 = load i8, i8* %22, align 1
  %88 = trunc i8 %87 to i1
  br i1 %88, label %89, label %125

89:                                               ; preds = %86
  %90 = load i8, i8* %21, align 1
  %91 = trunc i8 %90 to i1
  br i1 %91, label %97, label %92

92:                                               ; preds = %89
  %93 = load i64, i64* %18, align 8
  %94 = load i64*, i64** %10, align 8
  %95 = load i64, i64* %94, align 8
  %96 = icmp ugt i64 %93, %95
  br i1 %96, label %97, label %125

97:                                               ; preds = %92, %89
  %98 = load i8, i8* %21, align 1
  %99 = trunc i8 %98 to i1
  br i1 %99, label %100, label %104

100:                                              ; preds = %97
  %101 = load i32*, i32** %16, align 8
  %102 = call i64 @wcstombs(i8* null, i32* %101, i64 0) #14
  %103 = add i64 %102, 1
  store i64 %103, i64* %14, align 8
  br label %104

104:                                              ; preds = %100, %97
  %105 = load i64, i64* %14, align 8
  %106 = call noalias i8* @malloc(i64 %105) #14
  store i8* %106, i8** %15, align 8
  %107 = load i8*, i8** %15, align 8
  %108 = icmp eq i8* %107, null
  br i1 %108, label %109, label %115

109:                                              ; preds = %104
  %110 = load i32, i32* %12, align 4
  %111 = and i32 %110, 1
  %112 = icmp ne i32 %111, 0
  br i1 %112, label %113, label %114

113:                                              ; preds = %109
  br label %126

114:                                              ; preds = %109
  br label %212

115:                                              ; preds = %104
  %116 = load i8*, i8** %15, align 8
  store i8* %116, i8** %17, align 8
  %117 = load i32*, i32** %16, align 8
  %118 = load i64*, i64** %10, align 8
  %119 = load i64, i64* %118, align 8
  %120 = call i64 @wc_truncate(i32* %117, i64 %119)
  store i64 %120, i64* %18, align 8
  %121 = load i8*, i8** %15, align 8
  %122 = load i32*, i32** %16, align 8
  %123 = load i64, i64* %14, align 8
  %124 = call i64 @wcstombs(i8* %121, i32* %122, i64 %123) #14
  store i64 %124, i64* %19, align 8
  br label %125

125:                                              ; preds = %115, %92, %86
  br label %126

126:                                              ; preds = %125, %113, %65, %50
  %127 = load i64, i64* %18, align 8
  %128 = load i64*, i64** %10, align 8
  %129 = load i64, i64* %128, align 8
  %130 = icmp ugt i64 %127, %129
  br i1 %130, label %131, label %135

131:                                              ; preds = %126
  %132 = load i64*, i64** %10, align 8
  %133 = load i64, i64* %132, align 8
  store i64 %133, i64* %18, align 8
  %134 = load i64, i64* %18, align 8
  store i64 %134, i64* %19, align 8
  br label %135

135:                                              ; preds = %131, %126
  %136 = load i64*, i64** %10, align 8
  %137 = load i64, i64* %136, align 8
  %138 = load i64, i64* %18, align 8
  %139 = icmp ugt i64 %137, %138
  br i1 %139, label %140, label %145

140:                                              ; preds = %135
  %141 = load i64*, i64** %10, align 8
  %142 = load i64, i64* %141, align 8
  %143 = load i64, i64* %18, align 8
  %144 = sub i64 %142, %143
  store i64 %144, i64* %20, align 8
  br label %145

145:                                              ; preds = %140, %135
  %146 = load i64, i64* %18, align 8
  %147 = load i64*, i64** %10, align 8
  store i64 %146, i64* %147, align 8
  %148 = load i32, i32* %11, align 4
  switch i32 %148, label %154 [
    i32 0, label %149
    i32 1, label %151
    i32 2, label %153
  ]

149:                                              ; preds = %145
  store i64 0, i64* %24, align 8
  %150 = load i64, i64* %20, align 8
  store i64 %150, i64* %25, align 8
  br label %162

151:                                              ; preds = %145
  %152 = load i64, i64* %20, align 8
  store i64 %152, i64* %24, align 8
  store i64 0, i64* %25, align 8
  br label %162

153:                                              ; preds = %145
  br label %154

154:                                              ; preds = %153, %145
  %155 = load i64, i64* %20, align 8
  %156 = udiv i64 %155, 2
  %157 = load i64, i64* %20, align 8
  %158 = urem i64 %157, 2
  %159 = add i64 %156, %158
  store i64 %159, i64* %24, align 8
  %160 = load i64, i64* %20, align 8
  %161 = udiv i64 %160, 2
  store i64 %161, i64* %25, align 8
  br label %162

162:                                              ; preds = %154, %151, %149
  %163 = load i32, i32* %12, align 4
  %164 = and i32 %163, 4
  %165 = icmp ne i32 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %162
  store i64 0, i64* %24, align 8
  br label %167

167:                                              ; preds = %166, %162
  %168 = load i32, i32* %12, align 4
  %169 = and i32 %168, 8
  %170 = icmp ne i32 %169, 0
  br i1 %170, label %171, label %172

171:                                              ; preds = %167
  store i64 0, i64* %25, align 8
  br label %172

172:                                              ; preds = %171, %167
  %173 = load i64, i64* %9, align 8
  %174 = icmp ne i64 %173, 0
  br i1 %174, label %175, label %205

175:                                              ; preds = %172
  %176 = load i8*, i8** %8, align 8
  %177 = load i64, i64* %9, align 8
  %178 = getelementptr inbounds i8, i8* %176, i64 %177
  %179 = getelementptr inbounds i8, i8* %178, i64 -1
  store i8* %179, i8** %27, align 8
  %180 = load i8*, i8** %8, align 8
  %181 = load i8*, i8** %27, align 8
  %182 = load i64, i64* %24, align 8
  %183 = call i8* @mbs_align_pad(i8* %180, i8* %181, i64 %182)
  store i8* %183, i8** %8, align 8
  %184 = load i8*, i8** %27, align 8
  %185 = load i8*, i8** %8, align 8
  %186 = ptrtoint i8* %184 to i64
  %187 = ptrtoint i8* %185 to i64
  %188 = sub i64 %186, %187
  store i64 %188, i64* %26, align 8
  %189 = load i8*, i8** %8, align 8
  %190 = load i8*, i8** %17, align 8
  %191 = load i64, i64* %19, align 8
  %192 = load i64, i64* %26, align 8
  %193 = icmp ult i64 %191, %192
  br i1 %193, label %194, label %196

194:                                              ; preds = %175
  %195 = load i64, i64* %19, align 8
  br label %198

196:                                              ; preds = %175
  %197 = load i64, i64* %26, align 8
  br label %198

198:                                              ; preds = %196, %194
  %199 = phi i64 [ %195, %194 ], [ %197, %196 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %189, i8* align 1 %190, i64 %199, i1 false)
  %200 = getelementptr inbounds i8, i8* %189, i64 %199
  store i8* %200, i8** %8, align 8
  %201 = load i8*, i8** %8, align 8
  %202 = load i8*, i8** %27, align 8
  %203 = load i64, i64* %25, align 8
  %204 = call i8* @mbs_align_pad(i8* %201, i8* %202, i64 %203)
  br label %205

205:                                              ; preds = %198, %172
  %206 = load i64, i64* %19, align 8
  %207 = load i64, i64* %24, align 8
  %208 = load i64, i64* %25, align 8
  %209 = add i64 %207, %208
  %210 = mul i64 %209, 1
  %211 = add i64 %206, %210
  store i64 %211, i64* %13, align 8
  br label %212

212:                                              ; preds = %205, %114, %66, %51
  %213 = load i32*, i32** %16, align 8
  %214 = bitcast i32* %213 to i8*
  call void @free(i8* %214) #14
  %215 = load i8*, i8** %15, align 8
  call void @free(i8* %215) #14
  %216 = load i64, i64* %13, align 8
  ret i64 %216
}

; Function Attrs: nounwind
declare dso_local i64 @mbstowcs(i32*, i8*, i64) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @wc_ensure_printable(i32* %0) #0 {
  %2 = alloca i32*, align 8
  %3 = alloca i8, align 1
  %4 = alloca i32*, align 8
  store i32* %0, i32** %2, align 8
  store i8 0, i8* %3, align 1
  %5 = load i32*, i32** %2, align 8
  store i32* %5, i32** %4, align 8
  br label %6

6:                                                ; preds = %17, %1
  %7 = load i32*, i32** %4, align 8
  %8 = load i32, i32* %7, align 4
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %20

10:                                               ; preds = %6
  %11 = load i32*, i32** %4, align 8
  %12 = load i32, i32* %11, align 4
  %13 = call i32 @iswprint(i32 %12) #14
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %17, label %15

15:                                               ; preds = %10
  %16 = load i32*, i32** %4, align 8
  store i32 65533, i32* %16, align 4
  store i8 1, i8* %3, align 1
  br label %17

17:                                               ; preds = %15, %10
  %18 = load i32*, i32** %4, align 8
  %19 = getelementptr inbounds i32, i32* %18, i32 1
  store i32* %19, i32** %4, align 8
  br label %6, !llvm.loop !102

20:                                               ; preds = %6
  %21 = load i8, i8* %3, align 1
  %22 = trunc i8 %21 to i1
  ret i1 %22
}

; Function Attrs: nounwind
declare dso_local i32 @wcswidth(i32*, i64) #1

; Function Attrs: nounwind
declare dso_local i64 @wcstombs(i8*, i32*, i64) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @wc_truncate(i32* %0, i64 %1) #0 {
  %3 = alloca i32*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  store i32* %0, i32** %3, align 8
  store i64 %1, i64* %4, align 8
  store i64 0, i64* %5, align 8
  store i32 0, i32* %6, align 4
  br label %7

7:                                                ; preds = %27, %2
  %8 = load i32*, i32** %3, align 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %34

11:                                               ; preds = %7
  %12 = load i32*, i32** %3, align 8
  %13 = load i32, i32* %12, align 4
  %14 = call i32 @wcwidth(i32 %13) #14
  store i32 %14, i32* %6, align 4
  %15 = load i32, i32* %6, align 4
  %16 = icmp eq i32 %15, -1
  br i1 %16, label %17, label %19

17:                                               ; preds = %11
  %18 = load i32*, i32** %3, align 8
  store i32 65533, i32* %18, align 4
  store i32 1, i32* %6, align 4
  br label %19

19:                                               ; preds = %17, %11
  %20 = load i64, i64* %5, align 8
  %21 = load i32, i32* %6, align 4
  %22 = sext i32 %21 to i64
  %23 = add i64 %20, %22
  %24 = load i64, i64* %4, align 8
  %25 = icmp ugt i64 %23, %24
  br i1 %25, label %26, label %27

26:                                               ; preds = %19
  br label %34

27:                                               ; preds = %19
  %28 = load i32, i32* %6, align 4
  %29 = sext i32 %28 to i64
  %30 = load i64, i64* %5, align 8
  %31 = add i64 %30, %29
  store i64 %31, i64* %5, align 8
  %32 = load i32*, i32** %3, align 8
  %33 = getelementptr inbounds i32, i32* %32, i32 1
  store i32* %33, i32** %3, align 8
  br label %7, !llvm.loop !103

34:                                               ; preds = %26, %7
  %35 = load i32*, i32** %3, align 8
  store i32 0, i32* %35, align 4
  %36 = load i64, i64* %5, align 8
  ret i64 %36
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @mbs_align_pad(i8* %0, i8* %1, i64 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i64 %2, i64* %6, align 8
  br label %7

7:                                                ; preds = %17, %3
  %8 = load i64, i64* %6, align 8
  %9 = add i64 %8, -1
  store i64 %9, i64* %6, align 8
  %10 = icmp ne i64 %8, 0
  br i1 %10, label %11, label %15

11:                                               ; preds = %7
  %12 = load i8*, i8** %4, align 8
  %13 = load i8*, i8** %5, align 8
  %14 = icmp ult i8* %12, %13
  br label %15

15:                                               ; preds = %11, %7
  %16 = phi i1 [ false, %7 ], [ %14, %11 ]
  br i1 %16, label %17, label %20

17:                                               ; preds = %15
  %18 = load i8*, i8** %4, align 8
  %19 = getelementptr inbounds i8, i8* %18, i32 1
  store i8* %19, i8** %4, align 8
  store i8 32, i8* %18, align 1
  br label %7, !llvm.loop !104

20:                                               ; preds = %15
  %21 = load i8*, i8** %4, align 8
  store i8 0, i8* %21, align 1
  %22 = load i8*, i8** %4, align 8
  ret i8* %22
}

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @gnu_mbswidth(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load i8*, i8** %3, align 8
  %6 = load i8*, i8** %3, align 8
  %7 = call i64 @strlen(i8* %6) #17
  %8 = load i32, i32* %4, align 4
  %9 = call i32 @mbsnwidth(i8* %5, i64 %7, i32 %8)
  ret i32 %9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @mbsnwidth(i8* %0, i64 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.__mbstate_t, align 4
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  store i8* %0, i8** %5, align 8
  store i64 %1, i64* %6, align 8
  store i32 %2, i32* %7, align 4
  %16 = load i8*, i8** %5, align 8
  store i8* %16, i8** %8, align 8
  %17 = load i8*, i8** %8, align 8
  %18 = load i64, i64* %6, align 8
  %19 = getelementptr inbounds i8, i8* %17, i64 %18
  store i8* %19, i8** %9, align 8
  store i32 0, i32* %10, align 4
  %20 = call i64 @__ctype_get_mb_cur_max() #14
  %21 = icmp ugt i64 %20, 1
  br i1 %21, label %22, label %119

22:                                               ; preds = %3
  br label %23

23:                                               ; preds = %116, %22
  %24 = load i8*, i8** %8, align 8
  %25 = load i8*, i8** %9, align 8
  %26 = icmp ult i8* %24, %25
  br i1 %26, label %27, label %117

27:                                               ; preds = %23
  %28 = load i8*, i8** %8, align 8
  %29 = load i8, i8* %28, align 1
  %30 = sext i8 %29 to i32
  switch i32 %30, label %36 [
    i32 32, label %31
    i32 33, label %31
    i32 34, label %31
    i32 35, label %31
    i32 37, label %31
    i32 38, label %31
    i32 39, label %31
    i32 40, label %31
    i32 41, label %31
    i32 42, label %31
    i32 43, label %31
    i32 44, label %31
    i32 45, label %31
    i32 46, label %31
    i32 47, label %31
    i32 48, label %31
    i32 49, label %31
    i32 50, label %31
    i32 51, label %31
    i32 52, label %31
    i32 53, label %31
    i32 54, label %31
    i32 55, label %31
    i32 56, label %31
    i32 57, label %31
    i32 58, label %31
    i32 59, label %31
    i32 60, label %31
    i32 61, label %31
    i32 62, label %31
    i32 63, label %31
    i32 65, label %31
    i32 66, label %31
    i32 67, label %31
    i32 68, label %31
    i32 69, label %31
    i32 70, label %31
    i32 71, label %31
    i32 72, label %31
    i32 73, label %31
    i32 74, label %31
    i32 75, label %31
    i32 76, label %31
    i32 77, label %31
    i32 78, label %31
    i32 79, label %31
    i32 80, label %31
    i32 81, label %31
    i32 82, label %31
    i32 83, label %31
    i32 84, label %31
    i32 85, label %31
    i32 86, label %31
    i32 87, label %31
    i32 88, label %31
    i32 89, label %31
    i32 90, label %31
    i32 91, label %31
    i32 92, label %31
    i32 93, label %31
    i32 94, label %31
    i32 95, label %31
    i32 97, label %31
    i32 98, label %31
    i32 99, label %31
    i32 100, label %31
    i32 101, label %31
    i32 102, label %31
    i32 103, label %31
    i32 104, label %31
    i32 105, label %31
    i32 106, label %31
    i32 107, label %31
    i32 108, label %31
    i32 109, label %31
    i32 110, label %31
    i32 111, label %31
    i32 112, label %31
    i32 113, label %31
    i32 114, label %31
    i32 115, label %31
    i32 116, label %31
    i32 117, label %31
    i32 118, label %31
    i32 119, label %31
    i32 120, label %31
    i32 121, label %31
    i32 122, label %31
    i32 123, label %31
    i32 124, label %31
    i32 125, label %31
    i32 126, label %31
  ]

31:                                               ; preds = %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27, %27
  %32 = load i8*, i8** %8, align 8
  %33 = getelementptr inbounds i8, i8* %32, i32 1
  store i8* %33, i8** %8, align 8
  %34 = load i32, i32* %10, align 4
  %35 = add nsw i32 %34, 1
  store i32 %35, i32* %10, align 4
  br label %116

36:                                               ; preds = %27
  %37 = bitcast %struct.__mbstate_t* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %37, i8 0, i64 8, i1 false)
  br label %38

38:                                               ; preds = %111, %36
  %39 = load i8*, i8** %8, align 8
  %40 = load i8*, i8** %9, align 8
  %41 = load i8*, i8** %8, align 8
  %42 = ptrtoint i8* %40 to i64
  %43 = ptrtoint i8* %41 to i64
  %44 = sub i64 %42, %43
  %45 = call i64 @rpl_mbrtowc(i32* %12, i8* %39, i64 %44, %struct.__mbstate_t* %11)
  store i64 %45, i64* %13, align 8
  %46 = load i64, i64* %13, align 8
  %47 = icmp eq i64 %46, -1
  br i1 %47, label %48, label %58

48:                                               ; preds = %38
  %49 = load i32, i32* %7, align 4
  %50 = and i32 %49, 1
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %57, label %52

52:                                               ; preds = %48
  %53 = load i8*, i8** %8, align 8
  %54 = getelementptr inbounds i8, i8* %53, i32 1
  store i8* %54, i8** %8, align 8
  %55 = load i32, i32* %10, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %10, align 4
  br label %115

57:                                               ; preds = %48
  store i32 -1, i32* %4, align 4
  br label %174

58:                                               ; preds = %38
  %59 = load i64, i64* %13, align 8
  %60 = icmp eq i64 %59, -2
  br i1 %60, label %61, label %70

61:                                               ; preds = %58
  %62 = load i32, i32* %7, align 4
  %63 = and i32 %62, 1
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %69, label %65

65:                                               ; preds = %61
  %66 = load i8*, i8** %9, align 8
  store i8* %66, i8** %8, align 8
  %67 = load i32, i32* %10, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %10, align 4
  br label %115

69:                                               ; preds = %61
  store i32 -1, i32* %4, align 4
  br label %174

70:                                               ; preds = %58
  %71 = load i64, i64* %13, align 8
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %74

73:                                               ; preds = %70
  store i64 1, i64* %13, align 8
  br label %74

74:                                               ; preds = %73, %70
  %75 = load i32, i32* %12, align 4
  %76 = call i32 @wcwidth(i32 %75) #14
  store i32 %76, i32* %14, align 4
  %77 = load i32, i32* %14, align 4
  %78 = icmp sge i32 %77, 0
  br i1 %78, label %79, label %89

79:                                               ; preds = %74
  %80 = load i32, i32* %14, align 4
  %81 = load i32, i32* %10, align 4
  %82 = sub nsw i32 2147483647, %81
  %83 = icmp sgt i32 %80, %82
  br i1 %83, label %84, label %85

84:                                               ; preds = %79
  br label %173

85:                                               ; preds = %79
  %86 = load i32, i32* %14, align 4
  %87 = load i32, i32* %10, align 4
  %88 = add nsw i32 %87, %86
  store i32 %88, i32* %10, align 4
  br label %107

89:                                               ; preds = %74
  %90 = load i32, i32* %7, align 4
  %91 = and i32 %90, 2
  %92 = icmp ne i32 %91, 0
  br i1 %92, label %105, label %93

93:                                               ; preds = %89
  %94 = load i32, i32* %12, align 4
  %95 = call i32 @iswcntrl(i32 %94) #14
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %104, label %97

97:                                               ; preds = %93
  %98 = load i32, i32* %10, align 4
  %99 = icmp eq i32 %98, 2147483647
  br i1 %99, label %100, label %101

100:                                              ; preds = %97
  br label %173

101:                                              ; preds = %97
  %102 = load i32, i32* %10, align 4
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %10, align 4
  br label %104

104:                                              ; preds = %101, %93
  br label %106

105:                                              ; preds = %89
  store i32 -1, i32* %4, align 4
  br label %174

106:                                              ; preds = %104
  br label %107

107:                                              ; preds = %106, %85
  %108 = load i64, i64* %13, align 8
  %109 = load i8*, i8** %8, align 8
  %110 = getelementptr inbounds i8, i8* %109, i64 %108
  store i8* %110, i8** %8, align 8
  br label %111

111:                                              ; preds = %107
  %112 = call i32 @mbsinit(%struct.__mbstate_t* %11) #17
  %113 = icmp ne i32 %112, 0
  %114 = xor i1 %113, true
  br i1 %114, label %38, label %115, !llvm.loop !105

115:                                              ; preds = %111, %65, %52
  br label %116

116:                                              ; preds = %115, %31
  br label %23, !llvm.loop !106

117:                                              ; preds = %23
  %118 = load i32, i32* %10, align 4
  store i32 %118, i32* %4, align 4
  br label %174

119:                                              ; preds = %3
  br label %120

120:                                              ; preds = %170, %119
  %121 = load i8*, i8** %8, align 8
  %122 = load i8*, i8** %9, align 8
  %123 = icmp ult i8* %121, %122
  br i1 %123, label %124, label %171

124:                                              ; preds = %120
  %125 = load i8*, i8** %8, align 8
  %126 = getelementptr inbounds i8, i8* %125, i32 1
  store i8* %126, i8** %8, align 8
  %127 = load i8, i8* %125, align 1
  store i8 %127, i8* %15, align 1
  %128 = call i16** @__ctype_b_loc() #18
  %129 = load i16*, i16** %128, align 8
  %130 = load i8, i8* %15, align 1
  %131 = zext i8 %130 to i32
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds i16, i16* %129, i64 %132
  %134 = load i16, i16* %133, align 2
  %135 = zext i16 %134 to i32
  %136 = and i32 %135, 16384
  %137 = icmp ne i32 %136, 0
  br i1 %137, label %138, label %145

138:                                              ; preds = %124
  %139 = load i32, i32* %10, align 4
  %140 = icmp eq i32 %139, 2147483647
  br i1 %140, label %141, label %142

141:                                              ; preds = %138
  br label %173

142:                                              ; preds = %138
  %143 = load i32, i32* %10, align 4
  %144 = add nsw i32 %143, 1
  store i32 %144, i32* %10, align 4
  br label %170

145:                                              ; preds = %124
  %146 = load i32, i32* %7, align 4
  %147 = and i32 %146, 2
  %148 = icmp ne i32 %147, 0
  br i1 %148, label %168, label %149

149:                                              ; preds = %145
  %150 = call i16** @__ctype_b_loc() #18
  %151 = load i16*, i16** %150, align 8
  %152 = load i8, i8* %15, align 1
  %153 = zext i8 %152 to i32
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i16, i16* %151, i64 %154
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = and i32 %157, 2
  %159 = icmp ne i32 %158, 0
  br i1 %159, label %167, label %160

160:                                              ; preds = %149
  %161 = load i32, i32* %10, align 4
  %162 = icmp eq i32 %161, 2147483647
  br i1 %162, label %163, label %164

163:                                              ; preds = %160
  br label %173

164:                                              ; preds = %160
  %165 = load i32, i32* %10, align 4
  %166 = add nsw i32 %165, 1
  store i32 %166, i32* %10, align 4
  br label %167

167:                                              ; preds = %164, %149
  br label %169

168:                                              ; preds = %145
  store i32 -1, i32* %4, align 4
  br label %174

169:                                              ; preds = %167
  br label %170

170:                                              ; preds = %169, %142
  br label %120, !llvm.loop !107

171:                                              ; preds = %120
  %172 = load i32, i32* %10, align 4
  store i32 %172, i32* %4, align 4
  br label %174

173:                                              ; preds = %163, %141, %100, %84
  store i32 2147483647, i32* %4, align 4
  br label %174

174:                                              ; preds = %173, %171, %168, %117, %105, %69, %57
  %175 = load i32, i32* %4, align 4
  ret i32 %175
}

; Function Attrs: nounwind
declare dso_local i32 @iswcntrl(i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @mpsort(i8** %0, i64 %1, i32 (i8*, i8*)* %2) #0 {
  %4 = alloca i8**, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32 (i8*, i8*)*, align 8
  store i8** %0, i8*** %4, align 8
  store i64 %1, i64* %5, align 8
  store i32 (i8*, i8*)* %2, i32 (i8*, i8*)** %6, align 8
  %7 = load i8**, i8*** %4, align 8
  %8 = load i64, i64* %5, align 8
  %9 = load i8**, i8*** %4, align 8
  %10 = load i64, i64* %5, align 8
  %11 = getelementptr inbounds i8*, i8** %9, i64 %10
  %12 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %6, align 8
  call void @mpsort_with_tmp(i8** %7, i64 %8, i8** %11, i32 (i8*, i8*)* %12)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @mpsort_with_tmp(i8** noalias %0, i64 %1, i8** noalias %2, i32 (i8*, i8*)* %3) #0 {
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8**, align 8
  %8 = alloca i32 (i8*, i8*)*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8*, align 8
  store i8** %0, i8*** %5, align 8
  store i64 %1, i64* %6, align 8
  store i8** %2, i8*** %7, align 8
  store i32 (i8*, i8*)* %3, i32 (i8*, i8*)** %8, align 8
  %20 = load i64, i64* %6, align 8
  %21 = icmp ule i64 %20, 2
  br i1 %21, label %22, label %46

22:                                               ; preds = %4
  %23 = load i64, i64* %6, align 8
  %24 = icmp eq i64 %23, 2
  br i1 %24, label %25, label %45

25:                                               ; preds = %22
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 0
  %28 = load i8*, i8** %27, align 8
  store i8* %28, i8** %9, align 8
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 1
  %31 = load i8*, i8** %30, align 8
  store i8* %31, i8** %10, align 8
  %32 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %8, align 8
  %33 = load i8*, i8** %9, align 8
  %34 = load i8*, i8** %10, align 8
  %35 = call i32 %32(i8* %33, i8* %34)
  %36 = icmp sle i32 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %25
  %38 = load i8*, i8** %10, align 8
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 0
  store i8* %38, i8** %40, align 8
  %41 = load i8*, i8** %9, align 8
  %42 = load i8**, i8*** %5, align 8
  %43 = getelementptr inbounds i8*, i8** %42, i64 1
  store i8* %41, i8** %43, align 8
  br label %44

44:                                               ; preds = %37, %25
  br label %45

45:                                               ; preds = %44, %22
  br label %137

46:                                               ; preds = %4
  %47 = load i64, i64* %6, align 8
  %48 = udiv i64 %47, 2
  store i64 %48, i64* %11, align 8
  %49 = load i64, i64* %6, align 8
  %50 = load i64, i64* %11, align 8
  %51 = sub i64 %49, %50
  store i64 %51, i64* %12, align 8
  store i64 0, i64* %14, align 8
  %52 = load i64, i64* %11, align 8
  store i64 %52, i64* %15, align 8
  %53 = load i64, i64* %11, align 8
  store i64 %53, i64* %16, align 8
  %54 = load i64, i64* %6, align 8
  store i64 %54, i64* %17, align 8
  %55 = load i8**, i8*** %5, align 8
  %56 = load i64, i64* %11, align 8
  %57 = getelementptr inbounds i8*, i8** %55, i64 %56
  %58 = load i64, i64* %12, align 8
  %59 = load i8**, i8*** %7, align 8
  %60 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %8, align 8
  call void @mpsort_with_tmp(i8** %57, i64 %58, i8** %59, i32 (i8*, i8*)* %60)
  %61 = load i64, i64* %11, align 8
  %62 = icmp ult i64 %61, 2
  br i1 %62, label %63, label %69

63:                                               ; preds = %46
  %64 = load i8**, i8*** %5, align 8
  %65 = getelementptr inbounds i8*, i8** %64, i64 0
  %66 = load i8*, i8** %65, align 8
  %67 = load i8**, i8*** %7, align 8
  %68 = getelementptr inbounds i8*, i8** %67, i64 0
  store i8* %66, i8** %68, align 8
  br label %74

69:                                               ; preds = %46
  %70 = load i8**, i8*** %5, align 8
  %71 = load i64, i64* %11, align 8
  %72 = load i8**, i8*** %7, align 8
  %73 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %8, align 8
  call void @mpsort_into_tmp(i8** %70, i64 %71, i8** %72, i32 (i8*, i8*)* %73)
  br label %74

74:                                               ; preds = %69, %63
  %75 = load i8**, i8*** %7, align 8
  %76 = load i64, i64* %14, align 8
  %77 = getelementptr inbounds i8*, i8** %75, i64 %76
  %78 = load i8*, i8** %77, align 8
  store i8* %78, i8** %19, align 8
  %79 = load i8**, i8*** %5, align 8
  %80 = load i64, i64* %16, align 8
  %81 = getelementptr inbounds i8*, i8** %79, i64 %80
  %82 = load i8*, i8** %81, align 8
  store i8* %82, i8** %18, align 8
  store i64 0, i64* %13, align 8
  br label %83

83:                                               ; preds = %135, %74
  %84 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %8, align 8
  %85 = load i8*, i8** %19, align 8
  %86 = load i8*, i8** %18, align 8
  %87 = call i32 %84(i8* %85, i8* %86)
  %88 = icmp sle i32 %87, 0
  br i1 %88, label %89, label %106

89:                                               ; preds = %83
  %90 = load i8*, i8** %19, align 8
  %91 = load i8**, i8*** %5, align 8
  %92 = load i64, i64* %13, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %13, align 8
  %94 = getelementptr inbounds i8*, i8** %91, i64 %92
  store i8* %90, i8** %94, align 8
  %95 = load i64, i64* %14, align 8
  %96 = add i64 %95, 1
  store i64 %96, i64* %14, align 8
  %97 = load i64, i64* %14, align 8
  %98 = load i64, i64* %15, align 8
  %99 = icmp eq i64 %97, %98
  br i1 %99, label %100, label %101

100:                                              ; preds = %89
  br label %136

101:                                              ; preds = %89
  %102 = load i8**, i8*** %7, align 8
  %103 = load i64, i64* %14, align 8
  %104 = getelementptr inbounds i8*, i8** %102, i64 %103
  %105 = load i8*, i8** %104, align 8
  store i8* %105, i8** %19, align 8
  br label %135

106:                                              ; preds = %83
  %107 = load i8*, i8** %18, align 8
  %108 = load i8**, i8*** %5, align 8
  %109 = load i64, i64* %13, align 8
  %110 = add i64 %109, 1
  store i64 %110, i64* %13, align 8
  %111 = getelementptr inbounds i8*, i8** %108, i64 %109
  store i8* %107, i8** %111, align 8
  %112 = load i64, i64* %16, align 8
  %113 = add i64 %112, 1
  store i64 %113, i64* %16, align 8
  %114 = load i64, i64* %16, align 8
  %115 = load i64, i64* %17, align 8
  %116 = icmp eq i64 %114, %115
  br i1 %116, label %117, label %130

117:                                              ; preds = %106
  %118 = load i8**, i8*** %5, align 8
  %119 = load i64, i64* %13, align 8
  %120 = getelementptr inbounds i8*, i8** %118, i64 %119
  %121 = bitcast i8** %120 to i8*
  %122 = load i8**, i8*** %7, align 8
  %123 = load i64, i64* %14, align 8
  %124 = getelementptr inbounds i8*, i8** %122, i64 %123
  %125 = bitcast i8** %124 to i8*
  %126 = load i64, i64* %15, align 8
  %127 = load i64, i64* %14, align 8
  %128 = sub i64 %126, %127
  %129 = mul i64 %128, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* align 8 %125, i64 %129, i1 false)
  br label %136

130:                                              ; preds = %106
  %131 = load i8**, i8*** %5, align 8
  %132 = load i64, i64* %16, align 8
  %133 = getelementptr inbounds i8*, i8** %131, i64 %132
  %134 = load i8*, i8** %133, align 8
  store i8* %134, i8** %18, align 8
  br label %135

135:                                              ; preds = %130, %101
  br label %83

136:                                              ; preds = %117, %100
  br label %137

137:                                              ; preds = %136, %45
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @mpsort_into_tmp(i8** noalias %0, i64 %1, i8** noalias %2, i32 (i8*, i8*)* %3) #0 {
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8**, align 8
  %8 = alloca i32 (i8*, i8*)*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  store i8** %0, i8*** %5, align 8
  store i64 %1, i64* %6, align 8
  store i8** %2, i8*** %7, align 8
  store i32 (i8*, i8*)* %3, i32 (i8*, i8*)** %8, align 8
  %17 = load i64, i64* %6, align 8
  %18 = udiv i64 %17, 2
  store i64 %18, i64* %9, align 8
  %19 = load i64, i64* %6, align 8
  %20 = load i64, i64* %9, align 8
  %21 = sub i64 %19, %20
  store i64 %21, i64* %10, align 8
  store i64 0, i64* %11, align 8
  %22 = load i64, i64* %9, align 8
  store i64 %22, i64* %12, align 8
  %23 = load i64, i64* %9, align 8
  store i64 %23, i64* %13, align 8
  %24 = load i64, i64* %6, align 8
  store i64 %24, i64* %14, align 8
  %25 = load i8**, i8*** %5, align 8
  %26 = load i64, i64* %9, align 8
  %27 = getelementptr inbounds i8*, i8** %25, i64 %26
  %28 = load i64, i64* %10, align 8
  %29 = load i8**, i8*** %7, align 8
  %30 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %8, align 8
  call void @mpsort_with_tmp(i8** %27, i64 %28, i8** %29, i32 (i8*, i8*)* %30)
  %31 = load i8**, i8*** %5, align 8
  %32 = load i64, i64* %9, align 8
  %33 = load i8**, i8*** %7, align 8
  %34 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %8, align 8
  call void @mpsort_with_tmp(i8** %31, i64 %32, i8** %33, i32 (i8*, i8*)* %34)
  %35 = load i8**, i8*** %5, align 8
  %36 = load i64, i64* %11, align 8
  %37 = getelementptr inbounds i8*, i8** %35, i64 %36
  %38 = load i8*, i8** %37, align 8
  store i8* %38, i8** %15, align 8
  %39 = load i8**, i8*** %5, align 8
  %40 = load i64, i64* %13, align 8
  %41 = getelementptr inbounds i8*, i8** %39, i64 %40
  %42 = load i8*, i8** %41, align 8
  store i8* %42, i8** %16, align 8
  br label %43

43:                                               ; preds = %81, %4
  %44 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %8, align 8
  %45 = load i8*, i8** %15, align 8
  %46 = load i8*, i8** %16, align 8
  %47 = call i32 %44(i8* %45, i8* %46)
  %48 = icmp sle i32 %47, 0
  br i1 %48, label %49, label %66

49:                                               ; preds = %43
  %50 = load i8*, i8** %15, align 8
  %51 = load i8**, i8*** %7, align 8
  %52 = getelementptr inbounds i8*, i8** %51, i32 1
  store i8** %52, i8*** %7, align 8
  store i8* %50, i8** %51, align 8
  %53 = load i64, i64* %11, align 8
  %54 = add i64 %53, 1
  store i64 %54, i64* %11, align 8
  %55 = load i64, i64* %11, align 8
  %56 = load i64, i64* %12, align 8
  %57 = icmp eq i64 %55, %56
  br i1 %57, label %58, label %61

58:                                               ; preds = %49
  %59 = load i64, i64* %13, align 8
  store i64 %59, i64* %11, align 8
  %60 = load i64, i64* %14, align 8
  store i64 %60, i64* %12, align 8
  br label %82

61:                                               ; preds = %49
  %62 = load i8**, i8*** %5, align 8
  %63 = load i64, i64* %11, align 8
  %64 = getelementptr inbounds i8*, i8** %62, i64 %63
  %65 = load i8*, i8** %64, align 8
  store i8* %65, i8** %15, align 8
  br label %81

66:                                               ; preds = %43
  %67 = load i8*, i8** %16, align 8
  %68 = load i8**, i8*** %7, align 8
  %69 = getelementptr inbounds i8*, i8** %68, i32 1
  store i8** %69, i8*** %7, align 8
  store i8* %67, i8** %68, align 8
  %70 = load i64, i64* %13, align 8
  %71 = add i64 %70, 1
  store i64 %71, i64* %13, align 8
  %72 = load i64, i64* %13, align 8
  %73 = load i64, i64* %14, align 8
  %74 = icmp eq i64 %72, %73
  br i1 %74, label %75, label %76

75:                                               ; preds = %66
  br label %82

76:                                               ; preds = %66
  %77 = load i8**, i8*** %5, align 8
  %78 = load i64, i64* %13, align 8
  %79 = getelementptr inbounds i8*, i8** %77, i64 %78
  %80 = load i8*, i8** %79, align 8
  store i8* %80, i8** %16, align 8
  br label %81

81:                                               ; preds = %76, %61
  br label %43

82:                                               ; preds = %75, %58
  %83 = load i8**, i8*** %7, align 8
  %84 = bitcast i8** %83 to i8*
  %85 = load i8**, i8*** %5, align 8
  %86 = load i64, i64* %11, align 8
  %87 = getelementptr inbounds i8*, i8** %85, i64 %86
  %88 = bitcast i8** %87 to i8*
  %89 = load i64, i64* %12, align 8
  %90 = load i64, i64* %11, align 8
  %91 = sub i64 %89, %90
  %92 = mul i64 %91, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %88, i64 %92, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @nstrftime(i8* %0, i64 %1, i8* %2, %struct.tm* %3, %struct.tm_zone* %4, i32 %5) #0 {
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca %struct.tm*, align 8
  %11 = alloca %struct.tm_zone*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i8, align 1
  store i8* %0, i8** %7, align 8
  store i64 %1, i64* %8, align 8
  store i8* %2, i8** %9, align 8
  store %struct.tm* %3, %struct.tm** %10, align 8
  store %struct.tm_zone* %4, %struct.tm_zone** %11, align 8
  store i32 %5, i32* %12, align 4
  store i8 0, i8* %13, align 1
  %14 = load i8*, i8** %7, align 8
  %15 = load i64, i64* %8, align 8
  %16 = load i8*, i8** %9, align 8
  %17 = load %struct.tm*, %struct.tm** %10, align 8
  %18 = load %struct.tm_zone*, %struct.tm_zone** %11, align 8
  %19 = load i32, i32* %12, align 4
  %20 = call i64 @__strftime_internal(i8* %14, i64 %15, i8* %16, %struct.tm* %17, i1 zeroext false, i8* %13, %struct.tm_zone* %18, i32 %19)
  ret i64 %20
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @__strftime_internal(i8* %0, i64 %1, i8* %2, %struct.tm* %3, i1 zeroext %4, i8* %5, %struct.tm_zone* %6, i32 %7) #0 {
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  %13 = alloca %struct.tm*, align 8
  %14 = alloca i8, align 1
  %15 = alloca i8*, align 8
  %16 = alloca %struct.tm_zone*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i8, align 1
  %29 = alloca i8, align 1
  %30 = alloca i32, align 4
  %31 = alloca i8*, align 8
  %32 = alloca i8, align 1
  %33 = alloca i8*, align 8
  %34 = alloca [23 x i8], align 16
  %35 = alloca i32, align 4
  %36 = alloca i8, align 1
  %37 = alloca i8, align 1
  %38 = alloca i64, align 8
  %39 = alloca i8, align 1
  %40 = alloca i32, align 4
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  %43 = alloca i64, align 8
  %44 = alloca i64, align 8
  %45 = alloca i64, align 8
  %46 = alloca i64, align 8
  %47 = alloca i64, align 8
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  %51 = alloca i64, align 8
  %52 = alloca i64, align 8
  %53 = alloca i64, align 8
  %54 = alloca [5 x i8], align 1
  %55 = alloca i8*, align 8
  %56 = alloca [1024 x i8], align 16
  %57 = alloca i64, align 8
  %58 = alloca i64, align 8
  %59 = alloca i64, align 8
  %60 = alloca i64, align 8
  %61 = alloca i64, align 8
  %62 = alloca i32, align 4
  %63 = alloca i64, align 8
  %64 = alloca i64, align 8
  %65 = alloca i64, align 8
  %66 = alloca i64, align 8
  %67 = alloca i32, align 4
  %68 = alloca i64, align 8
  %69 = alloca i64, align 8
  %70 = alloca i64, align 8
  %71 = alloca i64, align 8
  %72 = alloca i64, align 8
  %73 = alloca i64, align 8
  %74 = alloca i64, align 8
  %75 = alloca i64, align 8
  %76 = alloca i64, align 8
  %77 = alloca i64, align 8
  %78 = alloca i64, align 8
  %79 = alloca i64, align 8
  %80 = alloca i64, align 8
  %81 = alloca i64, align 8
  %82 = alloca i64, align 8
  %83 = alloca i64, align 8
  %84 = alloca i32, align 4
  %85 = alloca i64, align 8
  %86 = alloca i64, align 8
  %87 = alloca i64, align 8
  %88 = alloca i64, align 8
  %89 = alloca %struct.tm, align 8
  %90 = alloca i64, align 8
  %91 = alloca i32, align 4
  %92 = alloca i64, align 8
  %93 = alloca i64, align 8
  %94 = alloca i64, align 8
  %95 = alloca i64, align 8
  %96 = alloca i32, align 4
  %97 = alloca i32, align 4
  %98 = alloca i32, align 4
  %99 = alloca i32, align 4
  %100 = alloca i32, align 4
  %101 = alloca i32, align 4
  %102 = alloca i64, align 8
  %103 = alloca i64, align 8
  %104 = alloca i64, align 8
  %105 = alloca i64, align 8
  %106 = alloca i32, align 4
  %107 = alloca i32, align 4
  %108 = alloca i32, align 4
  %109 = alloca i32, align 4
  %110 = alloca i32, align 4
  %111 = alloca i64, align 8
  %112 = alloca i64, align 8
  %113 = alloca i64, align 8
  %114 = alloca i64, align 8
  store i8* %0, i8** %10, align 8
  store i64 %1, i64* %11, align 8
  store i8* %2, i8** %12, align 8
  store %struct.tm* %3, %struct.tm** %13, align 8
  %115 = zext i1 %4 to i8
  store i8 %115, i8* %14, align 1
  store i8* %5, i8** %15, align 8
  store %struct.tm_zone* %6, %struct.tm_zone** %16, align 8
  store i32 %7, i32* %17, align 4
  %116 = load %struct.tm*, %struct.tm** %13, align 8
  %117 = getelementptr inbounds %struct.tm, %struct.tm* %116, i32 0, i32 2
  %118 = load i32, i32* %117, align 8
  store i32 %118, i32* %18, align 4
  store i64 0, i64* %20, align 8
  %119 = load i8*, i8** %10, align 8
  store i8* %119, i8** %21, align 8
  store i8* null, i8** %19, align 8
  %120 = load %struct.tm*, %struct.tm** %13, align 8
  %121 = getelementptr inbounds %struct.tm, %struct.tm* %120, i32 0, i32 10
  %122 = load i8*, i8** %121, align 8
  store i8* %122, i8** %19, align 8
  %123 = load i8*, i8** %19, align 8
  %124 = icmp ne i8* %123, null
  br i1 %124, label %126, label %125

125:                                              ; preds = %8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.355, i64 0, i64 0), i8** %19, align 8
  br label %126

126:                                              ; preds = %125, %8
  %127 = load i32, i32* %18, align 4
  %128 = icmp sgt i32 %127, 12
  br i1 %128, label %129, label %132

129:                                              ; preds = %126
  %130 = load i32, i32* %18, align 4
  %131 = sub nsw i32 %130, 12
  store i32 %131, i32* %18, align 4
  br label %137

132:                                              ; preds = %126
  %133 = load i32, i32* %18, align 4
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %136

135:                                              ; preds = %132
  store i32 12, i32* %18, align 4
  br label %136

136:                                              ; preds = %135, %132
  br label %137

137:                                              ; preds = %136, %129
  %138 = load i8*, i8** %12, align 8
  store i8* %138, i8** %22, align 8
  br label %139

139:                                              ; preds = %2050, %137
  %140 = load i8*, i8** %22, align 8
  %141 = load i8, i8* %140, align 1
  %142 = sext i8 %141 to i32
  %143 = icmp ne i32 %142, 0
  br i1 %143, label %144, label %2053

144:                                              ; preds = %139
  store i32 0, i32* %23, align 4
  store i32 0, i32* %25, align 4
  store i32 -1, i32* %35, align 4
  store i8 0, i8* %36, align 1
  %145 = load i8, i8* %14, align 1
  %146 = trunc i8 %145 to i1
  %147 = zext i1 %146 to i8
  store i8 %147, i8* %37, align 1
  store i8 0, i8* %39, align 1
  %148 = load i8*, i8** %22, align 8
  %149 = load i8, i8* %148, align 1
  %150 = sext i8 %149 to i32
  %151 = icmp ne i32 %150, 37
  br i1 %151, label %152, label %219

152:                                              ; preds = %144
  br label %153

153:                                              ; preds = %152
  store i64 1, i64* %41, align 8
  %154 = load i32, i32* %35, align 4
  %155 = icmp slt i32 %154, 0
  br i1 %155, label %156, label %157

156:                                              ; preds = %153
  br label %159

157:                                              ; preds = %153
  %158 = load i32, i32* %35, align 4
  br label %159

159:                                              ; preds = %157, %156
  %160 = phi i32 [ 0, %156 ], [ %158, %157 ]
  %161 = sext i32 %160 to i64
  store i64 %161, i64* %42, align 8
  %162 = load i64, i64* %41, align 8
  %163 = load i64, i64* %42, align 8
  %164 = icmp ult i64 %162, %163
  br i1 %164, label %165, label %167

165:                                              ; preds = %159
  %166 = load i64, i64* %42, align 8
  br label %169

167:                                              ; preds = %159
  %168 = load i64, i64* %41, align 8
  br label %169

169:                                              ; preds = %167, %165
  %170 = phi i64 [ %166, %165 ], [ %168, %167 ]
  store i64 %170, i64* %43, align 8
  %171 = load i64, i64* %43, align 8
  %172 = load i64, i64* %11, align 8
  %173 = load i64, i64* %20, align 8
  %174 = sub i64 %172, %173
  %175 = icmp uge i64 %171, %174
  br i1 %175, label %176, label %177

176:                                              ; preds = %169
  store i64 0, i64* %9, align 8
  br label %2063

177:                                              ; preds = %169
  %178 = load i8*, i8** %21, align 8
  %179 = icmp ne i8* %178, null
  br i1 %179, label %180, label %214

180:                                              ; preds = %177
  %181 = load i32, i32* %25, align 4
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %183, label %207

183:                                              ; preds = %180
  %184 = load i64, i64* %41, align 8
  %185 = load i64, i64* %42, align 8
  %186 = icmp ult i64 %184, %185
  br i1 %186, label %187, label %207

187:                                              ; preds = %183
  %188 = load i32, i32* %35, align 4
  %189 = sext i32 %188 to i64
  %190 = load i64, i64* %41, align 8
  %191 = sub i64 %189, %190
  store i64 %191, i64* %44, align 8
  %192 = load i32, i32* %23, align 4
  %193 = icmp eq i32 %192, 48
  br i1 %193, label %194, label %200

194:                                              ; preds = %187
  %195 = load i8*, i8** %21, align 8
  %196 = load i64, i64* %44, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %195, i8 48, i64 %196, i1 false)
  %197 = load i64, i64* %44, align 8
  %198 = load i8*, i8** %21, align 8
  %199 = getelementptr inbounds i8, i8* %198, i64 %197
  store i8* %199, i8** %21, align 8
  br label %206

200:                                              ; preds = %187
  %201 = load i8*, i8** %21, align 8
  %202 = load i64, i64* %44, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %201, i8 32, i64 %202, i1 false)
  %203 = load i64, i64* %44, align 8
  %204 = load i8*, i8** %21, align 8
  %205 = getelementptr inbounds i8, i8* %204, i64 %203
  store i8* %205, i8** %21, align 8
  br label %206

206:                                              ; preds = %200, %194
  br label %207

207:                                              ; preds = %206, %183, %180
  %208 = load i8*, i8** %22, align 8
  %209 = load i8, i8* %208, align 1
  %210 = load i8*, i8** %21, align 8
  store i8 %209, i8* %210, align 1
  %211 = load i64, i64* %41, align 8
  %212 = load i8*, i8** %21, align 8
  %213 = getelementptr inbounds i8, i8* %212, i64 %211
  store i8* %213, i8** %21, align 8
  br label %214

214:                                              ; preds = %207, %177
  %215 = load i64, i64* %43, align 8
  %216 = load i64, i64* %20, align 8
  %217 = add i64 %216, %215
  store i64 %217, i64* %20, align 8
  br label %218

218:                                              ; preds = %214
  br label %2050

219:                                              ; preds = %144
  br label %220

220:                                              ; preds = %230, %229, %225, %219
  %221 = load i8*, i8** %22, align 8
  %222 = getelementptr inbounds i8, i8* %221, i32 1
  store i8* %222, i8** %22, align 8
  %223 = load i8, i8* %222, align 1
  %224 = sext i8 %223 to i32
  switch i32 %224, label %231 [
    i32 95, label %225
    i32 45, label %225
    i32 48, label %225
    i32 94, label %229
    i32 35, label %230
  ]

225:                                              ; preds = %220, %220, %220
  %226 = load i8*, i8** %22, align 8
  %227 = load i8, i8* %226, align 1
  %228 = sext i8 %227 to i32
  store i32 %228, i32* %23, align 4
  br label %220

229:                                              ; preds = %220
  store i8 1, i8* %37, align 1
  br label %220

230:                                              ; preds = %220
  store i8 1, i8* %39, align 1
  br label %220

231:                                              ; preds = %220
  br label %232

232:                                              ; preds = %231
  br label %233

233:                                              ; preds = %232
  %234 = load i8*, i8** %22, align 8
  %235 = load i8, i8* %234, align 1
  %236 = sext i8 %235 to i32
  %237 = sub i32 %236, 48
  %238 = icmp ule i32 %237, 9
  br i1 %238, label %239, label %272

239:                                              ; preds = %233
  store i32 0, i32* %35, align 4
  br label %240

240:                                              ; preds = %265, %239
  %241 = load i32, i32* %35, align 4
  %242 = icmp sgt i32 %241, 214748364
  br i1 %242, label %252, label %243

243:                                              ; preds = %240
  %244 = load i32, i32* %35, align 4
  %245 = icmp eq i32 %244, 214748364
  br i1 %245, label %246, label %253

246:                                              ; preds = %243
  %247 = load i8*, i8** %22, align 8
  %248 = load i8, i8* %247, align 1
  %249 = sext i8 %248 to i32
  %250 = sub nsw i32 %249, 48
  %251 = icmp sgt i32 %250, 7
  br i1 %251, label %252, label %253

252:                                              ; preds = %246, %240
  store i32 2147483647, i32* %35, align 4
  br label %262

253:                                              ; preds = %246, %243
  %254 = load i32, i32* %35, align 4
  %255 = mul nsw i32 %254, 10
  store i32 %255, i32* %35, align 4
  %256 = load i8*, i8** %22, align 8
  %257 = load i8, i8* %256, align 1
  %258 = sext i8 %257 to i32
  %259 = sub nsw i32 %258, 48
  %260 = load i32, i32* %35, align 4
  %261 = add nsw i32 %260, %259
  store i32 %261, i32* %35, align 4
  br label %262

262:                                              ; preds = %253, %252
  %263 = load i8*, i8** %22, align 8
  %264 = getelementptr inbounds i8, i8* %263, i32 1
  store i8* %264, i8** %22, align 8
  br label %265

265:                                              ; preds = %262
  %266 = load i8*, i8** %22, align 8
  %267 = load i8, i8* %266, align 1
  %268 = sext i8 %267 to i32
  %269 = sub i32 %268, 48
  %270 = icmp ule i32 %269, 9
  br i1 %270, label %240, label %271, !llvm.loop !108

271:                                              ; preds = %265
  br label %272

272:                                              ; preds = %271, %233
  %273 = load i8*, i8** %22, align 8
  %274 = load i8, i8* %273, align 1
  %275 = sext i8 %274 to i32
  switch i32 %275, label %281 [
    i32 69, label %276
    i32 79, label %276
  ]

276:                                              ; preds = %272, %272
  %277 = load i8*, i8** %22, align 8
  %278 = getelementptr inbounds i8, i8* %277, i32 1
  store i8* %278, i8** %22, align 8
  %279 = load i8, i8* %277, align 1
  %280 = sext i8 %279 to i32
  store i32 %280, i32* %24, align 4
  br label %282

281:                                              ; preds = %272
  store i32 0, i32* %24, align 4
  br label %282

282:                                              ; preds = %281, %276
  %283 = load i8*, i8** %22, align 8
  %284 = load i8, i8* %283, align 1
  %285 = sext i8 %284 to i32
  store i32 %285, i32* %40, align 4
  %286 = load i32, i32* %40, align 4
  switch i32 %286, label %1935 [
    i32 37, label %287
    i32 97, label %358
    i32 65, label %367
    i32 98, label %376
    i32 104, label %376
    i32 66, label %385
    i32 99, label %394
    i32 67, label %600
    i32 120, label %631
    i32 68, label %636
    i32 100, label %641
    i32 101, label %651
    i32 70, label %1191
    i32 72, label %1196
    i32 73, label %1206
    i32 107, label %1214
    i32 108, label %1224
    i32 106, label %1232
    i32 77, label %1248
    i32 109, label %1258
    i32 78, label %1274
    i32 110, label %1300
    i32 80, label %1365
    i32 112, label %1366
    i32 113, label %1371
    i32 82, label %1380
    i32 114, label %1381
    i32 83, label %1382
    i32 115, label %1392
    i32 88, label %1426
    i32 84, label %1431
    i32 116, label %1432
    i32 117, label %1497
    i32 85, label %1507
    i32 86, label %1523
    i32 103, label %1523
    i32 71, label %1523
    i32 87, label %1665
    i32 119, label %1684
    i32 89, label %1694
    i32 121, label %1714
    i32 90, label %1742
    i32 58, label %1833
    i32 122, label %1857
    i32 0, label %1932
  ]

287:                                              ; preds = %282
  %288 = load i32, i32* %24, align 4
  %289 = icmp ne i32 %288, 0
  br i1 %289, label %290, label %291

290:                                              ; preds = %287
  br label %1936

291:                                              ; preds = %287
  br label %292

292:                                              ; preds = %291
  store i64 1, i64* %45, align 8
  %293 = load i32, i32* %35, align 4
  %294 = icmp slt i32 %293, 0
  br i1 %294, label %295, label %296

295:                                              ; preds = %292
  br label %298

296:                                              ; preds = %292
  %297 = load i32, i32* %35, align 4
  br label %298

298:                                              ; preds = %296, %295
  %299 = phi i32 [ 0, %295 ], [ %297, %296 ]
  %300 = sext i32 %299 to i64
  store i64 %300, i64* %46, align 8
  %301 = load i64, i64* %45, align 8
  %302 = load i64, i64* %46, align 8
  %303 = icmp ult i64 %301, %302
  br i1 %303, label %304, label %306

304:                                              ; preds = %298
  %305 = load i64, i64* %46, align 8
  br label %308

306:                                              ; preds = %298
  %307 = load i64, i64* %45, align 8
  br label %308

308:                                              ; preds = %306, %304
  %309 = phi i64 [ %305, %304 ], [ %307, %306 ]
  store i64 %309, i64* %47, align 8
  %310 = load i64, i64* %47, align 8
  %311 = load i64, i64* %11, align 8
  %312 = load i64, i64* %20, align 8
  %313 = sub i64 %311, %312
  %314 = icmp uge i64 %310, %313
  br i1 %314, label %315, label %316

315:                                              ; preds = %308
  store i64 0, i64* %9, align 8
  br label %2063

316:                                              ; preds = %308
  %317 = load i8*, i8** %21, align 8
  %318 = icmp ne i8* %317, null
  br i1 %318, label %319, label %353

319:                                              ; preds = %316
  %320 = load i32, i32* %25, align 4
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %322, label %346

322:                                              ; preds = %319
  %323 = load i64, i64* %45, align 8
  %324 = load i64, i64* %46, align 8
  %325 = icmp ult i64 %323, %324
  br i1 %325, label %326, label %346

326:                                              ; preds = %322
  %327 = load i32, i32* %35, align 4
  %328 = sext i32 %327 to i64
  %329 = load i64, i64* %45, align 8
  %330 = sub i64 %328, %329
  store i64 %330, i64* %48, align 8
  %331 = load i32, i32* %23, align 4
  %332 = icmp eq i32 %331, 48
  br i1 %332, label %333, label %339

333:                                              ; preds = %326
  %334 = load i8*, i8** %21, align 8
  %335 = load i64, i64* %48, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %334, i8 48, i64 %335, i1 false)
  %336 = load i64, i64* %48, align 8
  %337 = load i8*, i8** %21, align 8
  %338 = getelementptr inbounds i8, i8* %337, i64 %336
  store i8* %338, i8** %21, align 8
  br label %345

339:                                              ; preds = %326
  %340 = load i8*, i8** %21, align 8
  %341 = load i64, i64* %48, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %340, i8 32, i64 %341, i1 false)
  %342 = load i64, i64* %48, align 8
  %343 = load i8*, i8** %21, align 8
  %344 = getelementptr inbounds i8, i8* %343, i64 %342
  store i8* %344, i8** %21, align 8
  br label %345

345:                                              ; preds = %339, %333
  br label %346

346:                                              ; preds = %345, %322, %319
  %347 = load i8*, i8** %22, align 8
  %348 = load i8, i8* %347, align 1
  %349 = load i8*, i8** %21, align 8
  store i8 %348, i8* %349, align 1
  %350 = load i64, i64* %45, align 8
  %351 = load i8*, i8** %21, align 8
  %352 = getelementptr inbounds i8, i8* %351, i64 %350
  store i8* %352, i8** %21, align 8
  br label %353

353:                                              ; preds = %346, %316
  %354 = load i64, i64* %47, align 8
  %355 = load i64, i64* %20, align 8
  %356 = add i64 %355, %354
  store i64 %356, i64* %20, align 8
  br label %357

357:                                              ; preds = %353
  br label %2049

358:                                              ; preds = %282
  %359 = load i32, i32* %24, align 4
  %360 = icmp ne i32 %359, 0
  br i1 %360, label %361, label %362

361:                                              ; preds = %358
  br label %1936

362:                                              ; preds = %358
  %363 = load i8, i8* %39, align 1
  %364 = trunc i8 %363 to i1
  br i1 %364, label %365, label %366

365:                                              ; preds = %362
  store i8 1, i8* %37, align 1
  store i8 0, i8* %36, align 1
  br label %366

366:                                              ; preds = %365, %362
  br label %484

367:                                              ; preds = %282
  %368 = load i32, i32* %24, align 4
  %369 = icmp ne i32 %368, 0
  br i1 %369, label %370, label %371

370:                                              ; preds = %367
  br label %1936

371:                                              ; preds = %367
  %372 = load i8, i8* %39, align 1
  %373 = trunc i8 %372 to i1
  br i1 %373, label %374, label %375

374:                                              ; preds = %371
  store i8 1, i8* %37, align 1
  store i8 0, i8* %36, align 1
  br label %375

375:                                              ; preds = %374, %371
  br label %484

376:                                              ; preds = %282, %282
  %377 = load i8, i8* %39, align 1
  %378 = trunc i8 %377 to i1
  br i1 %378, label %379, label %380

379:                                              ; preds = %376
  store i8 1, i8* %37, align 1
  store i8 0, i8* %36, align 1
  br label %380

380:                                              ; preds = %379, %376
  %381 = load i32, i32* %24, align 4
  %382 = icmp eq i32 %381, 69
  br i1 %382, label %383, label %384

383:                                              ; preds = %380
  br label %1936

384:                                              ; preds = %380
  br label %484

385:                                              ; preds = %282
  %386 = load i32, i32* %24, align 4
  %387 = icmp eq i32 %386, 69
  br i1 %387, label %388, label %389

388:                                              ; preds = %385
  br label %1936

389:                                              ; preds = %385
  %390 = load i8, i8* %39, align 1
  %391 = trunc i8 %390 to i1
  br i1 %391, label %392, label %393

392:                                              ; preds = %389
  store i8 1, i8* %37, align 1
  store i8 0, i8* %36, align 1
  br label %393

393:                                              ; preds = %392, %389
  br label %484

394:                                              ; preds = %282
  %395 = load i32, i32* %24, align 4
  %396 = icmp eq i32 %395, 79
  br i1 %396, label %397, label %398

397:                                              ; preds = %394
  br label %1936

398:                                              ; preds = %394
  br label %484

399:                                              ; preds = %1431, %1380, %1195, %640
  %400 = load i8*, i8** %31, align 8
  %401 = load %struct.tm*, %struct.tm** %13, align 8
  %402 = load i8, i8* %37, align 1
  %403 = trunc i8 %402 to i1
  %404 = load i8*, i8** %15, align 8
  %405 = load %struct.tm_zone*, %struct.tm_zone** %16, align 8
  %406 = load i32, i32* %17, align 4
  %407 = call i64 @__strftime_internal(i8* null, i64 -1, i8* %400, %struct.tm* %401, i1 zeroext %403, i8* %404, %struct.tm_zone* %405, i32 %406)
  store i64 %407, i64* %49, align 8
  br label %408

408:                                              ; preds = %399
  %409 = load i64, i64* %49, align 8
  store i64 %409, i64* %50, align 8
  %410 = load i32, i32* %35, align 4
  %411 = icmp slt i32 %410, 0
  br i1 %411, label %412, label %413

412:                                              ; preds = %408
  br label %415

413:                                              ; preds = %408
  %414 = load i32, i32* %35, align 4
  br label %415

415:                                              ; preds = %413, %412
  %416 = phi i32 [ 0, %412 ], [ %414, %413 ]
  %417 = sext i32 %416 to i64
  store i64 %417, i64* %51, align 8
  %418 = load i64, i64* %50, align 8
  %419 = load i64, i64* %51, align 8
  %420 = icmp ult i64 %418, %419
  br i1 %420, label %421, label %423

421:                                              ; preds = %415
  %422 = load i64, i64* %51, align 8
  br label %425

423:                                              ; preds = %415
  %424 = load i64, i64* %50, align 8
  br label %425

425:                                              ; preds = %423, %421
  %426 = phi i64 [ %422, %421 ], [ %424, %423 ]
  store i64 %426, i64* %52, align 8
  %427 = load i64, i64* %52, align 8
  %428 = load i64, i64* %11, align 8
  %429 = load i64, i64* %20, align 8
  %430 = sub i64 %428, %429
  %431 = icmp uge i64 %427, %430
  br i1 %431, label %432, label %433

432:                                              ; preds = %425
  store i64 0, i64* %9, align 8
  br label %2063

433:                                              ; preds = %425
  %434 = load i8*, i8** %21, align 8
  %435 = icmp ne i8* %434, null
  br i1 %435, label %436, label %479

436:                                              ; preds = %433
  %437 = load i32, i32* %25, align 4
  %438 = icmp eq i32 %437, 0
  br i1 %438, label %439, label %463

439:                                              ; preds = %436
  %440 = load i64, i64* %50, align 8
  %441 = load i64, i64* %51, align 8
  %442 = icmp ult i64 %440, %441
  br i1 %442, label %443, label %463

443:                                              ; preds = %439
  %444 = load i32, i32* %35, align 4
  %445 = sext i32 %444 to i64
  %446 = load i64, i64* %50, align 8
  %447 = sub i64 %445, %446
  store i64 %447, i64* %53, align 8
  %448 = load i32, i32* %23, align 4
  %449 = icmp eq i32 %448, 48
  br i1 %449, label %450, label %456

450:                                              ; preds = %443
  %451 = load i8*, i8** %21, align 8
  %452 = load i64, i64* %53, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %451, i8 48, i64 %452, i1 false)
  %453 = load i64, i64* %53, align 8
  %454 = load i8*, i8** %21, align 8
  %455 = getelementptr inbounds i8, i8* %454, i64 %453
  store i8* %455, i8** %21, align 8
  br label %462

456:                                              ; preds = %443
  %457 = load i8*, i8** %21, align 8
  %458 = load i64, i64* %53, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %457, i8 32, i64 %458, i1 false)
  %459 = load i64, i64* %53, align 8
  %460 = load i8*, i8** %21, align 8
  %461 = getelementptr inbounds i8, i8* %460, i64 %459
  store i8* %461, i8** %21, align 8
  br label %462

462:                                              ; preds = %456, %450
  br label %463

463:                                              ; preds = %462, %439, %436
  %464 = load i8*, i8** %21, align 8
  %465 = load i64, i64* %11, align 8
  %466 = load i64, i64* %20, align 8
  %467 = sub i64 %465, %466
  %468 = load i8*, i8** %31, align 8
  %469 = load %struct.tm*, %struct.tm** %13, align 8
  %470 = load i8, i8* %37, align 1
  %471 = trunc i8 %470 to i1
  %472 = load i8*, i8** %15, align 8
  %473 = load %struct.tm_zone*, %struct.tm_zone** %16, align 8
  %474 = load i32, i32* %17, align 4
  %475 = call i64 @__strftime_internal(i8* %464, i64 %467, i8* %468, %struct.tm* %469, i1 zeroext %471, i8* %472, %struct.tm_zone* %473, i32 %474)
  %476 = load i64, i64* %50, align 8
  %477 = load i8*, i8** %21, align 8
  %478 = getelementptr inbounds i8, i8* %477, i64 %476
  store i8* %478, i8** %21, align 8
  br label %479

479:                                              ; preds = %463, %433
  %480 = load i64, i64* %52, align 8
  %481 = load i64, i64* %20, align 8
  %482 = add i64 %481, %480
  store i64 %482, i64* %20, align 8
  br label %483

483:                                              ; preds = %479
  br label %2049

484:                                              ; preds = %1717, %1697, %1430, %1381, %1370, %682, %635, %603, %398, %393, %384, %375, %366
  %485 = getelementptr inbounds [5 x i8], [5 x i8]* %54, i64 0, i64 0
  store i8* %485, i8** %55, align 8
  %486 = load i8*, i8** %55, align 8
  %487 = getelementptr inbounds i8, i8* %486, i32 1
  store i8* %487, i8** %55, align 8
  store i8 32, i8* %486, align 1
  %488 = load i8*, i8** %55, align 8
  %489 = getelementptr inbounds i8, i8* %488, i32 1
  store i8* %489, i8** %55, align 8
  store i8 37, i8* %488, align 1
  %490 = load i32, i32* %24, align 4
  %491 = icmp ne i32 %490, 0
  br i1 %491, label %492, label %497

492:                                              ; preds = %484
  %493 = load i32, i32* %24, align 4
  %494 = trunc i32 %493 to i8
  %495 = load i8*, i8** %55, align 8
  %496 = getelementptr inbounds i8, i8* %495, i32 1
  store i8* %496, i8** %55, align 8
  store i8 %494, i8* %495, align 1
  br label %497

497:                                              ; preds = %492, %484
  %498 = load i32, i32* %40, align 4
  %499 = trunc i32 %498 to i8
  %500 = load i8*, i8** %55, align 8
  %501 = getelementptr inbounds i8, i8* %500, i32 1
  store i8* %501, i8** %55, align 8
  store i8 %499, i8* %500, align 1
  %502 = load i8*, i8** %55, align 8
  store i8 0, i8* %502, align 1
  %503 = getelementptr inbounds [1024 x i8], [1024 x i8]* %56, i64 0, i64 0
  %504 = getelementptr inbounds [5 x i8], [5 x i8]* %54, i64 0, i64 0
  %505 = load %struct.tm*, %struct.tm** %13, align 8
  %506 = call i64 @strftime(i8* %503, i64 1024, i8* %504, %struct.tm* %505) #14
  store i64 %506, i64* %57, align 8
  %507 = load i64, i64* %57, align 8
  %508 = icmp ne i64 %507, 0
  br i1 %508, label %509, label %599

509:                                              ; preds = %497
  br label %510

510:                                              ; preds = %509
  %511 = load i64, i64* %57, align 8
  %512 = sub i64 %511, 1
  store i64 %512, i64* %58, align 8
  %513 = load i32, i32* %35, align 4
  %514 = icmp slt i32 %513, 0
  br i1 %514, label %515, label %516

515:                                              ; preds = %510
  br label %518

516:                                              ; preds = %510
  %517 = load i32, i32* %35, align 4
  br label %518

518:                                              ; preds = %516, %515
  %519 = phi i32 [ 0, %515 ], [ %517, %516 ]
  %520 = sext i32 %519 to i64
  store i64 %520, i64* %59, align 8
  %521 = load i64, i64* %58, align 8
  %522 = load i64, i64* %59, align 8
  %523 = icmp ult i64 %521, %522
  br i1 %523, label %524, label %526

524:                                              ; preds = %518
  %525 = load i64, i64* %59, align 8
  br label %528

526:                                              ; preds = %518
  %527 = load i64, i64* %58, align 8
  br label %528

528:                                              ; preds = %526, %524
  %529 = phi i64 [ %525, %524 ], [ %527, %526 ]
  store i64 %529, i64* %60, align 8
  %530 = load i64, i64* %60, align 8
  %531 = load i64, i64* %11, align 8
  %532 = load i64, i64* %20, align 8
  %533 = sub i64 %531, %532
  %534 = icmp uge i64 %530, %533
  br i1 %534, label %535, label %536

535:                                              ; preds = %528
  store i64 0, i64* %9, align 8
  br label %2063

536:                                              ; preds = %528
  %537 = load i8*, i8** %21, align 8
  %538 = icmp ne i8* %537, null
  br i1 %538, label %539, label %594

539:                                              ; preds = %536
  %540 = load i32, i32* %25, align 4
  %541 = icmp eq i32 %540, 0
  br i1 %541, label %542, label %566

542:                                              ; preds = %539
  %543 = load i64, i64* %58, align 8
  %544 = load i64, i64* %59, align 8
  %545 = icmp ult i64 %543, %544
  br i1 %545, label %546, label %566

546:                                              ; preds = %542
  %547 = load i32, i32* %35, align 4
  %548 = sext i32 %547 to i64
  %549 = load i64, i64* %58, align 8
  %550 = sub i64 %548, %549
  store i64 %550, i64* %61, align 8
  %551 = load i32, i32* %23, align 4
  %552 = icmp eq i32 %551, 48
  br i1 %552, label %553, label %559

553:                                              ; preds = %546
  %554 = load i8*, i8** %21, align 8
  %555 = load i64, i64* %61, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %554, i8 48, i64 %555, i1 false)
  %556 = load i64, i64* %61, align 8
  %557 = load i8*, i8** %21, align 8
  %558 = getelementptr inbounds i8, i8* %557, i64 %556
  store i8* %558, i8** %21, align 8
  br label %565

559:                                              ; preds = %546
  %560 = load i8*, i8** %21, align 8
  %561 = load i64, i64* %61, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %560, i8 32, i64 %561, i1 false)
  %562 = load i64, i64* %61, align 8
  %563 = load i8*, i8** %21, align 8
  %564 = getelementptr inbounds i8, i8* %563, i64 %562
  store i8* %564, i8** %21, align 8
  br label %565

565:                                              ; preds = %559, %553
  br label %566

566:                                              ; preds = %565, %542, %539
  %567 = load i8, i8* %36, align 1
  %568 = trunc i8 %567 to i1
  br i1 %568, label %569, label %575

569:                                              ; preds = %566
  %570 = load i8*, i8** %21, align 8
  %571 = getelementptr inbounds [1024 x i8], [1024 x i8]* %56, i64 0, i64 0
  %572 = getelementptr inbounds i8, i8* %571, i64 1
  %573 = load i64, i64* %58, align 8
  %574 = call i8* @memcpy_lowcase(i8* %570, i8* %572, i64 %573)
  br label %590

575:                                              ; preds = %566
  %576 = load i8, i8* %37, align 1
  %577 = trunc i8 %576 to i1
  br i1 %577, label %578, label %584

578:                                              ; preds = %575
  %579 = load i8*, i8** %21, align 8
  %580 = getelementptr inbounds [1024 x i8], [1024 x i8]* %56, i64 0, i64 0
  %581 = getelementptr inbounds i8, i8* %580, i64 1
  %582 = load i64, i64* %58, align 8
  %583 = call i8* @memcpy_uppcase(i8* %579, i8* %581, i64 %582)
  br label %589

584:                                              ; preds = %575
  %585 = load i8*, i8** %21, align 8
  %586 = getelementptr inbounds [1024 x i8], [1024 x i8]* %56, i64 0, i64 0
  %587 = getelementptr inbounds i8, i8* %586, i64 1
  %588 = load i64, i64* %58, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %585, i8* align 1 %587, i64 %588, i1 false)
  br label %589

589:                                              ; preds = %584, %578
  br label %590

590:                                              ; preds = %589, %569
  %591 = load i64, i64* %58, align 8
  %592 = load i8*, i8** %21, align 8
  %593 = getelementptr inbounds i8, i8* %592, i64 %591
  store i8* %593, i8** %21, align 8
  br label %594

594:                                              ; preds = %590, %536
  %595 = load i64, i64* %60, align 8
  %596 = load i64, i64* %20, align 8
  %597 = add i64 %596, %595
  store i64 %597, i64* %20, align 8
  br label %598

598:                                              ; preds = %594
  br label %599

599:                                              ; preds = %598, %497
  br label %2049

600:                                              ; preds = %282
  %601 = load i32, i32* %24, align 4
  %602 = icmp eq i32 %601, 69
  br i1 %602, label %603, label %604

603:                                              ; preds = %600
  br label %484

604:                                              ; preds = %600
  %605 = load %struct.tm*, %struct.tm** %13, align 8
  %606 = getelementptr inbounds %struct.tm, %struct.tm* %605, i32 0, i32 5
  %607 = load i32, i32* %606, align 4
  %608 = sdiv i32 %607, 100
  %609 = add nsw i32 %608, 19
  store i32 %609, i32* %62, align 4
  %610 = load %struct.tm*, %struct.tm** %13, align 8
  %611 = getelementptr inbounds %struct.tm, %struct.tm* %610, i32 0, i32 5
  %612 = load i32, i32* %611, align 4
  %613 = srem i32 %612, 100
  %614 = icmp slt i32 %613, 0
  br i1 %614, label %615, label %618

615:                                              ; preds = %604
  %616 = load i32, i32* %62, align 4
  %617 = icmp slt i32 0, %616
  br label %618

618:                                              ; preds = %615, %604
  %619 = phi i1 [ false, %604 ], [ %617, %615 ]
  %620 = zext i1 %619 to i32
  %621 = load i32, i32* %62, align 4
  %622 = sub nsw i32 %621, %620
  store i32 %622, i32* %62, align 4
  br label %623

623:                                              ; preds = %618
  store i32 2, i32* %25, align 4
  %624 = load %struct.tm*, %struct.tm** %13, align 8
  %625 = getelementptr inbounds %struct.tm, %struct.tm* %624, i32 0, i32 5
  %626 = load i32, i32* %625, align 4
  %627 = icmp slt i32 %626, -1900
  %628 = zext i1 %627 to i8
  store i8 %628, i8* %28, align 1
  %629 = load i32, i32* %62, align 4
  store i32 %629, i32* %27, align 4
  br label %675

630:                                              ; No predecessors!
  br label %631

631:                                              ; preds = %630, %282
  %632 = load i32, i32* %24, align 4
  %633 = icmp eq i32 %632, 79
  br i1 %633, label %634, label %635

634:                                              ; preds = %631
  br label %1936

635:                                              ; preds = %631
  br label %484

636:                                              ; preds = %282
  %637 = load i32, i32* %24, align 4
  %638 = icmp ne i32 %637, 0
  br i1 %638, label %639, label %640

639:                                              ; preds = %636
  br label %1936

640:                                              ; preds = %636
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.356, i64 0, i64 0), i8** %31, align 8
  br label %399

641:                                              ; preds = %282
  %642 = load i32, i32* %24, align 4
  %643 = icmp eq i32 %642, 69
  br i1 %643, label %644, label %645

644:                                              ; preds = %641
  br label %1936

645:                                              ; preds = %641
  br label %646

646:                                              ; preds = %645
  store i32 2, i32* %25, align 4
  %647 = load %struct.tm*, %struct.tm** %13, align 8
  %648 = getelementptr inbounds %struct.tm, %struct.tm* %647, i32 0, i32 3
  %649 = load i32, i32* %648, align 4
  store i32 %649, i32* %26, align 4
  br label %670

650:                                              ; No predecessors!
  br label %651

651:                                              ; preds = %650, %282
  %652 = load i32, i32* %24, align 4
  %653 = icmp eq i32 %652, 69
  br i1 %653, label %654, label %655

654:                                              ; preds = %651
  br label %1936

655:                                              ; preds = %651
  br label %656

656:                                              ; preds = %655
  store i32 2, i32* %25, align 4
  %657 = load %struct.tm*, %struct.tm** %13, align 8
  %658 = getelementptr inbounds %struct.tm, %struct.tm* %657, i32 0, i32 3
  %659 = load i32, i32* %658, align 4
  store i32 %659, i32* %26, align 4
  br label %662

660:                                              ; No predecessors!
  br label %661

661:                                              ; preds = %1928, %1910, %1902, %1894, %660
  store i8 1, i8* %29, align 1
  br label %676

662:                                              ; preds = %1229, %1219, %656
  %663 = load i32, i32* %23, align 4
  %664 = icmp ne i32 %663, 48
  br i1 %664, label %665, label %669

665:                                              ; preds = %662
  %666 = load i32, i32* %23, align 4
  %667 = icmp ne i32 %666, 45
  br i1 %667, label %668, label %669

668:                                              ; preds = %665
  store i32 95, i32* %23, align 4
  br label %669

669:                                              ; preds = %668, %665, %662
  br label %670

670:                                              ; preds = %1739, %1689, %1670, %1659, %1639, %1512, %1498, %1387, %1296, %1253, %1211, %1201, %669, %646
  %671 = load i32, i32* %26, align 4
  %672 = icmp slt i32 %671, 0
  %673 = zext i1 %672 to i8
  store i8 %673, i8* %28, align 1
  %674 = load i32, i32* %26, align 4
  store i32 %674, i32* %27, align 4
  br label %675

675:                                              ; preds = %1703, %1643, %1372, %1263, %1237, %670, %623
  store i8 0, i8* %29, align 1
  store i32 0, i32* %30, align 4
  br label %676

676:                                              ; preds = %675, %661
  %677 = load i32, i32* %24, align 4
  %678 = icmp eq i32 %677, 79
  br i1 %678, label %679, label %683

679:                                              ; preds = %676
  %680 = load i8, i8* %28, align 1
  %681 = trunc i8 %680 to i1
  br i1 %681, label %683, label %682

682:                                              ; preds = %679
  br label %484

683:                                              ; preds = %679, %676
  %684 = getelementptr inbounds [23 x i8], [23 x i8]* %34, i64 0, i64 0
  %685 = getelementptr inbounds i8, i8* %684, i64 23
  store i8* %685, i8** %33, align 8
  %686 = load i8, i8* %28, align 1
  %687 = trunc i8 %686 to i1
  br i1 %687, label %688, label %691

688:                                              ; preds = %683
  %689 = load i32, i32* %27, align 4
  %690 = sub i32 0, %689
  store i32 %690, i32* %27, align 4
  br label %691

691:                                              ; preds = %688, %683
  br label %692

692:                                              ; preds = %716, %691
  %693 = load i32, i32* %30, align 4
  %694 = and i32 %693, 1
  %695 = icmp ne i32 %694, 0
  br i1 %695, label %696, label %699

696:                                              ; preds = %692
  %697 = load i8*, i8** %33, align 8
  %698 = getelementptr inbounds i8, i8* %697, i32 -1
  store i8* %698, i8** %33, align 8
  store i8 58, i8* %698, align 1
  br label %699

699:                                              ; preds = %696, %692
  %700 = load i32, i32* %30, align 4
  %701 = ashr i32 %700, 1
  store i32 %701, i32* %30, align 4
  %702 = load i32, i32* %27, align 4
  %703 = urem i32 %702, 10
  %704 = add i32 %703, 48
  %705 = trunc i32 %704 to i8
  %706 = load i8*, i8** %33, align 8
  %707 = getelementptr inbounds i8, i8* %706, i32 -1
  store i8* %707, i8** %33, align 8
  store i8 %705, i8* %707, align 1
  %708 = load i32, i32* %27, align 4
  %709 = udiv i32 %708, 10
  store i32 %709, i32* %27, align 4
  br label %710

710:                                              ; preds = %699
  %711 = load i32, i32* %27, align 4
  %712 = icmp ne i32 %711, 0
  br i1 %712, label %716, label %713

713:                                              ; preds = %710
  %714 = load i32, i32* %30, align 4
  %715 = icmp ne i32 %714, 0
  br label %716

716:                                              ; preds = %713, %710
  %717 = phi i1 [ true, %710 ], [ %715, %713 ]
  br i1 %717, label %692, label %718, !llvm.loop !109

718:                                              ; preds = %716
  br label %719

719:                                              ; preds = %1425, %718
  %720 = load i32, i32* %25, align 4
  %721 = load i32, i32* %35, align 4
  %722 = icmp slt i32 %720, %721
  br i1 %722, label %723, label %725

723:                                              ; preds = %719
  %724 = load i32, i32* %35, align 4
  store i32 %724, i32* %25, align 4
  br label %725

725:                                              ; preds = %723, %719
  %726 = load i8, i8* %28, align 1
  %727 = trunc i8 %726 to i1
  br i1 %727, label %728, label %729

728:                                              ; preds = %725
  br label %734

729:                                              ; preds = %725
  %730 = load i8, i8* %29, align 1
  %731 = trunc i8 %730 to i1
  %732 = zext i1 %731 to i64
  %733 = select i1 %731, i32 43, i32 0
  br label %734

734:                                              ; preds = %729, %728
  %735 = phi i32 [ 45, %728 ], [ %733, %729 ]
  %736 = trunc i32 %735 to i8
  store i8 %736, i8* %32, align 1
  %737 = load i32, i32* %23, align 4
  %738 = icmp eq i32 %737, 45
  br i1 %738, label %739, label %809

739:                                              ; preds = %734
  %740 = load i8, i8* %32, align 1
  %741 = icmp ne i8 %740, 0
  br i1 %741, label %742, label %808

742:                                              ; preds = %739
  br label %743

743:                                              ; preds = %742
  store i64 1, i64* %63, align 8
  %744 = load i32, i32* %35, align 4
  %745 = icmp slt i32 %744, 0
  br i1 %745, label %746, label %747

746:                                              ; preds = %743
  br label %749

747:                                              ; preds = %743
  %748 = load i32, i32* %35, align 4
  br label %749

749:                                              ; preds = %747, %746
  %750 = phi i32 [ 0, %746 ], [ %748, %747 ]
  %751 = sext i32 %750 to i64
  store i64 %751, i64* %64, align 8
  %752 = load i64, i64* %63, align 8
  %753 = load i64, i64* %64, align 8
  %754 = icmp ult i64 %752, %753
  br i1 %754, label %755, label %757

755:                                              ; preds = %749
  %756 = load i64, i64* %64, align 8
  br label %759

757:                                              ; preds = %749
  %758 = load i64, i64* %63, align 8
  br label %759

759:                                              ; preds = %757, %755
  %760 = phi i64 [ %756, %755 ], [ %758, %757 ]
  store i64 %760, i64* %65, align 8
  %761 = load i64, i64* %65, align 8
  %762 = load i64, i64* %11, align 8
  %763 = load i64, i64* %20, align 8
  %764 = sub i64 %762, %763
  %765 = icmp uge i64 %761, %764
  br i1 %765, label %766, label %767

766:                                              ; preds = %759
  store i64 0, i64* %9, align 8
  br label %2063

767:                                              ; preds = %759
  %768 = load i8*, i8** %21, align 8
  %769 = icmp ne i8* %768, null
  br i1 %769, label %770, label %803

770:                                              ; preds = %767
  %771 = load i32, i32* %25, align 4
  %772 = icmp eq i32 %771, 0
  br i1 %772, label %773, label %797

773:                                              ; preds = %770
  %774 = load i64, i64* %63, align 8
  %775 = load i64, i64* %64, align 8
  %776 = icmp ult i64 %774, %775
  br i1 %776, label %777, label %797

777:                                              ; preds = %773
  %778 = load i32, i32* %35, align 4
  %779 = sext i32 %778 to i64
  %780 = load i64, i64* %63, align 8
  %781 = sub i64 %779, %780
  store i64 %781, i64* %66, align 8
  %782 = load i32, i32* %23, align 4
  %783 = icmp eq i32 %782, 48
  br i1 %783, label %784, label %790

784:                                              ; preds = %777
  %785 = load i8*, i8** %21, align 8
  %786 = load i64, i64* %66, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %785, i8 48, i64 %786, i1 false)
  %787 = load i64, i64* %66, align 8
  %788 = load i8*, i8** %21, align 8
  %789 = getelementptr inbounds i8, i8* %788, i64 %787
  store i8* %789, i8** %21, align 8
  br label %796

790:                                              ; preds = %777
  %791 = load i8*, i8** %21, align 8
  %792 = load i64, i64* %66, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %791, i8 32, i64 %792, i1 false)
  %793 = load i64, i64* %66, align 8
  %794 = load i8*, i8** %21, align 8
  %795 = getelementptr inbounds i8, i8* %794, i64 %793
  store i8* %795, i8** %21, align 8
  br label %796

796:                                              ; preds = %790, %784
  br label %797

797:                                              ; preds = %796, %773, %770
  %798 = load i8, i8* %32, align 1
  %799 = load i8*, i8** %21, align 8
  store i8 %798, i8* %799, align 1
  %800 = load i64, i64* %63, align 8
  %801 = load i8*, i8** %21, align 8
  %802 = getelementptr inbounds i8, i8* %801, i64 %800
  store i8* %802, i8** %21, align 8
  br label %803

803:                                              ; preds = %797, %767
  %804 = load i64, i64* %65, align 8
  %805 = load i64, i64* %20, align 8
  %806 = add i64 %805, %804
  store i64 %806, i64* %20, align 8
  br label %807

807:                                              ; preds = %803
  br label %808

808:                                              ; preds = %807, %739
  br label %1100

809:                                              ; preds = %734
  %810 = load i32, i32* %25, align 4
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds [23 x i8], [23 x i8]* %34, i64 0, i64 0
  %813 = getelementptr inbounds i8, i8* %812, i64 23
  %814 = load i8*, i8** %33, align 8
  %815 = ptrtoint i8* %813 to i64
  %816 = ptrtoint i8* %814 to i64
  %817 = sub i64 %815, %816
  %818 = sub nsw i64 %811, %817
  %819 = load i8, i8* %32, align 1
  %820 = icmp ne i8 %819, 0
  %821 = xor i1 %820, true
  %822 = xor i1 %821, true
  %823 = zext i1 %822 to i32
  %824 = sext i32 %823 to i64
  %825 = sub nsw i64 %818, %824
  %826 = trunc i64 %825 to i32
  store i32 %826, i32* %67, align 4
  %827 = load i32, i32* %67, align 4
  %828 = icmp sgt i32 %827, 0
  br i1 %828, label %829, label %1029

829:                                              ; preds = %809
  %830 = load i32, i32* %23, align 4
  %831 = icmp eq i32 %830, 95
  br i1 %831, label %832, label %935

832:                                              ; preds = %829
  %833 = load i32, i32* %67, align 4
  %834 = sext i32 %833 to i64
  %835 = load i64, i64* %11, align 8
  %836 = load i64, i64* %20, align 8
  %837 = sub i64 %835, %836
  %838 = icmp uge i64 %834, %837
  br i1 %838, label %839, label %840

839:                                              ; preds = %832
  store i64 0, i64* %9, align 8
  br label %2063

840:                                              ; preds = %832
  %841 = load i8*, i8** %21, align 8
  %842 = icmp ne i8* %841, null
  br i1 %842, label %843, label %851

843:                                              ; preds = %840
  %844 = load i8*, i8** %21, align 8
  %845 = load i32, i32* %67, align 4
  %846 = sext i32 %845 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %844, i8 32, i64 %846, i1 false)
  %847 = load i32, i32* %67, align 4
  %848 = load i8*, i8** %21, align 8
  %849 = sext i32 %847 to i64
  %850 = getelementptr inbounds i8, i8* %848, i64 %849
  store i8* %850, i8** %21, align 8
  br label %851

851:                                              ; preds = %843, %840
  %852 = load i32, i32* %67, align 4
  %853 = sext i32 %852 to i64
  %854 = load i64, i64* %20, align 8
  %855 = add i64 %854, %853
  store i64 %855, i64* %20, align 8
  %856 = load i32, i32* %35, align 4
  %857 = load i32, i32* %67, align 4
  %858 = icmp sgt i32 %856, %857
  br i1 %858, label %859, label %863

859:                                              ; preds = %851
  %860 = load i32, i32* %35, align 4
  %861 = load i32, i32* %67, align 4
  %862 = sub nsw i32 %860, %861
  br label %864

863:                                              ; preds = %851
  br label %864

864:                                              ; preds = %863, %859
  %865 = phi i32 [ %862, %859 ], [ 0, %863 ]
  store i32 %865, i32* %35, align 4
  %866 = load i8, i8* %32, align 1
  %867 = icmp ne i8 %866, 0
  br i1 %867, label %868, label %934

868:                                              ; preds = %864
  br label %869

869:                                              ; preds = %868
  store i64 1, i64* %68, align 8
  %870 = load i32, i32* %35, align 4
  %871 = icmp slt i32 %870, 0
  br i1 %871, label %872, label %873

872:                                              ; preds = %869
  br label %875

873:                                              ; preds = %869
  %874 = load i32, i32* %35, align 4
  br label %875

875:                                              ; preds = %873, %872
  %876 = phi i32 [ 0, %872 ], [ %874, %873 ]
  %877 = sext i32 %876 to i64
  store i64 %877, i64* %69, align 8
  %878 = load i64, i64* %68, align 8
  %879 = load i64, i64* %69, align 8
  %880 = icmp ult i64 %878, %879
  br i1 %880, label %881, label %883

881:                                              ; preds = %875
  %882 = load i64, i64* %69, align 8
  br label %885

883:                                              ; preds = %875
  %884 = load i64, i64* %68, align 8
  br label %885

885:                                              ; preds = %883, %881
  %886 = phi i64 [ %882, %881 ], [ %884, %883 ]
  store i64 %886, i64* %70, align 8
  %887 = load i64, i64* %70, align 8
  %888 = load i64, i64* %11, align 8
  %889 = load i64, i64* %20, align 8
  %890 = sub i64 %888, %889
  %891 = icmp uge i64 %887, %890
  br i1 %891, label %892, label %893

892:                                              ; preds = %885
  store i64 0, i64* %9, align 8
  br label %2063

893:                                              ; preds = %885
  %894 = load i8*, i8** %21, align 8
  %895 = icmp ne i8* %894, null
  br i1 %895, label %896, label %929

896:                                              ; preds = %893
  %897 = load i32, i32* %25, align 4
  %898 = icmp eq i32 %897, 0
  br i1 %898, label %899, label %923

899:                                              ; preds = %896
  %900 = load i64, i64* %68, align 8
  %901 = load i64, i64* %69, align 8
  %902 = icmp ult i64 %900, %901
  br i1 %902, label %903, label %923

903:                                              ; preds = %899
  %904 = load i32, i32* %35, align 4
  %905 = sext i32 %904 to i64
  %906 = load i64, i64* %68, align 8
  %907 = sub i64 %905, %906
  store i64 %907, i64* %71, align 8
  %908 = load i32, i32* %23, align 4
  %909 = icmp eq i32 %908, 48
  br i1 %909, label %910, label %916

910:                                              ; preds = %903
  %911 = load i8*, i8** %21, align 8
  %912 = load i64, i64* %71, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %911, i8 48, i64 %912, i1 false)
  %913 = load i64, i64* %71, align 8
  %914 = load i8*, i8** %21, align 8
  %915 = getelementptr inbounds i8, i8* %914, i64 %913
  store i8* %915, i8** %21, align 8
  br label %922

916:                                              ; preds = %903
  %917 = load i8*, i8** %21, align 8
  %918 = load i64, i64* %71, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %917, i8 32, i64 %918, i1 false)
  %919 = load i64, i64* %71, align 8
  %920 = load i8*, i8** %21, align 8
  %921 = getelementptr inbounds i8, i8* %920, i64 %919
  store i8* %921, i8** %21, align 8
  br label %922

922:                                              ; preds = %916, %910
  br label %923

923:                                              ; preds = %922, %899, %896
  %924 = load i8, i8* %32, align 1
  %925 = load i8*, i8** %21, align 8
  store i8 %924, i8* %925, align 1
  %926 = load i64, i64* %68, align 8
  %927 = load i8*, i8** %21, align 8
  %928 = getelementptr inbounds i8, i8* %927, i64 %926
  store i8* %928, i8** %21, align 8
  br label %929

929:                                              ; preds = %923, %893
  %930 = load i64, i64* %70, align 8
  %931 = load i64, i64* %20, align 8
  %932 = add i64 %931, %930
  store i64 %932, i64* %20, align 8
  br label %933

933:                                              ; preds = %929
  br label %934

934:                                              ; preds = %933, %864
  br label %1028

935:                                              ; preds = %829
  %936 = load i32, i32* %25, align 4
  %937 = sext i32 %936 to i64
  %938 = load i64, i64* %11, align 8
  %939 = load i64, i64* %20, align 8
  %940 = sub i64 %938, %939
  %941 = icmp uge i64 %937, %940
  br i1 %941, label %942, label %943

942:                                              ; preds = %935
  store i64 0, i64* %9, align 8
  br label %2063

943:                                              ; preds = %935
  %944 = load i8, i8* %32, align 1
  %945 = icmp ne i8 %944, 0
  br i1 %945, label %946, label %1012

946:                                              ; preds = %943
  br label %947

947:                                              ; preds = %946
  store i64 1, i64* %72, align 8
  %948 = load i32, i32* %35, align 4
  %949 = icmp slt i32 %948, 0
  br i1 %949, label %950, label %951

950:                                              ; preds = %947
  br label %953

951:                                              ; preds = %947
  %952 = load i32, i32* %35, align 4
  br label %953

953:                                              ; preds = %951, %950
  %954 = phi i32 [ 0, %950 ], [ %952, %951 ]
  %955 = sext i32 %954 to i64
  store i64 %955, i64* %73, align 8
  %956 = load i64, i64* %72, align 8
  %957 = load i64, i64* %73, align 8
  %958 = icmp ult i64 %956, %957
  br i1 %958, label %959, label %961

959:                                              ; preds = %953
  %960 = load i64, i64* %73, align 8
  br label %963

961:                                              ; preds = %953
  %962 = load i64, i64* %72, align 8
  br label %963

963:                                              ; preds = %961, %959
  %964 = phi i64 [ %960, %959 ], [ %962, %961 ]
  store i64 %964, i64* %74, align 8
  %965 = load i64, i64* %74, align 8
  %966 = load i64, i64* %11, align 8
  %967 = load i64, i64* %20, align 8
  %968 = sub i64 %966, %967
  %969 = icmp uge i64 %965, %968
  br i1 %969, label %970, label %971

970:                                              ; preds = %963
  store i64 0, i64* %9, align 8
  br label %2063

971:                                              ; preds = %963
  %972 = load i8*, i8** %21, align 8
  %973 = icmp ne i8* %972, null
  br i1 %973, label %974, label %1007

974:                                              ; preds = %971
  %975 = load i32, i32* %25, align 4
  %976 = icmp eq i32 %975, 0
  br i1 %976, label %977, label %1001

977:                                              ; preds = %974
  %978 = load i64, i64* %72, align 8
  %979 = load i64, i64* %73, align 8
  %980 = icmp ult i64 %978, %979
  br i1 %980, label %981, label %1001

981:                                              ; preds = %977
  %982 = load i32, i32* %35, align 4
  %983 = sext i32 %982 to i64
  %984 = load i64, i64* %72, align 8
  %985 = sub i64 %983, %984
  store i64 %985, i64* %75, align 8
  %986 = load i32, i32* %23, align 4
  %987 = icmp eq i32 %986, 48
  br i1 %987, label %988, label %994

988:                                              ; preds = %981
  %989 = load i8*, i8** %21, align 8
  %990 = load i64, i64* %75, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %989, i8 48, i64 %990, i1 false)
  %991 = load i64, i64* %75, align 8
  %992 = load i8*, i8** %21, align 8
  %993 = getelementptr inbounds i8, i8* %992, i64 %991
  store i8* %993, i8** %21, align 8
  br label %1000

994:                                              ; preds = %981
  %995 = load i8*, i8** %21, align 8
  %996 = load i64, i64* %75, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %995, i8 32, i64 %996, i1 false)
  %997 = load i64, i64* %75, align 8
  %998 = load i8*, i8** %21, align 8
  %999 = getelementptr inbounds i8, i8* %998, i64 %997
  store i8* %999, i8** %21, align 8
  br label %1000

1000:                                             ; preds = %994, %988
  br label %1001

1001:                                             ; preds = %1000, %977, %974
  %1002 = load i8, i8* %32, align 1
  %1003 = load i8*, i8** %21, align 8
  store i8 %1002, i8* %1003, align 1
  %1004 = load i64, i64* %72, align 8
  %1005 = load i8*, i8** %21, align 8
  %1006 = getelementptr inbounds i8, i8* %1005, i64 %1004
  store i8* %1006, i8** %21, align 8
  br label %1007

1007:                                             ; preds = %1001, %971
  %1008 = load i64, i64* %74, align 8
  %1009 = load i64, i64* %20, align 8
  %1010 = add i64 %1009, %1008
  store i64 %1010, i64* %20, align 8
  br label %1011

1011:                                             ; preds = %1007
  br label %1012

1012:                                             ; preds = %1011, %943
  %1013 = load i8*, i8** %21, align 8
  %1014 = icmp ne i8* %1013, null
  br i1 %1014, label %1015, label %1023

1015:                                             ; preds = %1012
  %1016 = load i8*, i8** %21, align 8
  %1017 = load i32, i32* %67, align 4
  %1018 = sext i32 %1017 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %1016, i8 48, i64 %1018, i1 false)
  %1019 = load i32, i32* %67, align 4
  %1020 = load i8*, i8** %21, align 8
  %1021 = sext i32 %1019 to i64
  %1022 = getelementptr inbounds i8, i8* %1020, i64 %1021
  store i8* %1022, i8** %21, align 8
  br label %1023

1023:                                             ; preds = %1015, %1012
  %1024 = load i32, i32* %67, align 4
  %1025 = sext i32 %1024 to i64
  %1026 = load i64, i64* %20, align 8
  %1027 = add i64 %1026, %1025
  store i64 %1027, i64* %20, align 8
  store i32 0, i32* %35, align 4
  br label %1028

1028:                                             ; preds = %1023, %934
  br label %1099

1029:                                             ; preds = %809
  %1030 = load i8, i8* %32, align 1
  %1031 = icmp ne i8 %1030, 0
  br i1 %1031, label %1032, label %1098

1032:                                             ; preds = %1029
  br label %1033

1033:                                             ; preds = %1032
  store i64 1, i64* %76, align 8
  %1034 = load i32, i32* %35, align 4
  %1035 = icmp slt i32 %1034, 0
  br i1 %1035, label %1036, label %1037

1036:                                             ; preds = %1033
  br label %1039

1037:                                             ; preds = %1033
  %1038 = load i32, i32* %35, align 4
  br label %1039

1039:                                             ; preds = %1037, %1036
  %1040 = phi i32 [ 0, %1036 ], [ %1038, %1037 ]
  %1041 = sext i32 %1040 to i64
  store i64 %1041, i64* %77, align 8
  %1042 = load i64, i64* %76, align 8
  %1043 = load i64, i64* %77, align 8
  %1044 = icmp ult i64 %1042, %1043
  br i1 %1044, label %1045, label %1047

1045:                                             ; preds = %1039
  %1046 = load i64, i64* %77, align 8
  br label %1049

1047:                                             ; preds = %1039
  %1048 = load i64, i64* %76, align 8
  br label %1049

1049:                                             ; preds = %1047, %1045
  %1050 = phi i64 [ %1046, %1045 ], [ %1048, %1047 ]
  store i64 %1050, i64* %78, align 8
  %1051 = load i64, i64* %78, align 8
  %1052 = load i64, i64* %11, align 8
  %1053 = load i64, i64* %20, align 8
  %1054 = sub i64 %1052, %1053
  %1055 = icmp uge i64 %1051, %1054
  br i1 %1055, label %1056, label %1057

1056:                                             ; preds = %1049
  store i64 0, i64* %9, align 8
  br label %2063

1057:                                             ; preds = %1049
  %1058 = load i8*, i8** %21, align 8
  %1059 = icmp ne i8* %1058, null
  br i1 %1059, label %1060, label %1093

1060:                                             ; preds = %1057
  %1061 = load i32, i32* %25, align 4
  %1062 = icmp eq i32 %1061, 0
  br i1 %1062, label %1063, label %1087

1063:                                             ; preds = %1060
  %1064 = load i64, i64* %76, align 8
  %1065 = load i64, i64* %77, align 8
  %1066 = icmp ult i64 %1064, %1065
  br i1 %1066, label %1067, label %1087

1067:                                             ; preds = %1063
  %1068 = load i32, i32* %35, align 4
  %1069 = sext i32 %1068 to i64
  %1070 = load i64, i64* %76, align 8
  %1071 = sub i64 %1069, %1070
  store i64 %1071, i64* %79, align 8
  %1072 = load i32, i32* %23, align 4
  %1073 = icmp eq i32 %1072, 48
  br i1 %1073, label %1074, label %1080

1074:                                             ; preds = %1067
  %1075 = load i8*, i8** %21, align 8
  %1076 = load i64, i64* %79, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %1075, i8 48, i64 %1076, i1 false)
  %1077 = load i64, i64* %79, align 8
  %1078 = load i8*, i8** %21, align 8
  %1079 = getelementptr inbounds i8, i8* %1078, i64 %1077
  store i8* %1079, i8** %21, align 8
  br label %1086

1080:                                             ; preds = %1067
  %1081 = load i8*, i8** %21, align 8
  %1082 = load i64, i64* %79, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %1081, i8 32, i64 %1082, i1 false)
  %1083 = load i64, i64* %79, align 8
  %1084 = load i8*, i8** %21, align 8
  %1085 = getelementptr inbounds i8, i8* %1084, i64 %1083
  store i8* %1085, i8** %21, align 8
  br label %1086

1086:                                             ; preds = %1080, %1074
  br label %1087

1087:                                             ; preds = %1086, %1063, %1060
  %1088 = load i8, i8* %32, align 1
  %1089 = load i8*, i8** %21, align 8
  store i8 %1088, i8* %1089, align 1
  %1090 = load i64, i64* %76, align 8
  %1091 = load i8*, i8** %21, align 8
  %1092 = getelementptr inbounds i8, i8* %1091, i64 %1090
  store i8* %1092, i8** %21, align 8
  br label %1093

1093:                                             ; preds = %1087, %1057
  %1094 = load i64, i64* %78, align 8
  %1095 = load i64, i64* %20, align 8
  %1096 = add i64 %1095, %1094
  store i64 %1096, i64* %20, align 8
  br label %1097

1097:                                             ; preds = %1093
  br label %1098

1098:                                             ; preds = %1097, %1029
  br label %1099

1099:                                             ; preds = %1098, %1028
  br label %1100

1100:                                             ; preds = %1099, %808
  br label %1101

1101:                                             ; preds = %1100
  %1102 = getelementptr inbounds [23 x i8], [23 x i8]* %34, i64 0, i64 0
  %1103 = getelementptr inbounds i8, i8* %1102, i64 23
  %1104 = load i8*, i8** %33, align 8
  %1105 = ptrtoint i8* %1103 to i64
  %1106 = ptrtoint i8* %1104 to i64
  %1107 = sub i64 %1105, %1106
  store i64 %1107, i64* %80, align 8
  %1108 = load i32, i32* %35, align 4
  %1109 = icmp slt i32 %1108, 0
  br i1 %1109, label %1110, label %1111

1110:                                             ; preds = %1101
  br label %1113

1111:                                             ; preds = %1101
  %1112 = load i32, i32* %35, align 4
  br label %1113

1113:                                             ; preds = %1111, %1110
  %1114 = phi i32 [ 0, %1110 ], [ %1112, %1111 ]
  %1115 = sext i32 %1114 to i64
  store i64 %1115, i64* %81, align 8
  %1116 = load i64, i64* %80, align 8
  %1117 = load i64, i64* %81, align 8
  %1118 = icmp ult i64 %1116, %1117
  br i1 %1118, label %1119, label %1121

1119:                                             ; preds = %1113
  %1120 = load i64, i64* %81, align 8
  br label %1123

1121:                                             ; preds = %1113
  %1122 = load i64, i64* %80, align 8
  br label %1123

1123:                                             ; preds = %1121, %1119
  %1124 = phi i64 [ %1120, %1119 ], [ %1122, %1121 ]
  store i64 %1124, i64* %82, align 8
  %1125 = load i64, i64* %82, align 8
  %1126 = load i64, i64* %11, align 8
  %1127 = load i64, i64* %20, align 8
  %1128 = sub i64 %1126, %1127
  %1129 = icmp uge i64 %1125, %1128
  br i1 %1129, label %1130, label %1131

1130:                                             ; preds = %1123
  store i64 0, i64* %9, align 8
  br label %2063

1131:                                             ; preds = %1123
  %1132 = load i8*, i8** %21, align 8
  %1133 = icmp ne i8* %1132, null
  br i1 %1133, label %1134, label %1186

1134:                                             ; preds = %1131
  %1135 = load i32, i32* %25, align 4
  %1136 = icmp eq i32 %1135, 0
  br i1 %1136, label %1137, label %1161

1137:                                             ; preds = %1134
  %1138 = load i64, i64* %80, align 8
  %1139 = load i64, i64* %81, align 8
  %1140 = icmp ult i64 %1138, %1139
  br i1 %1140, label %1141, label %1161

1141:                                             ; preds = %1137
  %1142 = load i32, i32* %35, align 4
  %1143 = sext i32 %1142 to i64
  %1144 = load i64, i64* %80, align 8
  %1145 = sub i64 %1143, %1144
  store i64 %1145, i64* %83, align 8
  %1146 = load i32, i32* %23, align 4
  %1147 = icmp eq i32 %1146, 48
  br i1 %1147, label %1148, label %1154

1148:                                             ; preds = %1141
  %1149 = load i8*, i8** %21, align 8
  %1150 = load i64, i64* %83, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %1149, i8 48, i64 %1150, i1 false)
  %1151 = load i64, i64* %83, align 8
  %1152 = load i8*, i8** %21, align 8
  %1153 = getelementptr inbounds i8, i8* %1152, i64 %1151
  store i8* %1153, i8** %21, align 8
  br label %1160

1154:                                             ; preds = %1141
  %1155 = load i8*, i8** %21, align 8
  %1156 = load i64, i64* %83, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %1155, i8 32, i64 %1156, i1 false)
  %1157 = load i64, i64* %83, align 8
  %1158 = load i8*, i8** %21, align 8
  %1159 = getelementptr inbounds i8, i8* %1158, i64 %1157
  store i8* %1159, i8** %21, align 8
  br label %1160

1160:                                             ; preds = %1154, %1148
  br label %1161

1161:                                             ; preds = %1160, %1137, %1134
  %1162 = load i8, i8* %36, align 1
  %1163 = trunc i8 %1162 to i1
  br i1 %1163, label %1164, label %1169

1164:                                             ; preds = %1161
  %1165 = load i8*, i8** %21, align 8
  %1166 = load i8*, i8** %33, align 8
  %1167 = load i64, i64* %80, align 8
  %1168 = call i8* @memcpy_lowcase(i8* %1165, i8* %1166, i64 %1167)
  br label %1182

1169:                                             ; preds = %1161
  %1170 = load i8, i8* %37, align 1
  %1171 = trunc i8 %1170 to i1
  br i1 %1171, label %1172, label %1177

1172:                                             ; preds = %1169
  %1173 = load i8*, i8** %21, align 8
  %1174 = load i8*, i8** %33, align 8
  %1175 = load i64, i64* %80, align 8
  %1176 = call i8* @memcpy_uppcase(i8* %1173, i8* %1174, i64 %1175)
  br label %1181

1177:                                             ; preds = %1169
  %1178 = load i8*, i8** %21, align 8
  %1179 = load i8*, i8** %33, align 8
  %1180 = load i64, i64* %80, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1178, i8* align 1 %1179, i64 %1180, i1 false)
  br label %1181

1181:                                             ; preds = %1177, %1172
  br label %1182

1182:                                             ; preds = %1181, %1164
  %1183 = load i64, i64* %80, align 8
  %1184 = load i8*, i8** %21, align 8
  %1185 = getelementptr inbounds i8, i8* %1184, i64 %1183
  store i8* %1185, i8** %21, align 8
  br label %1186

1186:                                             ; preds = %1182, %1131
  %1187 = load i64, i64* %82, align 8
  %1188 = load i64, i64* %20, align 8
  %1189 = add i64 %1188, %1187
  store i64 %1189, i64* %20, align 8
  br label %1190

1190:                                             ; preds = %1186
  br label %2049

1191:                                             ; preds = %282
  %1192 = load i32, i32* %24, align 4
  %1193 = icmp ne i32 %1192, 0
  br i1 %1193, label %1194, label %1195

1194:                                             ; preds = %1191
  br label %1936

1195:                                             ; preds = %1191
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2.357, i64 0, i64 0), i8** %31, align 8
  br label %399

1196:                                             ; preds = %282
  %1197 = load i32, i32* %24, align 4
  %1198 = icmp eq i32 %1197, 69
  br i1 %1198, label %1199, label %1200

1199:                                             ; preds = %1196
  br label %1936

1200:                                             ; preds = %1196
  br label %1201

1201:                                             ; preds = %1200
  store i32 2, i32* %25, align 4
  %1202 = load %struct.tm*, %struct.tm** %13, align 8
  %1203 = getelementptr inbounds %struct.tm, %struct.tm* %1202, i32 0, i32 2
  %1204 = load i32, i32* %1203, align 8
  store i32 %1204, i32* %26, align 4
  br label %670

1205:                                             ; No predecessors!
  br label %1206

1206:                                             ; preds = %1205, %282
  %1207 = load i32, i32* %24, align 4
  %1208 = icmp eq i32 %1207, 69
  br i1 %1208, label %1209, label %1210

1209:                                             ; preds = %1206
  br label %1936

1210:                                             ; preds = %1206
  br label %1211

1211:                                             ; preds = %1210
  store i32 2, i32* %25, align 4
  %1212 = load i32, i32* %18, align 4
  store i32 %1212, i32* %26, align 4
  br label %670

1213:                                             ; No predecessors!
  br label %1214

1214:                                             ; preds = %1213, %282
  %1215 = load i32, i32* %24, align 4
  %1216 = icmp eq i32 %1215, 69
  br i1 %1216, label %1217, label %1218

1217:                                             ; preds = %1214
  br label %1936

1218:                                             ; preds = %1214
  br label %1219

1219:                                             ; preds = %1218
  store i32 2, i32* %25, align 4
  %1220 = load %struct.tm*, %struct.tm** %13, align 8
  %1221 = getelementptr inbounds %struct.tm, %struct.tm* %1220, i32 0, i32 2
  %1222 = load i32, i32* %1221, align 8
  store i32 %1222, i32* %26, align 4
  br label %662

1223:                                             ; No predecessors!
  br label %1224

1224:                                             ; preds = %1223, %282
  %1225 = load i32, i32* %24, align 4
  %1226 = icmp eq i32 %1225, 69
  br i1 %1226, label %1227, label %1228

1227:                                             ; preds = %1224
  br label %1936

1228:                                             ; preds = %1224
  br label %1229

1229:                                             ; preds = %1228
  store i32 2, i32* %25, align 4
  %1230 = load i32, i32* %18, align 4
  store i32 %1230, i32* %26, align 4
  br label %662

1231:                                             ; No predecessors!
  br label %1232

1232:                                             ; preds = %1231, %282
  %1233 = load i32, i32* %24, align 4
  %1234 = icmp eq i32 %1233, 69
  br i1 %1234, label %1235, label %1236

1235:                                             ; preds = %1232
  br label %1936

1236:                                             ; preds = %1232
  br label %1237

1237:                                             ; preds = %1236
  store i32 3, i32* %25, align 4
  %1238 = load %struct.tm*, %struct.tm** %13, align 8
  %1239 = getelementptr inbounds %struct.tm, %struct.tm* %1238, i32 0, i32 7
  %1240 = load i32, i32* %1239, align 4
  %1241 = icmp slt i32 %1240, -1
  %1242 = zext i1 %1241 to i8
  store i8 %1242, i8* %28, align 1
  %1243 = load %struct.tm*, %struct.tm** %13, align 8
  %1244 = getelementptr inbounds %struct.tm, %struct.tm* %1243, i32 0, i32 7
  %1245 = load i32, i32* %1244, align 4
  %1246 = add i32 %1245, 1
  store i32 %1246, i32* %27, align 4
  br label %675

1247:                                             ; No predecessors!
  br label %1248

1248:                                             ; preds = %1247, %282
  %1249 = load i32, i32* %24, align 4
  %1250 = icmp eq i32 %1249, 69
  br i1 %1250, label %1251, label %1252

1251:                                             ; preds = %1248
  br label %1936

1252:                                             ; preds = %1248
  br label %1253

1253:                                             ; preds = %1252
  store i32 2, i32* %25, align 4
  %1254 = load %struct.tm*, %struct.tm** %13, align 8
  %1255 = getelementptr inbounds %struct.tm, %struct.tm* %1254, i32 0, i32 1
  %1256 = load i32, i32* %1255, align 4
  store i32 %1256, i32* %26, align 4
  br label %670

1257:                                             ; No predecessors!
  br label %1258

1258:                                             ; preds = %1257, %282
  %1259 = load i32, i32* %24, align 4
  %1260 = icmp eq i32 %1259, 69
  br i1 %1260, label %1261, label %1262

1261:                                             ; preds = %1258
  br label %1936

1262:                                             ; preds = %1258
  br label %1263

1263:                                             ; preds = %1262
  store i32 2, i32* %25, align 4
  %1264 = load %struct.tm*, %struct.tm** %13, align 8
  %1265 = getelementptr inbounds %struct.tm, %struct.tm* %1264, i32 0, i32 4
  %1266 = load i32, i32* %1265, align 8
  %1267 = icmp slt i32 %1266, -1
  %1268 = zext i1 %1267 to i8
  store i8 %1268, i8* %28, align 1
  %1269 = load %struct.tm*, %struct.tm** %13, align 8
  %1270 = getelementptr inbounds %struct.tm, %struct.tm* %1269, i32 0, i32 4
  %1271 = load i32, i32* %1270, align 8
  %1272 = add i32 %1271, 1
  store i32 %1272, i32* %27, align 4
  br label %675

1273:                                             ; No predecessors!
  br label %1274

1274:                                             ; preds = %1273, %282
  %1275 = load i32, i32* %24, align 4
  %1276 = icmp eq i32 %1275, 69
  br i1 %1276, label %1277, label %1278

1277:                                             ; preds = %1274
  br label %1936

1278:                                             ; preds = %1274
  %1279 = load i32, i32* %17, align 4
  store i32 %1279, i32* %26, align 4
  %1280 = load i32, i32* %35, align 4
  %1281 = icmp eq i32 %1280, -1
  br i1 %1281, label %1282, label %1283

1282:                                             ; preds = %1278
  store i32 9, i32* %35, align 4
  br label %1295

1283:                                             ; preds = %1278
  %1284 = load i32, i32* %35, align 4
  store i32 %1284, i32* %84, align 4
  br label %1285

1285:                                             ; preds = %1291, %1283
  %1286 = load i32, i32* %84, align 4
  %1287 = icmp slt i32 %1286, 9
  br i1 %1287, label %1288, label %1294

1288:                                             ; preds = %1285
  %1289 = load i32, i32* %26, align 4
  %1290 = sdiv i32 %1289, 10
  store i32 %1290, i32* %26, align 4
  br label %1291

1291:                                             ; preds = %1288
  %1292 = load i32, i32* %84, align 4
  %1293 = add nsw i32 %1292, 1
  store i32 %1293, i32* %84, align 4
  br label %1285, !llvm.loop !110

1294:                                             ; preds = %1285
  br label %1295

1295:                                             ; preds = %1294, %1282
  br label %1296

1296:                                             ; preds = %1295
  %1297 = load i32, i32* %35, align 4
  store i32 %1297, i32* %25, align 4
  %1298 = load i32, i32* %26, align 4
  store i32 %1298, i32* %26, align 4
  br label %670

1299:                                             ; No predecessors!
  br label %1300

1300:                                             ; preds = %1299, %282
  br label %1301

1301:                                             ; preds = %1300
  store i64 1, i64* %85, align 8
  %1302 = load i32, i32* %35, align 4
  %1303 = icmp slt i32 %1302, 0
  br i1 %1303, label %1304, label %1305

1304:                                             ; preds = %1301
  br label %1307

1305:                                             ; preds = %1301
  %1306 = load i32, i32* %35, align 4
  br label %1307

1307:                                             ; preds = %1305, %1304
  %1308 = phi i32 [ 0, %1304 ], [ %1306, %1305 ]
  %1309 = sext i32 %1308 to i64
  store i64 %1309, i64* %86, align 8
  %1310 = load i64, i64* %85, align 8
  %1311 = load i64, i64* %86, align 8
  %1312 = icmp ult i64 %1310, %1311
  br i1 %1312, label %1313, label %1315

1313:                                             ; preds = %1307
  %1314 = load i64, i64* %86, align 8
  br label %1317

1315:                                             ; preds = %1307
  %1316 = load i64, i64* %85, align 8
  br label %1317

1317:                                             ; preds = %1315, %1313
  %1318 = phi i64 [ %1314, %1313 ], [ %1316, %1315 ]
  store i64 %1318, i64* %87, align 8
  %1319 = load i64, i64* %87, align 8
  %1320 = load i64, i64* %11, align 8
  %1321 = load i64, i64* %20, align 8
  %1322 = sub i64 %1320, %1321
  %1323 = icmp uge i64 %1319, %1322
  br i1 %1323, label %1324, label %1325

1324:                                             ; preds = %1317
  store i64 0, i64* %9, align 8
  br label %2063

1325:                                             ; preds = %1317
  %1326 = load i8*, i8** %21, align 8
  %1327 = icmp ne i8* %1326, null
  br i1 %1327, label %1328, label %1360

1328:                                             ; preds = %1325
  %1329 = load i32, i32* %25, align 4
  %1330 = icmp eq i32 %1329, 0
  br i1 %1330, label %1331, label %1355

1331:                                             ; preds = %1328
  %1332 = load i64, i64* %85, align 8
  %1333 = load i64, i64* %86, align 8
  %1334 = icmp ult i64 %1332, %1333
  br i1 %1334, label %1335, label %1355

1335:                                             ; preds = %1331
  %1336 = load i32, i32* %35, align 4
  %1337 = sext i32 %1336 to i64
  %1338 = load i64, i64* %85, align 8
  %1339 = sub i64 %1337, %1338
  store i64 %1339, i64* %88, align 8
  %1340 = load i32, i32* %23, align 4
  %1341 = icmp eq i32 %1340, 48
  br i1 %1341, label %1342, label %1348

1342:                                             ; preds = %1335
  %1343 = load i8*, i8** %21, align 8
  %1344 = load i64, i64* %88, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %1343, i8 48, i64 %1344, i1 false)
  %1345 = load i64, i64* %88, align 8
  %1346 = load i8*, i8** %21, align 8
  %1347 = getelementptr inbounds i8, i8* %1346, i64 %1345
  store i8* %1347, i8** %21, align 8
  br label %1354

1348:                                             ; preds = %1335
  %1349 = load i8*, i8** %21, align 8
  %1350 = load i64, i64* %88, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %1349, i8 32, i64 %1350, i1 false)
  %1351 = load i64, i64* %88, align 8
  %1352 = load i8*, i8** %21, align 8
  %1353 = getelementptr inbounds i8, i8* %1352, i64 %1351
  store i8* %1353, i8** %21, align 8
  br label %1354

1354:                                             ; preds = %1348, %1342
  br label %1355

1355:                                             ; preds = %1354, %1331, %1328
  %1356 = load i8*, i8** %21, align 8
  store i8 10, i8* %1356, align 1
  %1357 = load i64, i64* %85, align 8
  %1358 = load i8*, i8** %21, align 8
  %1359 = getelementptr inbounds i8, i8* %1358, i64 %1357
  store i8* %1359, i8** %21, align 8
  br label %1360

1360:                                             ; preds = %1355, %1325
  %1361 = load i64, i64* %87, align 8
  %1362 = load i64, i64* %20, align 8
  %1363 = add i64 %1362, %1361
  store i64 %1363, i64* %20, align 8
  br label %1364

1364:                                             ; preds = %1360
  br label %2049

1365:                                             ; preds = %282
  store i8 1, i8* %36, align 1
  store i32 112, i32* %40, align 4
  br label %1366

1366:                                             ; preds = %1365, %282
  %1367 = load i8, i8* %39, align 1
  %1368 = trunc i8 %1367 to i1
  br i1 %1368, label %1369, label %1370

1369:                                             ; preds = %1366
  store i8 0, i8* %37, align 1
  store i8 1, i8* %36, align 1
  br label %1370

1370:                                             ; preds = %1369, %1366
  br label %484

1371:                                             ; preds = %282
  br label %1372

1372:                                             ; preds = %1371
  store i32 1, i32* %25, align 4
  store i8 0, i8* %28, align 1
  %1373 = load %struct.tm*, %struct.tm** %13, align 8
  %1374 = getelementptr inbounds %struct.tm, %struct.tm* %1373, i32 0, i32 4
  %1375 = load i32, i32* %1374, align 8
  %1376 = mul nsw i32 %1375, 11
  %1377 = ashr i32 %1376, 5
  %1378 = add nsw i32 %1377, 1
  store i32 %1378, i32* %27, align 4
  br label %675

1379:                                             ; No predecessors!
  br label %2049

1380:                                             ; preds = %282
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.358, i64 0, i64 0), i8** %31, align 8
  br label %399

1381:                                             ; preds = %282
  br label %484

1382:                                             ; preds = %282
  %1383 = load i32, i32* %24, align 4
  %1384 = icmp eq i32 %1383, 69
  br i1 %1384, label %1385, label %1386

1385:                                             ; preds = %1382
  br label %1936

1386:                                             ; preds = %1382
  br label %1387

1387:                                             ; preds = %1386
  store i32 2, i32* %25, align 4
  %1388 = load %struct.tm*, %struct.tm** %13, align 8
  %1389 = getelementptr inbounds %struct.tm, %struct.tm* %1388, i32 0, i32 0
  %1390 = load i32, i32* %1389, align 8
  store i32 %1390, i32* %26, align 4
  br label %670

1391:                                             ; No predecessors!
  br label %1392

1392:                                             ; preds = %1391, %282
  %1393 = load %struct.tm*, %struct.tm** %13, align 8
  %1394 = bitcast %struct.tm* %89 to i8*
  %1395 = bitcast %struct.tm* %1393 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1394, i8* align 8 %1395, i64 56, i1 false)
  %1396 = load %struct.tm_zone*, %struct.tm_zone** %16, align 8
  %1397 = call i64 @mktime_z(%struct.tm_zone* %1396, %struct.tm* %89)
  store i64 %1397, i64* %90, align 8
  %1398 = getelementptr inbounds [23 x i8], [23 x i8]* %34, i64 0, i64 0
  %1399 = getelementptr inbounds i8, i8* %1398, i64 23
  store i8* %1399, i8** %33, align 8
  %1400 = load i64, i64* %90, align 8
  %1401 = icmp slt i64 %1400, 0
  %1402 = zext i1 %1401 to i8
  store i8 %1402, i8* %28, align 1
  br label %1403

1403:                                             ; preds = %1422, %1392
  %1404 = load i64, i64* %90, align 8
  %1405 = srem i64 %1404, 10
  %1406 = trunc i64 %1405 to i32
  store i32 %1406, i32* %91, align 4
  %1407 = load i64, i64* %90, align 8
  %1408 = sdiv i64 %1407, 10
  store i64 %1408, i64* %90, align 8
  %1409 = load i8, i8* %28, align 1
  %1410 = trunc i8 %1409 to i1
  br i1 %1410, label %1411, label %1414

1411:                                             ; preds = %1403
  %1412 = load i32, i32* %91, align 4
  %1413 = sub nsw i32 0, %1412
  br label %1416

1414:                                             ; preds = %1403
  %1415 = load i32, i32* %91, align 4
  br label %1416

1416:                                             ; preds = %1414, %1411
  %1417 = phi i32 [ %1413, %1411 ], [ %1415, %1414 ]
  %1418 = add nsw i32 %1417, 48
  %1419 = trunc i32 %1418 to i8
  %1420 = load i8*, i8** %33, align 8
  %1421 = getelementptr inbounds i8, i8* %1420, i32 -1
  store i8* %1421, i8** %33, align 8
  store i8 %1419, i8* %1421, align 1
  br label %1422

1422:                                             ; preds = %1416
  %1423 = load i64, i64* %90, align 8
  %1424 = icmp ne i64 %1423, 0
  br i1 %1424, label %1403, label %1425, !llvm.loop !111

1425:                                             ; preds = %1422
  store i32 1, i32* %25, align 4
  store i8 0, i8* %29, align 1
  br label %719

1426:                                             ; preds = %282
  %1427 = load i32, i32* %24, align 4
  %1428 = icmp eq i32 %1427, 79
  br i1 %1428, label %1429, label %1430

1429:                                             ; preds = %1426
  br label %1936

1430:                                             ; preds = %1426
  br label %484

1431:                                             ; preds = %282
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4.359, i64 0, i64 0), i8** %31, align 8
  br label %399

1432:                                             ; preds = %282
  br label %1433

1433:                                             ; preds = %1432
  store i64 1, i64* %92, align 8
  %1434 = load i32, i32* %35, align 4
  %1435 = icmp slt i32 %1434, 0
  br i1 %1435, label %1436, label %1437

1436:                                             ; preds = %1433
  br label %1439

1437:                                             ; preds = %1433
  %1438 = load i32, i32* %35, align 4
  br label %1439

1439:                                             ; preds = %1437, %1436
  %1440 = phi i32 [ 0, %1436 ], [ %1438, %1437 ]
  %1441 = sext i32 %1440 to i64
  store i64 %1441, i64* %93, align 8
  %1442 = load i64, i64* %92, align 8
  %1443 = load i64, i64* %93, align 8
  %1444 = icmp ult i64 %1442, %1443
  br i1 %1444, label %1445, label %1447

1445:                                             ; preds = %1439
  %1446 = load i64, i64* %93, align 8
  br label %1449

1447:                                             ; preds = %1439
  %1448 = load i64, i64* %92, align 8
  br label %1449

1449:                                             ; preds = %1447, %1445
  %1450 = phi i64 [ %1446, %1445 ], [ %1448, %1447 ]
  store i64 %1450, i64* %94, align 8
  %1451 = load i64, i64* %94, align 8
  %1452 = load i64, i64* %11, align 8
  %1453 = load i64, i64* %20, align 8
  %1454 = sub i64 %1452, %1453
  %1455 = icmp uge i64 %1451, %1454
  br i1 %1455, label %1456, label %1457

1456:                                             ; preds = %1449
  store i64 0, i64* %9, align 8
  br label %2063

1457:                                             ; preds = %1449
  %1458 = load i8*, i8** %21, align 8
  %1459 = icmp ne i8* %1458, null
  br i1 %1459, label %1460, label %1492

1460:                                             ; preds = %1457
  %1461 = load i32, i32* %25, align 4
  %1462 = icmp eq i32 %1461, 0
  br i1 %1462, label %1463, label %1487

1463:                                             ; preds = %1460
  %1464 = load i64, i64* %92, align 8
  %1465 = load i64, i64* %93, align 8
  %1466 = icmp ult i64 %1464, %1465
  br i1 %1466, label %1467, label %1487

1467:                                             ; preds = %1463
  %1468 = load i32, i32* %35, align 4
  %1469 = sext i32 %1468 to i64
  %1470 = load i64, i64* %92, align 8
  %1471 = sub i64 %1469, %1470
  store i64 %1471, i64* %95, align 8
  %1472 = load i32, i32* %23, align 4
  %1473 = icmp eq i32 %1472, 48
  br i1 %1473, label %1474, label %1480

1474:                                             ; preds = %1467
  %1475 = load i8*, i8** %21, align 8
  %1476 = load i64, i64* %95, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %1475, i8 48, i64 %1476, i1 false)
  %1477 = load i64, i64* %95, align 8
  %1478 = load i8*, i8** %21, align 8
  %1479 = getelementptr inbounds i8, i8* %1478, i64 %1477
  store i8* %1479, i8** %21, align 8
  br label %1486

1480:                                             ; preds = %1467
  %1481 = load i8*, i8** %21, align 8
  %1482 = load i64, i64* %95, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %1481, i8 32, i64 %1482, i1 false)
  %1483 = load i64, i64* %95, align 8
  %1484 = load i8*, i8** %21, align 8
  %1485 = getelementptr inbounds i8, i8* %1484, i64 %1483
  store i8* %1485, i8** %21, align 8
  br label %1486

1486:                                             ; preds = %1480, %1474
  br label %1487

1487:                                             ; preds = %1486, %1463, %1460
  %1488 = load i8*, i8** %21, align 8
  store i8 9, i8* %1488, align 1
  %1489 = load i64, i64* %92, align 8
  %1490 = load i8*, i8** %21, align 8
  %1491 = getelementptr inbounds i8, i8* %1490, i64 %1489
  store i8* %1491, i8** %21, align 8
  br label %1492

1492:                                             ; preds = %1487, %1457
  %1493 = load i64, i64* %94, align 8
  %1494 = load i64, i64* %20, align 8
  %1495 = add i64 %1494, %1493
  store i64 %1495, i64* %20, align 8
  br label %1496

1496:                                             ; preds = %1492
  br label %2049

1497:                                             ; preds = %282
  br label %1498

1498:                                             ; preds = %1497
  store i32 1, i32* %25, align 4
  %1499 = load %struct.tm*, %struct.tm** %13, align 8
  %1500 = getelementptr inbounds %struct.tm, %struct.tm* %1499, i32 0, i32 6
  %1501 = load i32, i32* %1500, align 8
  %1502 = sub nsw i32 %1501, 1
  %1503 = add nsw i32 %1502, 7
  %1504 = srem i32 %1503, 7
  %1505 = add nsw i32 %1504, 1
  store i32 %1505, i32* %26, align 4
  br label %670

1506:                                             ; No predecessors!
  br label %1507

1507:                                             ; preds = %1506, %282
  %1508 = load i32, i32* %24, align 4
  %1509 = icmp eq i32 %1508, 69
  br i1 %1509, label %1510, label %1511

1510:                                             ; preds = %1507
  br label %1936

1511:                                             ; preds = %1507
  br label %1512

1512:                                             ; preds = %1511
  store i32 2, i32* %25, align 4
  %1513 = load %struct.tm*, %struct.tm** %13, align 8
  %1514 = getelementptr inbounds %struct.tm, %struct.tm* %1513, i32 0, i32 7
  %1515 = load i32, i32* %1514, align 4
  %1516 = load %struct.tm*, %struct.tm** %13, align 8
  %1517 = getelementptr inbounds %struct.tm, %struct.tm* %1516, i32 0, i32 6
  %1518 = load i32, i32* %1517, align 8
  %1519 = sub nsw i32 %1515, %1518
  %1520 = add nsw i32 %1519, 7
  %1521 = sdiv i32 %1520, 7
  store i32 %1521, i32* %26, align 4
  br label %670

1522:                                             ; No predecessors!
  br label %1523

1523:                                             ; preds = %1522, %282, %282, %282
  %1524 = load i32, i32* %24, align 4
  %1525 = icmp eq i32 %1524, 69
  br i1 %1525, label %1526, label %1527

1526:                                             ; preds = %1523
  br label %1936

1527:                                             ; preds = %1523
  %1528 = load %struct.tm*, %struct.tm** %13, align 8
  %1529 = getelementptr inbounds %struct.tm, %struct.tm* %1528, i32 0, i32 5
  %1530 = load i32, i32* %1529, align 4
  %1531 = load %struct.tm*, %struct.tm** %13, align 8
  %1532 = getelementptr inbounds %struct.tm, %struct.tm* %1531, i32 0, i32 5
  %1533 = load i32, i32* %1532, align 4
  %1534 = icmp slt i32 %1533, 0
  %1535 = zext i1 %1534 to i64
  %1536 = select i1 %1534, i32 300, i32 -100
  %1537 = add nsw i32 %1530, %1536
  store i32 %1537, i32* %96, align 4
  store i32 0, i32* %97, align 4
  %1538 = load %struct.tm*, %struct.tm** %13, align 8
  %1539 = getelementptr inbounds %struct.tm, %struct.tm* %1538, i32 0, i32 7
  %1540 = load i32, i32* %1539, align 4
  %1541 = load %struct.tm*, %struct.tm** %13, align 8
  %1542 = getelementptr inbounds %struct.tm, %struct.tm* %1541, i32 0, i32 6
  %1543 = load i32, i32* %1542, align 8
  %1544 = call i32 @iso_week_days(i32 %1540, i32 %1543)
  store i32 %1544, i32* %98, align 4
  %1545 = load i32, i32* %98, align 4
  %1546 = icmp slt i32 %1545, 0
  br i1 %1546, label %1547, label %1576

1547:                                             ; preds = %1527
  store i32 -1, i32* %97, align 4
  %1548 = load %struct.tm*, %struct.tm** %13, align 8
  %1549 = getelementptr inbounds %struct.tm, %struct.tm* %1548, i32 0, i32 7
  %1550 = load i32, i32* %1549, align 4
  %1551 = load i32, i32* %96, align 4
  %1552 = sub nsw i32 %1551, 1
  %1553 = srem i32 %1552, 4
  %1554 = icmp eq i32 %1553, 0
  br i1 %1554, label %1555, label %1567

1555:                                             ; preds = %1547
  %1556 = load i32, i32* %96, align 4
  %1557 = sub nsw i32 %1556, 1
  %1558 = srem i32 %1557, 100
  %1559 = icmp ne i32 %1558, 0
  br i1 %1559, label %1565, label %1560

1560:                                             ; preds = %1555
  %1561 = load i32, i32* %96, align 4
  %1562 = sub nsw i32 %1561, 1
  %1563 = srem i32 %1562, 400
  %1564 = icmp eq i32 %1563, 0
  br label %1565

1565:                                             ; preds = %1560, %1555
  %1566 = phi i1 [ true, %1555 ], [ %1564, %1560 ]
  br label %1567

1567:                                             ; preds = %1565, %1547
  %1568 = phi i1 [ false, %1547 ], [ %1566, %1565 ]
  %1569 = zext i1 %1568 to i32
  %1570 = add nsw i32 365, %1569
  %1571 = add nsw i32 %1550, %1570
  %1572 = load %struct.tm*, %struct.tm** %13, align 8
  %1573 = getelementptr inbounds %struct.tm, %struct.tm* %1572, i32 0, i32 6
  %1574 = load i32, i32* %1573, align 8
  %1575 = call i32 @iso_week_days(i32 %1571, i32 %1574)
  store i32 %1575, i32* %98, align 4
  br label %1607

1576:                                             ; preds = %1527
  %1577 = load %struct.tm*, %struct.tm** %13, align 8
  %1578 = getelementptr inbounds %struct.tm, %struct.tm* %1577, i32 0, i32 7
  %1579 = load i32, i32* %1578, align 4
  %1580 = load i32, i32* %96, align 4
  %1581 = srem i32 %1580, 4
  %1582 = icmp eq i32 %1581, 0
  br i1 %1582, label %1583, label %1593

1583:                                             ; preds = %1576
  %1584 = load i32, i32* %96, align 4
  %1585 = srem i32 %1584, 100
  %1586 = icmp ne i32 %1585, 0
  br i1 %1586, label %1591, label %1587

1587:                                             ; preds = %1583
  %1588 = load i32, i32* %96, align 4
  %1589 = srem i32 %1588, 400
  %1590 = icmp eq i32 %1589, 0
  br label %1591

1591:                                             ; preds = %1587, %1583
  %1592 = phi i1 [ true, %1583 ], [ %1590, %1587 ]
  br label %1593

1593:                                             ; preds = %1591, %1576
  %1594 = phi i1 [ false, %1576 ], [ %1592, %1591 ]
  %1595 = zext i1 %1594 to i32
  %1596 = add nsw i32 365, %1595
  %1597 = sub nsw i32 %1579, %1596
  %1598 = load %struct.tm*, %struct.tm** %13, align 8
  %1599 = getelementptr inbounds %struct.tm, %struct.tm* %1598, i32 0, i32 6
  %1600 = load i32, i32* %1599, align 8
  %1601 = call i32 @iso_week_days(i32 %1597, i32 %1600)
  store i32 %1601, i32* %99, align 4
  %1602 = load i32, i32* %99, align 4
  %1603 = icmp sle i32 0, %1602
  br i1 %1603, label %1604, label %1606

1604:                                             ; preds = %1593
  store i32 1, i32* %97, align 4
  %1605 = load i32, i32* %99, align 4
  store i32 %1605, i32* %98, align 4
  br label %1606

1606:                                             ; preds = %1604, %1593
  br label %1607

1607:                                             ; preds = %1606, %1567
  %1608 = load i8*, i8** %22, align 8
  %1609 = load i8, i8* %1608, align 1
  %1610 = sext i8 %1609 to i32
  switch i32 %1610, label %1658 [
    i32 103, label %1611
    i32 71, label %1642
  ]

1611:                                             ; preds = %1607
  %1612 = load %struct.tm*, %struct.tm** %13, align 8
  %1613 = getelementptr inbounds %struct.tm, %struct.tm* %1612, i32 0, i32 5
  %1614 = load i32, i32* %1613, align 4
  %1615 = srem i32 %1614, 100
  %1616 = load i32, i32* %97, align 4
  %1617 = add nsw i32 %1615, %1616
  %1618 = srem i32 %1617, 100
  store i32 %1618, i32* %100, align 4
  br label %1619

1619:                                             ; preds = %1611
  store i32 2, i32* %25, align 4
  %1620 = load i32, i32* %100, align 4
  %1621 = icmp sle i32 0, %1620
  br i1 %1621, label %1622, label %1624

1622:                                             ; preds = %1619
  %1623 = load i32, i32* %100, align 4
  br label %1639

1624:                                             ; preds = %1619
  %1625 = load %struct.tm*, %struct.tm** %13, align 8
  %1626 = getelementptr inbounds %struct.tm, %struct.tm* %1625, i32 0, i32 5
  %1627 = load i32, i32* %1626, align 4
  %1628 = load i32, i32* %97, align 4
  %1629 = sub nsw i32 -1900, %1628
  %1630 = icmp slt i32 %1627, %1629
  br i1 %1630, label %1631, label %1634

1631:                                             ; preds = %1624
  %1632 = load i32, i32* %100, align 4
  %1633 = sub nsw i32 0, %1632
  br label %1637

1634:                                             ; preds = %1624
  %1635 = load i32, i32* %100, align 4
  %1636 = add nsw i32 %1635, 100
  br label %1637

1637:                                             ; preds = %1634, %1631
  %1638 = phi i32 [ %1633, %1631 ], [ %1636, %1634 ]
  br label %1639

1639:                                             ; preds = %1637, %1622
  %1640 = phi i32 [ %1623, %1622 ], [ %1638, %1637 ]
  store i32 %1640, i32* %26, align 4
  br label %670

1641:                                             ; No predecessors!
  br label %1642

1642:                                             ; preds = %1641, %1607
  br label %1643

1643:                                             ; preds = %1642
  store i32 4, i32* %25, align 4
  %1644 = load %struct.tm*, %struct.tm** %13, align 8
  %1645 = getelementptr inbounds %struct.tm, %struct.tm* %1644, i32 0, i32 5
  %1646 = load i32, i32* %1645, align 4
  %1647 = load i32, i32* %97, align 4
  %1648 = sub nsw i32 -1900, %1647
  %1649 = icmp slt i32 %1646, %1648
  %1650 = zext i1 %1649 to i8
  store i8 %1650, i8* %28, align 1
  %1651 = load %struct.tm*, %struct.tm** %13, align 8
  %1652 = getelementptr inbounds %struct.tm, %struct.tm* %1651, i32 0, i32 5
  %1653 = load i32, i32* %1652, align 4
  %1654 = add i32 %1653, 1900
  %1655 = load i32, i32* %97, align 4
  %1656 = add i32 %1654, %1655
  store i32 %1656, i32* %27, align 4
  br label %675

1657:                                             ; No predecessors!
  br label %1658

1658:                                             ; preds = %1657, %1607
  br label %1659

1659:                                             ; preds = %1658
  store i32 2, i32* %25, align 4
  %1660 = load i32, i32* %98, align 4
  %1661 = sdiv i32 %1660, 7
  %1662 = add nsw i32 %1661, 1
  store i32 %1662, i32* %26, align 4
  br label %670

1663:                                             ; No predecessors!
  br label %1664

1664:                                             ; preds = %1663
  br label %1665

1665:                                             ; preds = %1664, %282
  %1666 = load i32, i32* %24, align 4
  %1667 = icmp eq i32 %1666, 69
  br i1 %1667, label %1668, label %1669

1668:                                             ; preds = %1665
  br label %1936

1669:                                             ; preds = %1665
  br label %1670

1670:                                             ; preds = %1669
  store i32 2, i32* %25, align 4
  %1671 = load %struct.tm*, %struct.tm** %13, align 8
  %1672 = getelementptr inbounds %struct.tm, %struct.tm* %1671, i32 0, i32 7
  %1673 = load i32, i32* %1672, align 4
  %1674 = load %struct.tm*, %struct.tm** %13, align 8
  %1675 = getelementptr inbounds %struct.tm, %struct.tm* %1674, i32 0, i32 6
  %1676 = load i32, i32* %1675, align 8
  %1677 = sub nsw i32 %1676, 1
  %1678 = add nsw i32 %1677, 7
  %1679 = srem i32 %1678, 7
  %1680 = sub nsw i32 %1673, %1679
  %1681 = add nsw i32 %1680, 7
  %1682 = sdiv i32 %1681, 7
  store i32 %1682, i32* %26, align 4
  br label %670

1683:                                             ; No predecessors!
  br label %1684

1684:                                             ; preds = %1683, %282
  %1685 = load i32, i32* %24, align 4
  %1686 = icmp eq i32 %1685, 69
  br i1 %1686, label %1687, label %1688

1687:                                             ; preds = %1684
  br label %1936

1688:                                             ; preds = %1684
  br label %1689

1689:                                             ; preds = %1688
  store i32 1, i32* %25, align 4
  %1690 = load %struct.tm*, %struct.tm** %13, align 8
  %1691 = getelementptr inbounds %struct.tm, %struct.tm* %1690, i32 0, i32 6
  %1692 = load i32, i32* %1691, align 8
  store i32 %1692, i32* %26, align 4
  br label %670

1693:                                             ; No predecessors!
  br label %1694

1694:                                             ; preds = %1693, %282
  %1695 = load i32, i32* %24, align 4
  %1696 = icmp eq i32 %1695, 69
  br i1 %1696, label %1697, label %1698

1697:                                             ; preds = %1694
  br label %484

1698:                                             ; preds = %1694
  %1699 = load i32, i32* %24, align 4
  %1700 = icmp eq i32 %1699, 79
  br i1 %1700, label %1701, label %1702

1701:                                             ; preds = %1698
  br label %1936

1702:                                             ; preds = %1698
  br label %1703

1703:                                             ; preds = %1702
  store i32 4, i32* %25, align 4
  %1704 = load %struct.tm*, %struct.tm** %13, align 8
  %1705 = getelementptr inbounds %struct.tm, %struct.tm* %1704, i32 0, i32 5
  %1706 = load i32, i32* %1705, align 4
  %1707 = icmp slt i32 %1706, -1900
  %1708 = zext i1 %1707 to i8
  store i8 %1708, i8* %28, align 1
  %1709 = load %struct.tm*, %struct.tm** %13, align 8
  %1710 = getelementptr inbounds %struct.tm, %struct.tm* %1709, i32 0, i32 5
  %1711 = load i32, i32* %1710, align 4
  %1712 = add i32 %1711, 1900
  store i32 %1712, i32* %27, align 4
  br label %675

1713:                                             ; No predecessors!
  br label %1714

1714:                                             ; preds = %1713, %282
  %1715 = load i32, i32* %24, align 4
  %1716 = icmp eq i32 %1715, 69
  br i1 %1716, label %1717, label %1718

1717:                                             ; preds = %1714
  br label %484

1718:                                             ; preds = %1714
  %1719 = load %struct.tm*, %struct.tm** %13, align 8
  %1720 = getelementptr inbounds %struct.tm, %struct.tm* %1719, i32 0, i32 5
  %1721 = load i32, i32* %1720, align 4
  %1722 = srem i32 %1721, 100
  store i32 %1722, i32* %101, align 4
  %1723 = load i32, i32* %101, align 4
  %1724 = icmp slt i32 %1723, 0
  br i1 %1724, label %1725, label %1738

1725:                                             ; preds = %1718
  %1726 = load %struct.tm*, %struct.tm** %13, align 8
  %1727 = getelementptr inbounds %struct.tm, %struct.tm* %1726, i32 0, i32 5
  %1728 = load i32, i32* %1727, align 4
  %1729 = icmp slt i32 %1728, -1900
  br i1 %1729, label %1730, label %1733

1730:                                             ; preds = %1725
  %1731 = load i32, i32* %101, align 4
  %1732 = sub nsw i32 0, %1731
  br label %1736

1733:                                             ; preds = %1725
  %1734 = load i32, i32* %101, align 4
  %1735 = add nsw i32 %1734, 100
  br label %1736

1736:                                             ; preds = %1733, %1730
  %1737 = phi i32 [ %1732, %1730 ], [ %1735, %1733 ]
  store i32 %1737, i32* %101, align 4
  br label %1738

1738:                                             ; preds = %1736, %1718
  br label %1739

1739:                                             ; preds = %1738
  store i32 2, i32* %25, align 4
  %1740 = load i32, i32* %101, align 4
  store i32 %1740, i32* %26, align 4
  br label %670

1741:                                             ; No predecessors!
  br label %1742

1742:                                             ; preds = %1741, %282
  %1743 = load i8, i8* %39, align 1
  %1744 = trunc i8 %1743 to i1
  br i1 %1744, label %1745, label %1746

1745:                                             ; preds = %1742
  store i8 0, i8* %37, align 1
  store i8 1, i8* %36, align 1
  br label %1746

1746:                                             ; preds = %1745, %1742
  br label %1747

1747:                                             ; preds = %1746
  %1748 = load i8*, i8** %19, align 8
  %1749 = call i64 @strlen(i8* %1748) #17
  store i64 %1749, i64* %102, align 8
  %1750 = load i32, i32* %35, align 4
  %1751 = icmp slt i32 %1750, 0
  br i1 %1751, label %1752, label %1753

1752:                                             ; preds = %1747
  br label %1755

1753:                                             ; preds = %1747
  %1754 = load i32, i32* %35, align 4
  br label %1755

1755:                                             ; preds = %1753, %1752
  %1756 = phi i32 [ 0, %1752 ], [ %1754, %1753 ]
  %1757 = sext i32 %1756 to i64
  store i64 %1757, i64* %103, align 8
  %1758 = load i64, i64* %102, align 8
  %1759 = load i64, i64* %103, align 8
  %1760 = icmp ult i64 %1758, %1759
  br i1 %1760, label %1761, label %1763

1761:                                             ; preds = %1755
  %1762 = load i64, i64* %103, align 8
  br label %1765

1763:                                             ; preds = %1755
  %1764 = load i64, i64* %102, align 8
  br label %1765

1765:                                             ; preds = %1763, %1761
  %1766 = phi i64 [ %1762, %1761 ], [ %1764, %1763 ]
  store i64 %1766, i64* %104, align 8
  %1767 = load i64, i64* %104, align 8
  %1768 = load i64, i64* %11, align 8
  %1769 = load i64, i64* %20, align 8
  %1770 = sub i64 %1768, %1769
  %1771 = icmp uge i64 %1767, %1770
  br i1 %1771, label %1772, label %1773

1772:                                             ; preds = %1765
  store i64 0, i64* %9, align 8
  br label %2063

1773:                                             ; preds = %1765
  %1774 = load i8*, i8** %21, align 8
  %1775 = icmp ne i8* %1774, null
  br i1 %1775, label %1776, label %1828

1776:                                             ; preds = %1773
  %1777 = load i32, i32* %25, align 4
  %1778 = icmp eq i32 %1777, 0
  br i1 %1778, label %1779, label %1803

1779:                                             ; preds = %1776
  %1780 = load i64, i64* %102, align 8
  %1781 = load i64, i64* %103, align 8
  %1782 = icmp ult i64 %1780, %1781
  br i1 %1782, label %1783, label %1803

1783:                                             ; preds = %1779
  %1784 = load i32, i32* %35, align 4
  %1785 = sext i32 %1784 to i64
  %1786 = load i64, i64* %102, align 8
  %1787 = sub i64 %1785, %1786
  store i64 %1787, i64* %105, align 8
  %1788 = load i32, i32* %23, align 4
  %1789 = icmp eq i32 %1788, 48
  br i1 %1789, label %1790, label %1796

1790:                                             ; preds = %1783
  %1791 = load i8*, i8** %21, align 8
  %1792 = load i64, i64* %105, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %1791, i8 48, i64 %1792, i1 false)
  %1793 = load i64, i64* %105, align 8
  %1794 = load i8*, i8** %21, align 8
  %1795 = getelementptr inbounds i8, i8* %1794, i64 %1793
  store i8* %1795, i8** %21, align 8
  br label %1802

1796:                                             ; preds = %1783
  %1797 = load i8*, i8** %21, align 8
  %1798 = load i64, i64* %105, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %1797, i8 32, i64 %1798, i1 false)
  %1799 = load i64, i64* %105, align 8
  %1800 = load i8*, i8** %21, align 8
  %1801 = getelementptr inbounds i8, i8* %1800, i64 %1799
  store i8* %1801, i8** %21, align 8
  br label %1802

1802:                                             ; preds = %1796, %1790
  br label %1803

1803:                                             ; preds = %1802, %1779, %1776
  %1804 = load i8, i8* %36, align 1
  %1805 = trunc i8 %1804 to i1
  br i1 %1805, label %1806, label %1811

1806:                                             ; preds = %1803
  %1807 = load i8*, i8** %21, align 8
  %1808 = load i8*, i8** %19, align 8
  %1809 = load i64, i64* %102, align 8
  %1810 = call i8* @memcpy_lowcase(i8* %1807, i8* %1808, i64 %1809)
  br label %1824

1811:                                             ; preds = %1803
  %1812 = load i8, i8* %37, align 1
  %1813 = trunc i8 %1812 to i1
  br i1 %1813, label %1814, label %1819

1814:                                             ; preds = %1811
  %1815 = load i8*, i8** %21, align 8
  %1816 = load i8*, i8** %19, align 8
  %1817 = load i64, i64* %102, align 8
  %1818 = call i8* @memcpy_uppcase(i8* %1815, i8* %1816, i64 %1817)
  br label %1823

1819:                                             ; preds = %1811
  %1820 = load i8*, i8** %21, align 8
  %1821 = load i8*, i8** %19, align 8
  %1822 = load i64, i64* %102, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1820, i8* align 1 %1821, i64 %1822, i1 false)
  br label %1823

1823:                                             ; preds = %1819, %1814
  br label %1824

1824:                                             ; preds = %1823, %1806
  %1825 = load i64, i64* %102, align 8
  %1826 = load i8*, i8** %21, align 8
  %1827 = getelementptr inbounds i8, i8* %1826, i64 %1825
  store i8* %1827, i8** %21, align 8
  br label %1828

1828:                                             ; preds = %1824, %1773
  %1829 = load i64, i64* %104, align 8
  %1830 = load i64, i64* %20, align 8
  %1831 = add i64 %1830, %1829
  store i64 %1831, i64* %20, align 8
  br label %1832

1832:                                             ; preds = %1828
  br label %2049

1833:                                             ; preds = %282
  store i64 1, i64* %38, align 8
  br label %1834

1834:                                             ; preds = %1842, %1833
  %1835 = load i8*, i8** %22, align 8
  %1836 = load i64, i64* %38, align 8
  %1837 = getelementptr inbounds i8, i8* %1835, i64 %1836
  %1838 = load i8, i8* %1837, align 1
  %1839 = sext i8 %1838 to i32
  %1840 = icmp eq i32 %1839, 58
  br i1 %1840, label %1841, label %1845

1841:                                             ; preds = %1834
  br label %1842

1842:                                             ; preds = %1841
  %1843 = load i64, i64* %38, align 8
  %1844 = add i64 %1843, 1
  store i64 %1844, i64* %38, align 8
  br label %1834, !llvm.loop !112

1845:                                             ; preds = %1834
  %1846 = load i8*, i8** %22, align 8
  %1847 = load i64, i64* %38, align 8
  %1848 = getelementptr inbounds i8, i8* %1846, i64 %1847
  %1849 = load i8, i8* %1848, align 1
  %1850 = sext i8 %1849 to i32
  %1851 = icmp ne i32 %1850, 122
  br i1 %1851, label %1852, label %1853

1852:                                             ; preds = %1845
  br label %1936

1853:                                             ; preds = %1845
  %1854 = load i64, i64* %38, align 8
  %1855 = load i8*, i8** %22, align 8
  %1856 = getelementptr inbounds i8, i8* %1855, i64 %1854
  store i8* %1856, i8** %22, align 8
  br label %1858

1857:                                             ; preds = %282
  store i64 0, i64* %38, align 8
  br label %1858

1858:                                             ; preds = %1857, %1853
  %1859 = load %struct.tm*, %struct.tm** %13, align 8
  %1860 = getelementptr inbounds %struct.tm, %struct.tm* %1859, i32 0, i32 8
  %1861 = load i32, i32* %1860, align 8
  %1862 = icmp slt i32 %1861, 0
  br i1 %1862, label %1863, label %1864

1863:                                             ; preds = %1858
  br label %2049

1864:                                             ; preds = %1858
  %1865 = load %struct.tm*, %struct.tm** %13, align 8
  %1866 = getelementptr inbounds %struct.tm, %struct.tm* %1865, i32 0, i32 9
  %1867 = load i64, i64* %1866, align 8
  %1868 = trunc i64 %1867 to i32
  store i32 %1868, i32* %106, align 4
  %1869 = load i32, i32* %106, align 4
  %1870 = icmp slt i32 %1869, 0
  br i1 %1870, label %1881, label %1871

1871:                                             ; preds = %1864
  %1872 = load i32, i32* %106, align 4
  %1873 = icmp eq i32 %1872, 0
  br i1 %1873, label %1874, label %1879

1874:                                             ; preds = %1871
  %1875 = load i8*, i8** %19, align 8
  %1876 = load i8, i8* %1875, align 1
  %1877 = sext i8 %1876 to i32
  %1878 = icmp eq i32 %1877, 45
  br label %1879

1879:                                             ; preds = %1874, %1871
  %1880 = phi i1 [ false, %1871 ], [ %1878, %1874 ]
  br label %1881

1881:                                             ; preds = %1879, %1864
  %1882 = phi i1 [ true, %1864 ], [ %1880, %1879 ]
  %1883 = zext i1 %1882 to i8
  store i8 %1883, i8* %28, align 1
  %1884 = load i32, i32* %106, align 4
  %1885 = sdiv i32 %1884, 60
  %1886 = sdiv i32 %1885, 60
  store i32 %1886, i32* %107, align 4
  %1887 = load i32, i32* %106, align 4
  %1888 = sdiv i32 %1887, 60
  %1889 = srem i32 %1888, 60
  store i32 %1889, i32* %108, align 4
  %1890 = load i32, i32* %106, align 4
  %1891 = srem i32 %1890, 60
  store i32 %1891, i32* %109, align 4
  %1892 = load i64, i64* %38, align 8
  switch i64 %1892, label %1931 [
    i64 0, label %1893
    i64 1, label %1900
    i64 2, label %1908
    i64 3, label %1919
  ]

1893:                                             ; preds = %1881
  br label %1894

1894:                                             ; preds = %1893
  store i32 5, i32* %25, align 4
  store i32 0, i32* %30, align 4
  %1895 = load i32, i32* %107, align 4
  %1896 = mul nsw i32 %1895, 100
  %1897 = load i32, i32* %108, align 4
  %1898 = add nsw i32 %1896, %1897
  store i32 %1898, i32* %27, align 4
  br label %661

1899:                                             ; No predecessors!
  br label %1900

1900:                                             ; preds = %1899, %1881
  br label %1901

1901:                                             ; preds = %1926, %1900
  br label %1902

1902:                                             ; preds = %1901
  store i32 6, i32* %25, align 4
  store i32 4, i32* %30, align 4
  %1903 = load i32, i32* %107, align 4
  %1904 = mul nsw i32 %1903, 100
  %1905 = load i32, i32* %108, align 4
  %1906 = add nsw i32 %1904, %1905
  store i32 %1906, i32* %27, align 4
  br label %661

1907:                                             ; No predecessors!
  br label %1908

1908:                                             ; preds = %1907, %1881
  br label %1909

1909:                                             ; preds = %1922, %1908
  br label %1910

1910:                                             ; preds = %1909
  store i32 9, i32* %25, align 4
  store i32 20, i32* %30, align 4
  %1911 = load i32, i32* %107, align 4
  %1912 = mul nsw i32 %1911, 10000
  %1913 = load i32, i32* %108, align 4
  %1914 = mul nsw i32 %1913, 100
  %1915 = add nsw i32 %1912, %1914
  %1916 = load i32, i32* %109, align 4
  %1917 = add nsw i32 %1915, %1916
  store i32 %1917, i32* %27, align 4
  br label %661

1918:                                             ; No predecessors!
  br label %1919

1919:                                             ; preds = %1918, %1881
  %1920 = load i32, i32* %109, align 4
  %1921 = icmp ne i32 %1920, 0
  br i1 %1921, label %1922, label %1923

1922:                                             ; preds = %1919
  br label %1909

1923:                                             ; preds = %1919
  %1924 = load i32, i32* %108, align 4
  %1925 = icmp ne i32 %1924, 0
  br i1 %1925, label %1926, label %1927

1926:                                             ; preds = %1923
  br label %1901

1927:                                             ; preds = %1923
  br label %1928

1928:                                             ; preds = %1927
  store i32 3, i32* %25, align 4
  store i32 0, i32* %30, align 4
  %1929 = load i32, i32* %107, align 4
  store i32 %1929, i32* %27, align 4
  br label %661

1930:                                             ; No predecessors!
  br label %1931

1931:                                             ; preds = %1930, %1881
  br label %1936

1932:                                             ; preds = %282
  %1933 = load i8*, i8** %22, align 8
  %1934 = getelementptr inbounds i8, i8* %1933, i32 -1
  store i8* %1934, i8** %22, align 8
  br label %1935

1935:                                             ; preds = %1932, %282
  br label %1936

1936:                                             ; preds = %1935, %1931, %1852, %1701, %1687, %1668, %1526, %1510, %1429, %1385, %1277, %1261, %1251, %1235, %1227, %1217, %1209, %1199, %1194, %654, %644, %639, %634, %397, %388, %383, %370, %361, %290
  store i32 1, i32* %110, align 4
  br label %1937

1937:                                             ; preds = %1947, %1936
  %1938 = load i8*, i8** %22, align 8
  %1939 = load i32, i32* %110, align 4
  %1940 = sub nsw i32 1, %1939
  %1941 = sext i32 %1940 to i64
  %1942 = getelementptr inbounds i8, i8* %1938, i64 %1941
  %1943 = load i8, i8* %1942, align 1
  %1944 = sext i8 %1943 to i32
  %1945 = icmp ne i32 %1944, 37
  br i1 %1945, label %1946, label %1950

1946:                                             ; preds = %1937
  br label %1947

1947:                                             ; preds = %1946
  %1948 = load i32, i32* %110, align 4
  %1949 = add nsw i32 %1948, 1
  store i32 %1949, i32* %110, align 4
  br label %1937, !llvm.loop !113

1950:                                             ; preds = %1937
  br label %1951

1951:                                             ; preds = %1950
  %1952 = load i32, i32* %110, align 4
  %1953 = sext i32 %1952 to i64
  store i64 %1953, i64* %111, align 8
  %1954 = load i32, i32* %35, align 4
  %1955 = icmp slt i32 %1954, 0
  br i1 %1955, label %1956, label %1957

1956:                                             ; preds = %1951
  br label %1959

1957:                                             ; preds = %1951
  %1958 = load i32, i32* %35, align 4
  br label %1959

1959:                                             ; preds = %1957, %1956
  %1960 = phi i32 [ 0, %1956 ], [ %1958, %1957 ]
  %1961 = sext i32 %1960 to i64
  store i64 %1961, i64* %112, align 8
  %1962 = load i64, i64* %111, align 8
  %1963 = load i64, i64* %112, align 8
  %1964 = icmp ult i64 %1962, %1963
  br i1 %1964, label %1965, label %1967

1965:                                             ; preds = %1959
  %1966 = load i64, i64* %112, align 8
  br label %1969

1967:                                             ; preds = %1959
  %1968 = load i64, i64* %111, align 8
  br label %1969

1969:                                             ; preds = %1967, %1965
  %1970 = phi i64 [ %1966, %1965 ], [ %1968, %1967 ]
  store i64 %1970, i64* %113, align 8
  %1971 = load i64, i64* %113, align 8
  %1972 = load i64, i64* %11, align 8
  %1973 = load i64, i64* %20, align 8
  %1974 = sub i64 %1972, %1973
  %1975 = icmp uge i64 %1971, %1974
  br i1 %1975, label %1976, label %1977

1976:                                             ; preds = %1969
  store i64 0, i64* %9, align 8
  br label %2063

1977:                                             ; preds = %1969
  %1978 = load i8*, i8** %21, align 8
  %1979 = icmp ne i8* %1978, null
  br i1 %1979, label %1980, label %2044

1980:                                             ; preds = %1977
  %1981 = load i32, i32* %25, align 4
  %1982 = icmp eq i32 %1981, 0
  br i1 %1982, label %1983, label %2007

1983:                                             ; preds = %1980
  %1984 = load i64, i64* %111, align 8
  %1985 = load i64, i64* %112, align 8
  %1986 = icmp ult i64 %1984, %1985
  br i1 %1986, label %1987, label %2007

1987:                                             ; preds = %1983
  %1988 = load i32, i32* %35, align 4
  %1989 = sext i32 %1988 to i64
  %1990 = load i64, i64* %111, align 8
  %1991 = sub i64 %1989, %1990
  store i64 %1991, i64* %114, align 8
  %1992 = load i32, i32* %23, align 4
  %1993 = icmp eq i32 %1992, 48
  br i1 %1993, label %1994, label %2000

1994:                                             ; preds = %1987
  %1995 = load i8*, i8** %21, align 8
  %1996 = load i64, i64* %114, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %1995, i8 48, i64 %1996, i1 false)
  %1997 = load i64, i64* %114, align 8
  %1998 = load i8*, i8** %21, align 8
  %1999 = getelementptr inbounds i8, i8* %1998, i64 %1997
  store i8* %1999, i8** %21, align 8
  br label %2006

2000:                                             ; preds = %1987
  %2001 = load i8*, i8** %21, align 8
  %2002 = load i64, i64* %114, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %2001, i8 32, i64 %2002, i1 false)
  %2003 = load i64, i64* %114, align 8
  %2004 = load i8*, i8** %21, align 8
  %2005 = getelementptr inbounds i8, i8* %2004, i64 %2003
  store i8* %2005, i8** %21, align 8
  br label %2006

2006:                                             ; preds = %2000, %1994
  br label %2007

2007:                                             ; preds = %2006, %1983, %1980
  %2008 = load i8, i8* %36, align 1
  %2009 = trunc i8 %2008 to i1
  br i1 %2009, label %2010, label %2019

2010:                                             ; preds = %2007
  %2011 = load i8*, i8** %21, align 8
  %2012 = load i8*, i8** %22, align 8
  %2013 = load i32, i32* %110, align 4
  %2014 = sub nsw i32 1, %2013
  %2015 = sext i32 %2014 to i64
  %2016 = getelementptr inbounds i8, i8* %2012, i64 %2015
  %2017 = load i64, i64* %111, align 8
  %2018 = call i8* @memcpy_lowcase(i8* %2011, i8* %2016, i64 %2017)
  br label %2040

2019:                                             ; preds = %2007
  %2020 = load i8, i8* %37, align 1
  %2021 = trunc i8 %2020 to i1
  br i1 %2021, label %2022, label %2031

2022:                                             ; preds = %2019
  %2023 = load i8*, i8** %21, align 8
  %2024 = load i8*, i8** %22, align 8
  %2025 = load i32, i32* %110, align 4
  %2026 = sub nsw i32 1, %2025
  %2027 = sext i32 %2026 to i64
  %2028 = getelementptr inbounds i8, i8* %2024, i64 %2027
  %2029 = load i64, i64* %111, align 8
  %2030 = call i8* @memcpy_uppcase(i8* %2023, i8* %2028, i64 %2029)
  br label %2039

2031:                                             ; preds = %2019
  %2032 = load i8*, i8** %21, align 8
  %2033 = load i8*, i8** %22, align 8
  %2034 = load i32, i32* %110, align 4
  %2035 = sub nsw i32 1, %2034
  %2036 = sext i32 %2035 to i64
  %2037 = getelementptr inbounds i8, i8* %2033, i64 %2036
  %2038 = load i64, i64* %111, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2032, i8* align 1 %2037, i64 %2038, i1 false)
  br label %2039

2039:                                             ; preds = %2031, %2022
  br label %2040

2040:                                             ; preds = %2039, %2010
  %2041 = load i64, i64* %111, align 8
  %2042 = load i8*, i8** %21, align 8
  %2043 = getelementptr inbounds i8, i8* %2042, i64 %2041
  store i8* %2043, i8** %21, align 8
  br label %2044

2044:                                             ; preds = %2040, %1977
  %2045 = load i64, i64* %113, align 8
  %2046 = load i64, i64* %20, align 8
  %2047 = add i64 %2046, %2045
  store i64 %2047, i64* %20, align 8
  br label %2048

2048:                                             ; preds = %2044
  br label %2049

2049:                                             ; preds = %2048, %1863, %1832, %1496, %1379, %1364, %1190, %599, %483, %357
  br label %2050

2050:                                             ; preds = %2049, %218
  %2051 = load i8*, i8** %22, align 8
  %2052 = getelementptr inbounds i8, i8* %2051, i32 1
  store i8* %2052, i8** %22, align 8
  br label %139, !llvm.loop !114

2053:                                             ; preds = %139
  %2054 = load i8*, i8** %21, align 8
  %2055 = icmp ne i8* %2054, null
  br i1 %2055, label %2056, label %2061

2056:                                             ; preds = %2053
  %2057 = load i64, i64* %11, align 8
  %2058 = icmp ne i64 %2057, 0
  br i1 %2058, label %2059, label %2061

2059:                                             ; preds = %2056
  %2060 = load i8*, i8** %21, align 8
  store i8 0, i8* %2060, align 1
  br label %2061

2061:                                             ; preds = %2059, %2056, %2053
  %2062 = load i64, i64* %20, align 8
  store i64 %2062, i64* %9, align 8
  br label %2063

2063:                                             ; preds = %2061, %1976, %1772, %1456, %1324, %1130, %1056, %970, %942, %892, %839, %766, %535, %432, %315, %176
  %2064 = load i64, i64* %9, align 8
  ret i64 %2064
}

; Function Attrs: nounwind
declare dso_local i64 @strftime(i8*, i64, i8*, %struct.tm*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @memcpy_lowcase(i8* %0, i8* %1, i64 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i64 %2, i64* %6, align 8
  br label %7

7:                                                ; preds = %11, %3
  %8 = load i64, i64* %6, align 8
  %9 = add i64 %8, -1
  store i64 %9, i64* %6, align 8
  %10 = icmp ugt i64 %8, 0
  br i1 %10, label %11, label %22

11:                                               ; preds = %7
  %12 = load i8*, i8** %5, align 8
  %13 = load i64, i64* %6, align 8
  %14 = getelementptr inbounds i8, i8* %12, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = call i32 @tolower(i32 %16) #17
  %18 = trunc i32 %17 to i8
  %19 = load i8*, i8** %4, align 8
  %20 = load i64, i64* %6, align 8
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  store i8 %18, i8* %21, align 1
  br label %7, !llvm.loop !115

22:                                               ; preds = %7
  %23 = load i8*, i8** %4, align 8
  ret i8* %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @memcpy_uppcase(i8* %0, i8* %1, i64 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i64 %2, i64* %6, align 8
  br label %7

7:                                                ; preds = %11, %3
  %8 = load i64, i64* %6, align 8
  %9 = add i64 %8, -1
  store i64 %9, i64* %6, align 8
  %10 = icmp ugt i64 %8, 0
  br i1 %10, label %11, label %22

11:                                               ; preds = %7
  %12 = load i8*, i8** %5, align 8
  %13 = load i64, i64* %6, align 8
  %14 = getelementptr inbounds i8, i8* %12, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = call i32 @toupper(i32 %16) #17
  %18 = trunc i32 %17 to i8
  %19 = load i8*, i8** %4, align 8
  %20 = load i64, i64* %6, align 8
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  store i8 %18, i8* %21, align 1
  br label %7, !llvm.loop !116

22:                                               ; preds = %7
  %23 = load i8*, i8** %4, align 8
  ret i8* %23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @iso_week_days(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 378, i32* %5, align 4
  %6 = load i32, i32* %3, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = sub nsw i32 %7, %8
  %10 = add nsw i32 %9, 4
  %11 = load i32, i32* %5, align 4
  %12 = add nsw i32 %10, %11
  %13 = srem i32 %12, 7
  %14 = sub nsw i32 %6, %13
  %15 = add nsw i32 %14, 4
  %16 = sub nsw i32 %15, 1
  ret i32 %16
}

; Function Attrs: nounwind readonly
declare dso_local i32 @toupper(i32) #4

; Function Attrs: nounwind readonly
declare dso_local i32 @tolower(i32) #4

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %5 = load i8*, i8** %2, align 8
  %6 = icmp eq i8* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %9 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.362, i64 0, i64 0), %struct._IO_FILE* %8)
  call void @abort() #16
  unreachable

10:                                               ; preds = %1
  %11 = load i8*, i8** %2, align 8
  %12 = call i8* @strrchr(i8* %11, i32 47) #17
  store i8* %12, i8** %3, align 8
  %13 = load i8*, i8** %3, align 8
  %14 = icmp ne i8* %13, null
  br i1 %14, label %15, label %18

15:                                               ; preds = %10
  %16 = load i8*, i8** %3, align 8
  %17 = getelementptr inbounds i8, i8* %16, i64 1
  br label %20

18:                                               ; preds = %10
  %19 = load i8*, i8** %2, align 8
  br label %20

20:                                               ; preds = %18, %15
  %21 = phi i8* [ %17, %15 ], [ %19, %18 ]
  store i8* %21, i8** %4, align 8
  %22 = load i8*, i8** %4, align 8
  %23 = load i8*, i8** %2, align 8
  %24 = ptrtoint i8* %22 to i64
  %25 = ptrtoint i8* %23 to i64
  %26 = sub i64 %24, %25
  %27 = icmp sge i64 %26, 7
  br i1 %27, label %28, label %43

28:                                               ; preds = %20
  %29 = load i8*, i8** %4, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 -7
  %31 = call i32 @strncmp(i8* %30, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.363, i64 0, i64 0), i64 7) #17
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %43

33:                                               ; preds = %28
  %34 = load i8*, i8** %4, align 8
  store i8* %34, i8** %2, align 8
  %35 = load i8*, i8** %4, align 8
  %36 = call i32 @strncmp(i8* %35, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.364, i64 0, i64 0), i64 3) #17
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %42

38:                                               ; preds = %33
  %39 = load i8*, i8** %4, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 3
  store i8* %40, i8** %2, align 8
  %41 = load i8*, i8** %2, align 8
  store i8* %41, i8** @program_invocation_short_name, align 8
  br label %42

42:                                               ; preds = %38, %33
  br label %43

43:                                               ; preds = %42, %28, %20
  %44 = load i8*, i8** %2, align 8
  store i8* %44, i8** @program_name, align 8
  %45 = load i8*, i8** %2, align 8
  store i8* %45, i8** @program_invocation_name, align 8
  ret void
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.quoting_options* @clone_quoting_options(%struct.quoting_options* %0) #0 {
  %2 = alloca %struct.quoting_options*, align 8
  %3 = alloca i32, align 4
  %4 = alloca %struct.quoting_options*, align 8
  store %struct.quoting_options* %0, %struct.quoting_options** %2, align 8
  %5 = call i32* @__errno_location() #18
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %3, align 4
  %7 = load %struct.quoting_options*, %struct.quoting_options** %2, align 8
  %8 = icmp ne %struct.quoting_options* %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = load %struct.quoting_options*, %struct.quoting_options** %2, align 8
  br label %12

11:                                               ; preds = %1
  br label %12

12:                                               ; preds = %11, %9
  %13 = phi %struct.quoting_options* [ %10, %9 ], [ @default_quoting_options, %11 ]
  %14 = bitcast %struct.quoting_options* %13 to i8*
  %15 = call i8* @xmemdup(i8* %14, i64 56)
  %16 = bitcast i8* %15 to %struct.quoting_options*
  store %struct.quoting_options* %16, %struct.quoting_options** %4, align 8
  %17 = load i32, i32* %3, align 4
  %18 = call i32* @__errno_location() #18
  store i32 %17, i32* %18, align 4
  %19 = load %struct.quoting_options*, %struct.quoting_options** %4, align 8
  ret %struct.quoting_options* %19
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @get_quoting_style(%struct.quoting_options* %0) #0 {
  %2 = alloca %struct.quoting_options*, align 8
  store %struct.quoting_options* %0, %struct.quoting_options** %2, align 8
  %3 = load %struct.quoting_options*, %struct.quoting_options** %2, align 8
  %4 = icmp ne %struct.quoting_options* %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = load %struct.quoting_options*, %struct.quoting_options** %2, align 8
  br label %8

7:                                                ; preds = %1
  br label %8

8:                                                ; preds = %7, %5
  %9 = phi %struct.quoting_options* [ %6, %5 ], [ @default_quoting_options, %7 ]
  %10 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %9, i32 0, i32 0
  %11 = load i32, i32* %10, align 8
  ret i32 %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_quoting_style(%struct.quoting_options* %0, i32 %1) #0 {
  %3 = alloca %struct.quoting_options*, align 8
  %4 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %6 = load %struct.quoting_options*, %struct.quoting_options** %3, align 8
  %7 = icmp ne %struct.quoting_options* %6, null
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = load %struct.quoting_options*, %struct.quoting_options** %3, align 8
  br label %11

10:                                               ; preds = %2
  br label %11

11:                                               ; preds = %10, %8
  %12 = phi %struct.quoting_options* [ %9, %8 ], [ @default_quoting_options, %10 ]
  %13 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %12, i32 0, i32 0
  store i32 %5, i32* %13, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options* %0, i8 signext %1, i32 %2) #0 {
  %4 = alloca %struct.quoting_options*, align 8
  %5 = alloca i8, align 1
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %4, align 8
  store i8 %1, i8* %5, align 1
  store i32 %2, i32* %6, align 4
  %11 = load i8, i8* %5, align 1
  store i8 %11, i8* %7, align 1
  %12 = load %struct.quoting_options*, %struct.quoting_options** %4, align 8
  %13 = icmp ne %struct.quoting_options* %12, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %3
  %15 = load %struct.quoting_options*, %struct.quoting_options** %4, align 8
  br label %17

16:                                               ; preds = %3
  br label %17

17:                                               ; preds = %16, %14
  %18 = phi %struct.quoting_options* [ %15, %14 ], [ @default_quoting_options, %16 ]
  %19 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %18, i32 0, i32 2
  %20 = getelementptr inbounds [8 x i32], [8 x i32]* %19, i64 0, i64 0
  %21 = load i8, i8* %7, align 1
  %22 = zext i8 %21 to i64
  %23 = udiv i64 %22, 32
  %24 = getelementptr inbounds i32, i32* %20, i64 %23
  store i32* %24, i32** %8, align 8
  %25 = load i8, i8* %7, align 1
  %26 = zext i8 %25 to i64
  %27 = urem i64 %26, 32
  %28 = trunc i64 %27 to i32
  store i32 %28, i32* %9, align 4
  %29 = load i32*, i32** %8, align 8
  %30 = load i32, i32* %29, align 4
  %31 = load i32, i32* %9, align 4
  %32 = lshr i32 %30, %31
  %33 = and i32 %32, 1
  store i32 %33, i32* %10, align 4
  %34 = load i32, i32* %6, align 4
  %35 = and i32 %34, 1
  %36 = load i32, i32* %10, align 4
  %37 = xor i32 %35, %36
  %38 = load i32, i32* %9, align 4
  %39 = shl i32 %37, %38
  %40 = load i32*, i32** %8, align 8
  %41 = load i32, i32* %40, align 4
  %42 = xor i32 %41, %39
  store i32 %42, i32* %40, align 4
  %43 = load i32, i32* %10, align 4
  ret i32 %43
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer(i8* %0, i64 %1, i8* %2, i64 %3, %struct.quoting_options* %4) #0 {
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca %struct.quoting_options*, align 8
  %11 = alloca %struct.quoting_options*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  store i8* %0, i8** %6, align 8
  store i64 %1, i64* %7, align 8
  store i8* %2, i8** %8, align 8
  store i64 %3, i64* %9, align 8
  store %struct.quoting_options* %4, %struct.quoting_options** %10, align 8
  %14 = load %struct.quoting_options*, %struct.quoting_options** %10, align 8
  %15 = icmp ne %struct.quoting_options* %14, null
  br i1 %15, label %16, label %18

16:                                               ; preds = %5
  %17 = load %struct.quoting_options*, %struct.quoting_options** %10, align 8
  br label %19

18:                                               ; preds = %5
  br label %19

19:                                               ; preds = %18, %16
  %20 = phi %struct.quoting_options* [ %17, %16 ], [ @default_quoting_options, %18 ]
  store %struct.quoting_options* %20, %struct.quoting_options** %11, align 8
  %21 = call i32* @__errno_location() #18
  %22 = load i32, i32* %21, align 4
  store i32 %22, i32* %12, align 4
  %23 = load i8*, i8** %6, align 8
  %24 = load i64, i64* %7, align 8
  %25 = load i8*, i8** %8, align 8
  %26 = load i64, i64* %9, align 8
  %27 = load %struct.quoting_options*, %struct.quoting_options** %11, align 8
  %28 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %27, i32 0, i32 0
  %29 = load i32, i32* %28, align 8
  %30 = load %struct.quoting_options*, %struct.quoting_options** %11, align 8
  %31 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %30, i32 0, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = load %struct.quoting_options*, %struct.quoting_options** %11, align 8
  %34 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %33, i32 0, i32 2
  %35 = getelementptr inbounds [8 x i32], [8 x i32]* %34, i64 0, i64 0
  %36 = load %struct.quoting_options*, %struct.quoting_options** %11, align 8
  %37 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %36, i32 0, i32 3
  %38 = load i8*, i8** %37, align 8
  %39 = load %struct.quoting_options*, %struct.quoting_options** %11, align 8
  %40 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %39, i32 0, i32 4
  %41 = load i8*, i8** %40, align 8
  %42 = call i64 @quotearg_buffer_restyled(i8* %23, i64 %24, i8* %25, i64 %26, i32 %29, i32 %32, i32* %35, i8* %38, i8* %41)
  store i64 %42, i64* %13, align 8
  %43 = load i32, i32* %12, align 4
  %44 = call i32* @__errno_location() #18
  store i32 %43, i32* %44, align 4
  %45 = load i64, i64* %13, align 8
  ret i64 %45
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8* %0, i64 %1, i8* %2, i64 %3, i32 %4, i32 %5, i32* %6, i8* %7, i8* %8) #0 {
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i8*, align 8
  %24 = alloca i64, align 8
  %25 = alloca i8, align 1
  %26 = alloca i8, align 1
  %27 = alloca i8, align 1
  %28 = alloca i8, align 1
  %29 = alloca i8, align 1
  %30 = alloca i8, align 1
  %31 = alloca i8, align 1
  %32 = alloca i8, align 1
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i64, align 8
  %37 = alloca i8, align 1
  %38 = alloca %struct.__mbstate_t, align 4
  %39 = alloca i32, align 4
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  store i8* %0, i8** %11, align 8
  store i64 %1, i64* %12, align 8
  store i8* %2, i8** %13, align 8
  store i64 %3, i64* %14, align 8
  store i32 %4, i32* %15, align 4
  store i32 %5, i32* %16, align 4
  store i32* %6, i32** %17, align 8
  store i8* %7, i8** %18, align 8
  store i8* %8, i8** %19, align 8
  store i64 0, i64* %21, align 8
  store i64 0, i64* %22, align 8
  store i8* null, i8** %23, align 8
  store i64 0, i64* %24, align 8
  store i8 0, i8* %25, align 1
  %43 = call i64 @__ctype_get_mb_cur_max() #14
  %44 = icmp eq i64 %43, 1
  %45 = zext i1 %44 to i8
  store i8 %45, i8* %26, align 1
  %46 = load i32, i32* %16, align 4
  %47 = and i32 %46, 2
  %48 = icmp ne i32 %47, 0
  %49 = zext i1 %48 to i8
  store i8 %49, i8* %27, align 1
  store i8 0, i8* %28, align 1
  store i8 0, i8* %29, align 1
  store i8 1, i8* %30, align 1
  br label %50

50:                                               ; preds = %1042, %9
  %51 = load i32, i32* %15, align 4
  switch i32 %51, label %136 [
    i32 6, label %52
    i32 5, label %53
    i32 7, label %70
    i32 8, label %71
    i32 9, label %71
    i32 10, label %71
    i32 3, label %111
    i32 1, label %112
    i32 4, label %113
    i32 2, label %118
    i32 0, label %135
  ]

52:                                               ; preds = %50
  store i32 5, i32* %15, align 4
  store i8 1, i8* %27, align 1
  br label %53

53:                                               ; preds = %52, %50
  %54 = load i8, i8* %27, align 1
  %55 = trunc i8 %54 to i1
  br i1 %55, label %69, label %56

56:                                               ; preds = %53
  br label %57

57:                                               ; preds = %56
  %58 = load i64, i64* %21, align 8
  %59 = load i64, i64* %12, align 8
  %60 = icmp ult i64 %58, %59
  br i1 %60, label %61, label %65

61:                                               ; preds = %57
  %62 = load i8*, i8** %11, align 8
  %63 = load i64, i64* %21, align 8
  %64 = getelementptr inbounds i8, i8* %62, i64 %63
  store i8 34, i8* %64, align 1
  br label %65

65:                                               ; preds = %61, %57
  %66 = load i64, i64* %21, align 8
  %67 = add i64 %66, 1
  store i64 %67, i64* %21, align 8
  br label %68

68:                                               ; preds = %65
  br label %69

69:                                               ; preds = %68, %53
  store i8 1, i8* %25, align 1
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.377, i64 0, i64 0), i8** %23, align 8
  store i64 1, i64* %24, align 8
  br label %137

70:                                               ; preds = %50
  store i8 1, i8* %25, align 1
  store i8 0, i8* %27, align 1
  br label %137

71:                                               ; preds = %50, %50, %50
  %72 = load i32, i32* %15, align 4
  %73 = icmp ne i32 %72, 10
  br i1 %73, label %74, label %79

74:                                               ; preds = %71
  %75 = load i32, i32* %15, align 4
  %76 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.378, i64 0, i64 0), i32 %75)
  store i8* %76, i8** %18, align 8
  %77 = load i32, i32* %15, align 4
  %78 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.379, i64 0, i64 0), i32 %77)
  store i8* %78, i8** %19, align 8
  br label %79

79:                                               ; preds = %74, %71
  %80 = load i8, i8* %27, align 1
  %81 = trunc i8 %80 to i1
  br i1 %81, label %107, label %82

82:                                               ; preds = %79
  %83 = load i8*, i8** %18, align 8
  store i8* %83, i8** %23, align 8
  br label %84

84:                                               ; preds = %103, %82
  %85 = load i8*, i8** %23, align 8
  %86 = load i8, i8* %85, align 1
  %87 = icmp ne i8 %86, 0
  br i1 %87, label %88, label %106

88:                                               ; preds = %84
  br label %89

89:                                               ; preds = %88
  %90 = load i64, i64* %21, align 8
  %91 = load i64, i64* %12, align 8
  %92 = icmp ult i64 %90, %91
  br i1 %92, label %93, label %99

93:                                               ; preds = %89
  %94 = load i8*, i8** %23, align 8
  %95 = load i8, i8* %94, align 1
  %96 = load i8*, i8** %11, align 8
  %97 = load i64, i64* %21, align 8
  %98 = getelementptr inbounds i8, i8* %96, i64 %97
  store i8 %95, i8* %98, align 1
  br label %99

99:                                               ; preds = %93, %89
  %100 = load i64, i64* %21, align 8
  %101 = add i64 %100, 1
  store i64 %101, i64* %21, align 8
  br label %102

102:                                              ; preds = %99
  br label %103

103:                                              ; preds = %102
  %104 = load i8*, i8** %23, align 8
  %105 = getelementptr inbounds i8, i8* %104, i32 1
  store i8* %105, i8** %23, align 8
  br label %84, !llvm.loop !117

106:                                              ; preds = %84
  br label %107

107:                                              ; preds = %106, %79
  store i8 1, i8* %25, align 1
  %108 = load i8*, i8** %19, align 8
  store i8* %108, i8** %23, align 8
  %109 = load i8*, i8** %23, align 8
  %110 = call i64 @strlen(i8* %109) #17
  store i64 %110, i64* %24, align 8
  br label %137

111:                                              ; preds = %50
  store i8 1, i8* %25, align 1
  br label %112

112:                                              ; preds = %111, %50
  store i8 1, i8* %27, align 1
  br label %113

113:                                              ; preds = %112, %50
  %114 = load i8, i8* %27, align 1
  %115 = trunc i8 %114 to i1
  br i1 %115, label %117, label %116

116:                                              ; preds = %113
  store i8 1, i8* %25, align 1
  br label %117

117:                                              ; preds = %116, %113
  br label %118

118:                                              ; preds = %117, %50
  store i32 2, i32* %15, align 4
  %119 = load i8, i8* %27, align 1
  %120 = trunc i8 %119 to i1
  br i1 %120, label %134, label %121

121:                                              ; preds = %118
  br label %122

122:                                              ; preds = %121
  %123 = load i64, i64* %21, align 8
  %124 = load i64, i64* %12, align 8
  %125 = icmp ult i64 %123, %124
  br i1 %125, label %126, label %130

126:                                              ; preds = %122
  %127 = load i8*, i8** %11, align 8
  %128 = load i64, i64* %21, align 8
  %129 = getelementptr inbounds i8, i8* %127, i64 %128
  store i8 39, i8* %129, align 1
  br label %130

130:                                              ; preds = %126, %122
  %131 = load i64, i64* %21, align 8
  %132 = add i64 %131, 1
  store i64 %132, i64* %21, align 8
  br label %133

133:                                              ; preds = %130
  br label %134

134:                                              ; preds = %133, %118
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.379, i64 0, i64 0), i8** %23, align 8
  store i64 1, i64* %24, align 8
  br label %137

135:                                              ; preds = %50
  store i8 0, i8* %27, align 1
  br label %137

136:                                              ; preds = %50
  call void @abort() #16
  unreachable

137:                                              ; preds = %135, %134, %107, %70, %69
  store i64 0, i64* %20, align 8
  br label %138

138:                                              ; preds = %1001, %137
  %139 = load i64, i64* %14, align 8
  %140 = icmp eq i64 %139, -1
  br i1 %140, label %141, label %149

141:                                              ; preds = %138
  %142 = load i8*, i8** %13, align 8
  %143 = load i64, i64* %20, align 8
  %144 = getelementptr inbounds i8, i8* %142, i64 %143
  %145 = load i8, i8* %144, align 1
  %146 = sext i8 %145 to i32
  %147 = icmp eq i32 %146, 0
  %148 = zext i1 %147 to i32
  br label %154

149:                                              ; preds = %138
  %150 = load i64, i64* %20, align 8
  %151 = load i64, i64* %14, align 8
  %152 = icmp eq i64 %150, %151
  %153 = zext i1 %152 to i32
  br label %154

154:                                              ; preds = %149, %141
  %155 = phi i32 [ %148, %141 ], [ %153, %149 ]
  %156 = icmp ne i32 %155, 0
  %157 = xor i1 %156, true
  br i1 %157, label %158, label %1004

158:                                              ; preds = %154
  store i8 0, i8* %33, align 1
  store i8 0, i8* %34, align 1
  store i8 0, i8* %35, align 1
  %159 = load i8, i8* %25, align 1
  %160 = trunc i8 %159 to i1
  br i1 %160, label %161, label %197

161:                                              ; preds = %158
  %162 = load i32, i32* %15, align 4
  %163 = icmp ne i32 %162, 2
  br i1 %163, label %164, label %197

164:                                              ; preds = %161
  %165 = load i64, i64* %24, align 8
  %166 = icmp ne i64 %165, 0
  br i1 %166, label %167, label %197

167:                                              ; preds = %164
  %168 = load i64, i64* %20, align 8
  %169 = load i64, i64* %24, align 8
  %170 = add i64 %168, %169
  %171 = load i64, i64* %14, align 8
  %172 = icmp eq i64 %171, -1
  br i1 %172, label %173, label %179

173:                                              ; preds = %167
  %174 = load i64, i64* %24, align 8
  %175 = icmp ult i64 1, %174
  br i1 %175, label %176, label %179

176:                                              ; preds = %173
  %177 = load i8*, i8** %13, align 8
  %178 = call i64 @strlen(i8* %177) #17
  store i64 %178, i64* %14, align 8
  br label %181

179:                                              ; preds = %173, %167
  %180 = load i64, i64* %14, align 8
  br label %181

181:                                              ; preds = %179, %176
  %182 = phi i64 [ %178, %176 ], [ %180, %179 ]
  %183 = icmp ule i64 %170, %182
  br i1 %183, label %184, label %197

184:                                              ; preds = %181
  %185 = load i8*, i8** %13, align 8
  %186 = load i64, i64* %20, align 8
  %187 = getelementptr inbounds i8, i8* %185, i64 %186
  %188 = load i8*, i8** %23, align 8
  %189 = load i64, i64* %24, align 8
  %190 = call i32 @memcmp(i8* %187, i8* %188, i64 %189) #17
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %192, label %197

192:                                              ; preds = %184
  %193 = load i8, i8* %27, align 1
  %194 = trunc i8 %193 to i1
  br i1 %194, label %195, label %196

195:                                              ; preds = %192
  br label %1086

196:                                              ; preds = %192
  store i8 1, i8* %33, align 1
  br label %197

197:                                              ; preds = %196, %184, %181, %164, %161, %158
  %198 = load i8*, i8** %13, align 8
  %199 = load i64, i64* %20, align 8
  %200 = getelementptr inbounds i8, i8* %198, i64 %199
  %201 = load i8, i8* %200, align 1
  store i8 %201, i8* %31, align 1
  %202 = load i8, i8* %31, align 1
  %203 = zext i8 %202 to i32
  switch i32 %203, label %544 [
    i32 0, label %204
    i32 63, label %325
    i32 7, label %421
    i32 8, label %422
    i32 12, label %423
    i32 10, label %424
    i32 13, label %425
    i32 9, label %426
    i32 11, label %427
    i32 92, label %428
    i32 123, label %462
    i32 125, label %462
    i32 35, label %476
    i32 126, label %476
    i32 32, label %481
    i32 33, label %482
    i32 34, label %482
    i32 36, label %482
    i32 38, label %482
    i32 40, label %482
    i32 41, label %482
    i32 42, label %482
    i32 59, label %482
    i32 60, label %482
    i32 61, label %482
    i32 62, label %482
    i32 91, label %482
    i32 94, label %482
    i32 96, label %482
    i32 124, label %482
    i32 39, label %490
    i32 37, label %543
    i32 43, label %543
    i32 44, label %543
    i32 45, label %543
    i32 46, label %543
    i32 47, label %543
    i32 48, label %543
    i32 49, label %543
    i32 50, label %543
    i32 51, label %543
    i32 52, label %543
    i32 53, label %543
    i32 54, label %543
    i32 55, label %543
    i32 56, label %543
    i32 57, label %543
    i32 58, label %543
    i32 65, label %543
    i32 66, label %543
    i32 67, label %543
    i32 68, label %543
    i32 69, label %543
    i32 70, label %543
    i32 71, label %543
    i32 72, label %543
    i32 73, label %543
    i32 74, label %543
    i32 75, label %543
    i32 76, label %543
    i32 77, label %543
    i32 78, label %543
    i32 79, label %543
    i32 80, label %543
    i32 81, label %543
    i32 82, label %543
    i32 83, label %543
    i32 84, label %543
    i32 85, label %543
    i32 86, label %543
    i32 87, label %543
    i32 88, label %543
    i32 89, label %543
    i32 90, label %543
    i32 93, label %543
    i32 95, label %543
    i32 97, label %543
    i32 98, label %543
    i32 99, label %543
    i32 100, label %543
    i32 101, label %543
    i32 102, label %543
    i32 103, label %543
    i32 104, label %543
    i32 105, label %543
    i32 106, label %543
    i32 107, label %543
    i32 108, label %543
    i32 109, label %543
    i32 110, label %543
    i32 111, label %543
    i32 112, label %543
    i32 113, label %543
    i32 114, label %543
    i32 115, label %543
    i32 116, label %543
    i32 117, label %543
    i32 118, label %543
    i32 119, label %543
    i32 120, label %543
    i32 121, label %543
    i32 122, label %543
  ]

204:                                              ; preds = %197
  %205 = load i8, i8* %25, align 1
  %206 = trunc i8 %205 to i1
  br i1 %206, label %207, label %318

207:                                              ; preds = %204
  br label %208

208:                                              ; preds = %207
  %209 = load i8, i8* %27, align 1
  %210 = trunc i8 %209 to i1
  br i1 %210, label %211, label %212

211:                                              ; preds = %208
  br label %1086

212:                                              ; preds = %208
  store i8 1, i8* %34, align 1
  %213 = load i32, i32* %15, align 4
  %214 = icmp eq i32 %213, 2
  br i1 %214, label %215, label %255

215:                                              ; preds = %212
  %216 = load i8, i8* %28, align 1
  %217 = trunc i8 %216 to i1
  br i1 %217, label %255, label %218

218:                                              ; preds = %215
  br label %219

219:                                              ; preds = %218
  %220 = load i64, i64* %21, align 8
  %221 = load i64, i64* %12, align 8
  %222 = icmp ult i64 %220, %221
  br i1 %222, label %223, label %227

223:                                              ; preds = %219
  %224 = load i8*, i8** %11, align 8
  %225 = load i64, i64* %21, align 8
  %226 = getelementptr inbounds i8, i8* %224, i64 %225
  store i8 39, i8* %226, align 1
  br label %227

227:                                              ; preds = %223, %219
  %228 = load i64, i64* %21, align 8
  %229 = add i64 %228, 1
  store i64 %229, i64* %21, align 8
  br label %230

230:                                              ; preds = %227
  br label %231

231:                                              ; preds = %230
  %232 = load i64, i64* %21, align 8
  %233 = load i64, i64* %12, align 8
  %234 = icmp ult i64 %232, %233
  br i1 %234, label %235, label %239

235:                                              ; preds = %231
  %236 = load i8*, i8** %11, align 8
  %237 = load i64, i64* %21, align 8
  %238 = getelementptr inbounds i8, i8* %236, i64 %237
  store i8 36, i8* %238, align 1
  br label %239

239:                                              ; preds = %235, %231
  %240 = load i64, i64* %21, align 8
  %241 = add i64 %240, 1
  store i64 %241, i64* %21, align 8
  br label %242

242:                                              ; preds = %239
  br label %243

243:                                              ; preds = %242
  %244 = load i64, i64* %21, align 8
  %245 = load i64, i64* %12, align 8
  %246 = icmp ult i64 %244, %245
  br i1 %246, label %247, label %251

247:                                              ; preds = %243
  %248 = load i8*, i8** %11, align 8
  %249 = load i64, i64* %21, align 8
  %250 = getelementptr inbounds i8, i8* %248, i64 %249
  store i8 39, i8* %250, align 1
  br label %251

251:                                              ; preds = %247, %243
  %252 = load i64, i64* %21, align 8
  %253 = add i64 %252, 1
  store i64 %253, i64* %21, align 8
  br label %254

254:                                              ; preds = %251
  store i8 1, i8* %28, align 1
  br label %255

255:                                              ; preds = %254, %215, %212
  br label %256

256:                                              ; preds = %255
  %257 = load i64, i64* %21, align 8
  %258 = load i64, i64* %12, align 8
  %259 = icmp ult i64 %257, %258
  br i1 %259, label %260, label %264

260:                                              ; preds = %256
  %261 = load i8*, i8** %11, align 8
  %262 = load i64, i64* %21, align 8
  %263 = getelementptr inbounds i8, i8* %261, i64 %262
  store i8 92, i8* %263, align 1
  br label %264

264:                                              ; preds = %260, %256
  %265 = load i64, i64* %21, align 8
  %266 = add i64 %265, 1
  store i64 %266, i64* %21, align 8
  br label %267

267:                                              ; preds = %264
  br label %268

268:                                              ; preds = %267
  %269 = load i32, i32* %15, align 4
  %270 = icmp ne i32 %269, 2
  br i1 %270, label %271, label %317

271:                                              ; preds = %268
  %272 = load i64, i64* %20, align 8
  %273 = add i64 %272, 1
  %274 = load i64, i64* %14, align 8
  %275 = icmp ult i64 %273, %274
  br i1 %275, label %276, label %317

276:                                              ; preds = %271
  %277 = load i8*, i8** %13, align 8
  %278 = load i64, i64* %20, align 8
  %279 = add i64 %278, 1
  %280 = getelementptr inbounds i8, i8* %277, i64 %279
  %281 = load i8, i8* %280, align 1
  %282 = sext i8 %281 to i32
  %283 = icmp sle i32 48, %282
  br i1 %283, label %284, label %317

284:                                              ; preds = %276
  %285 = load i8*, i8** %13, align 8
  %286 = load i64, i64* %20, align 8
  %287 = add i64 %286, 1
  %288 = getelementptr inbounds i8, i8* %285, i64 %287
  %289 = load i8, i8* %288, align 1
  %290 = sext i8 %289 to i32
  %291 = icmp sle i32 %290, 57
  br i1 %291, label %292, label %317

292:                                              ; preds = %284
  br label %293

293:                                              ; preds = %292
  %294 = load i64, i64* %21, align 8
  %295 = load i64, i64* %12, align 8
  %296 = icmp ult i64 %294, %295
  br i1 %296, label %297, label %301

297:                                              ; preds = %293
  %298 = load i8*, i8** %11, align 8
  %299 = load i64, i64* %21, align 8
  %300 = getelementptr inbounds i8, i8* %298, i64 %299
  store i8 48, i8* %300, align 1
  br label %301

301:                                              ; preds = %297, %293
  %302 = load i64, i64* %21, align 8
  %303 = add i64 %302, 1
  store i64 %303, i64* %21, align 8
  br label %304

304:                                              ; preds = %301
  br label %305

305:                                              ; preds = %304
  %306 = load i64, i64* %21, align 8
  %307 = load i64, i64* %12, align 8
  %308 = icmp ult i64 %306, %307
  br i1 %308, label %309, label %313

309:                                              ; preds = %305
  %310 = load i8*, i8** %11, align 8
  %311 = load i64, i64* %21, align 8
  %312 = getelementptr inbounds i8, i8* %310, i64 %311
  store i8 48, i8* %312, align 1
  br label %313

313:                                              ; preds = %309, %305
  %314 = load i64, i64* %21, align 8
  %315 = add i64 %314, 1
  store i64 %315, i64* %21, align 8
  br label %316

316:                                              ; preds = %313
  br label %317

317:                                              ; preds = %316, %284, %276, %271, %268
  store i8 48, i8* %31, align 1
  br label %324

318:                                              ; preds = %204
  %319 = load i32, i32* %16, align 4
  %320 = and i32 %319, 1
  %321 = icmp ne i32 %320, 0
  br i1 %321, label %322, label %323

322:                                              ; preds = %318
  br label %1001

323:                                              ; preds = %318
  br label %324

324:                                              ; preds = %323, %317
  br label %857

325:                                              ; preds = %197
  %326 = load i32, i32* %15, align 4
  switch i32 %326, label %419 [
    i32 2, label %327
    i32 5, label %332
  ]

327:                                              ; preds = %325
  %328 = load i8, i8* %27, align 1
  %329 = trunc i8 %328 to i1
  br i1 %329, label %330, label %331

330:                                              ; preds = %327
  br label %1086

331:                                              ; preds = %327
  br label %420

332:                                              ; preds = %325
  %333 = load i32, i32* %16, align 4
  %334 = and i32 %333, 4
  %335 = icmp ne i32 %334, 0
  br i1 %335, label %336, label %418

336:                                              ; preds = %332
  %337 = load i64, i64* %20, align 8
  %338 = add i64 %337, 2
  %339 = load i64, i64* %14, align 8
  %340 = icmp ult i64 %338, %339
  br i1 %340, label %341, label %418

341:                                              ; preds = %336
  %342 = load i8*, i8** %13, align 8
  %343 = load i64, i64* %20, align 8
  %344 = add i64 %343, 1
  %345 = getelementptr inbounds i8, i8* %342, i64 %344
  %346 = load i8, i8* %345, align 1
  %347 = sext i8 %346 to i32
  %348 = icmp eq i32 %347, 63
  br i1 %348, label %349, label %418

349:                                              ; preds = %341
  %350 = load i8*, i8** %13, align 8
  %351 = load i64, i64* %20, align 8
  %352 = add i64 %351, 2
  %353 = getelementptr inbounds i8, i8* %350, i64 %352
  %354 = load i8, i8* %353, align 1
  %355 = sext i8 %354 to i32
  switch i32 %355, label %416 [
    i32 33, label %356
    i32 39, label %356
    i32 40, label %356
    i32 41, label %356
    i32 45, label %356
    i32 47, label %356
    i32 60, label %356
    i32 61, label %356
    i32 62, label %356
  ]

356:                                              ; preds = %349, %349, %349, %349, %349, %349, %349, %349, %349
  %357 = load i8, i8* %27, align 1
  %358 = trunc i8 %357 to i1
  br i1 %358, label %359, label %360

359:                                              ; preds = %356
  br label %1086

360:                                              ; preds = %356
  %361 = load i8*, i8** %13, align 8
  %362 = load i64, i64* %20, align 8
  %363 = add i64 %362, 2
  %364 = getelementptr inbounds i8, i8* %361, i64 %363
  %365 = load i8, i8* %364, align 1
  store i8 %365, i8* %31, align 1
  %366 = load i64, i64* %20, align 8
  %367 = add i64 %366, 2
  store i64 %367, i64* %20, align 8
  br label %368

368:                                              ; preds = %360
  %369 = load i64, i64* %21, align 8
  %370 = load i64, i64* %12, align 8
  %371 = icmp ult i64 %369, %370
  br i1 %371, label %372, label %376

372:                                              ; preds = %368
  %373 = load i8*, i8** %11, align 8
  %374 = load i64, i64* %21, align 8
  %375 = getelementptr inbounds i8, i8* %373, i64 %374
  store i8 63, i8* %375, align 1
  br label %376

376:                                              ; preds = %372, %368
  %377 = load i64, i64* %21, align 8
  %378 = add i64 %377, 1
  store i64 %378, i64* %21, align 8
  br label %379

379:                                              ; preds = %376
  br label %380

380:                                              ; preds = %379
  %381 = load i64, i64* %21, align 8
  %382 = load i64, i64* %12, align 8
  %383 = icmp ult i64 %381, %382
  br i1 %383, label %384, label %388

384:                                              ; preds = %380
  %385 = load i8*, i8** %11, align 8
  %386 = load i64, i64* %21, align 8
  %387 = getelementptr inbounds i8, i8* %385, i64 %386
  store i8 34, i8* %387, align 1
  br label %388

388:                                              ; preds = %384, %380
  %389 = load i64, i64* %21, align 8
  %390 = add i64 %389, 1
  store i64 %390, i64* %21, align 8
  br label %391

391:                                              ; preds = %388
  br label %392

392:                                              ; preds = %391
  %393 = load i64, i64* %21, align 8
  %394 = load i64, i64* %12, align 8
  %395 = icmp ult i64 %393, %394
  br i1 %395, label %396, label %400

396:                                              ; preds = %392
  %397 = load i8*, i8** %11, align 8
  %398 = load i64, i64* %21, align 8
  %399 = getelementptr inbounds i8, i8* %397, i64 %398
  store i8 34, i8* %399, align 1
  br label %400

400:                                              ; preds = %396, %392
  %401 = load i64, i64* %21, align 8
  %402 = add i64 %401, 1
  store i64 %402, i64* %21, align 8
  br label %403

403:                                              ; preds = %400
  br label %404

404:                                              ; preds = %403
  %405 = load i64, i64* %21, align 8
  %406 = load i64, i64* %12, align 8
  %407 = icmp ult i64 %405, %406
  br i1 %407, label %408, label %412

408:                                              ; preds = %404
  %409 = load i8*, i8** %11, align 8
  %410 = load i64, i64* %21, align 8
  %411 = getelementptr inbounds i8, i8* %409, i64 %410
  store i8 63, i8* %411, align 1
  br label %412

412:                                              ; preds = %408, %404
  %413 = load i64, i64* %21, align 8
  %414 = add i64 %413, 1
  store i64 %414, i64* %21, align 8
  br label %415

415:                                              ; preds = %412
  br label %417

416:                                              ; preds = %349
  br label %417

417:                                              ; preds = %416, %415
  br label %418

418:                                              ; preds = %417, %341, %336, %332
  br label %420

419:                                              ; preds = %325
  br label %420

420:                                              ; preds = %419, %418, %331
  br label %857

421:                                              ; preds = %197
  store i8 97, i8* %32, align 1
  br label %456

422:                                              ; preds = %197
  store i8 98, i8* %32, align 1
  br label %456

423:                                              ; preds = %197
  store i8 102, i8* %32, align 1
  br label %456

424:                                              ; preds = %197
  store i8 110, i8* %32, align 1
  br label %448

425:                                              ; preds = %197
  store i8 114, i8* %32, align 1
  br label %448

426:                                              ; preds = %197
  store i8 116, i8* %32, align 1
  br label %448

427:                                              ; preds = %197
  store i8 118, i8* %32, align 1
  br label %456

428:                                              ; preds = %197
  %429 = load i8, i8* %31, align 1
  store i8 %429, i8* %32, align 1
  %430 = load i32, i32* %15, align 4
  %431 = icmp eq i32 %430, 2
  br i1 %431, label %432, label %437

432:                                              ; preds = %428
  %433 = load i8, i8* %27, align 1
  %434 = trunc i8 %433 to i1
  br i1 %434, label %435, label %436

435:                                              ; preds = %432
  br label %1086

436:                                              ; preds = %432
  br label %950

437:                                              ; preds = %428
  %438 = load i8, i8* %25, align 1
  %439 = trunc i8 %438 to i1
  br i1 %439, label %440, label %447

440:                                              ; preds = %437
  %441 = load i8, i8* %27, align 1
  %442 = trunc i8 %441 to i1
  br i1 %442, label %443, label %447

443:                                              ; preds = %440
  %444 = load i64, i64* %24, align 8
  %445 = icmp ne i64 %444, 0
  br i1 %445, label %446, label %447

446:                                              ; preds = %443
  br label %950

447:                                              ; preds = %443, %440, %437
  br label %448

448:                                              ; preds = %447, %426, %425, %424
  %449 = load i32, i32* %15, align 4
  %450 = icmp eq i32 %449, 2
  br i1 %450, label %451, label %455

451:                                              ; preds = %448
  %452 = load i8, i8* %27, align 1
  %453 = trunc i8 %452 to i1
  br i1 %453, label %454, label %455

454:                                              ; preds = %451
  br label %1086

455:                                              ; preds = %451, %448
  br label %456

456:                                              ; preds = %455, %427, %423, %422, %421
  %457 = load i8, i8* %25, align 1
  %458 = trunc i8 %457 to i1
  br i1 %458, label %459, label %461

459:                                              ; preds = %456
  %460 = load i8, i8* %32, align 1
  store i8 %460, i8* %31, align 1
  br label %888

461:                                              ; preds = %456
  br label %857

462:                                              ; preds = %197, %197
  %463 = load i64, i64* %14, align 8
  %464 = icmp eq i64 %463, -1
  br i1 %464, label %465, label %471

465:                                              ; preds = %462
  %466 = load i8*, i8** %13, align 8
  %467 = getelementptr inbounds i8, i8* %466, i64 1
  %468 = load i8, i8* %467, align 1
  %469 = sext i8 %468 to i32
  %470 = icmp eq i32 %469, 0
  br i1 %470, label %475, label %474

471:                                              ; preds = %462
  %472 = load i64, i64* %14, align 8
  %473 = icmp eq i64 %472, 1
  br i1 %473, label %475, label %474

474:                                              ; preds = %471, %465
  br label %857

475:                                              ; preds = %471, %465
  br label %476

476:                                              ; preds = %475, %197, %197
  %477 = load i64, i64* %20, align 8
  %478 = icmp ne i64 %477, 0
  br i1 %478, label %479, label %480

479:                                              ; preds = %476
  br label %857

480:                                              ; preds = %476
  br label %481

481:                                              ; preds = %480, %197
  store i8 1, i8* %35, align 1
  br label %482

482:                                              ; preds = %481, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197
  %483 = load i32, i32* %15, align 4
  %484 = icmp eq i32 %483, 2
  br i1 %484, label %485, label %489

485:                                              ; preds = %482
  %486 = load i8, i8* %27, align 1
  %487 = trunc i8 %486 to i1
  br i1 %487, label %488, label %489

488:                                              ; preds = %485
  br label %1086

489:                                              ; preds = %485, %482
  br label %857

490:                                              ; preds = %197
  store i8 1, i8* %29, align 1
  store i8 1, i8* %35, align 1
  %491 = load i32, i32* %15, align 4
  %492 = icmp eq i32 %491, 2
  br i1 %492, label %493, label %542

493:                                              ; preds = %490
  %494 = load i8, i8* %27, align 1
  %495 = trunc i8 %494 to i1
  br i1 %495, label %496, label %497

496:                                              ; preds = %493
  br label %1086

497:                                              ; preds = %493
  %498 = load i64, i64* %12, align 8
  %499 = icmp ne i64 %498, 0
  br i1 %499, label %500, label %505

500:                                              ; preds = %497
  %501 = load i64, i64* %22, align 8
  %502 = icmp ne i64 %501, 0
  br i1 %502, label %505, label %503

503:                                              ; preds = %500
  %504 = load i64, i64* %12, align 8
  store i64 %504, i64* %22, align 8
  store i64 0, i64* %12, align 8
  br label %505

505:                                              ; preds = %503, %500, %497
  br label %506

506:                                              ; preds = %505
  %507 = load i64, i64* %21, align 8
  %508 = load i64, i64* %12, align 8
  %509 = icmp ult i64 %507, %508
  br i1 %509, label %510, label %514

510:                                              ; preds = %506
  %511 = load i8*, i8** %11, align 8
  %512 = load i64, i64* %21, align 8
  %513 = getelementptr inbounds i8, i8* %511, i64 %512
  store i8 39, i8* %513, align 1
  br label %514

514:                                              ; preds = %510, %506
  %515 = load i64, i64* %21, align 8
  %516 = add i64 %515, 1
  store i64 %516, i64* %21, align 8
  br label %517

517:                                              ; preds = %514
  br label %518

518:                                              ; preds = %517
  %519 = load i64, i64* %21, align 8
  %520 = load i64, i64* %12, align 8
  %521 = icmp ult i64 %519, %520
  br i1 %521, label %522, label %526

522:                                              ; preds = %518
  %523 = load i8*, i8** %11, align 8
  %524 = load i64, i64* %21, align 8
  %525 = getelementptr inbounds i8, i8* %523, i64 %524
  store i8 92, i8* %525, align 1
  br label %526

526:                                              ; preds = %522, %518
  %527 = load i64, i64* %21, align 8
  %528 = add i64 %527, 1
  store i64 %528, i64* %21, align 8
  br label %529

529:                                              ; preds = %526
  br label %530

530:                                              ; preds = %529
  %531 = load i64, i64* %21, align 8
  %532 = load i64, i64* %12, align 8
  %533 = icmp ult i64 %531, %532
  br i1 %533, label %534, label %538

534:                                              ; preds = %530
  %535 = load i8*, i8** %11, align 8
  %536 = load i64, i64* %21, align 8
  %537 = getelementptr inbounds i8, i8* %535, i64 %536
  store i8 39, i8* %537, align 1
  br label %538

538:                                              ; preds = %534, %530
  %539 = load i64, i64* %21, align 8
  %540 = add i64 %539, 1
  store i64 %540, i64* %21, align 8
  br label %541

541:                                              ; preds = %538
  store i8 0, i8* %28, align 1
  br label %542

542:                                              ; preds = %541, %490
  br label %857

543:                                              ; preds = %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197, %197
  store i8 1, i8* %35, align 1
  br label %857

544:                                              ; preds = %197
  %545 = load i8, i8* %26, align 1
  %546 = trunc i8 %545 to i1
  br i1 %546, label %547, label %559

547:                                              ; preds = %544
  store i64 1, i64* %36, align 8
  %548 = call i16** @__ctype_b_loc() #18
  %549 = load i16*, i16** %548, align 8
  %550 = load i8, i8* %31, align 1
  %551 = zext i8 %550 to i32
  %552 = sext i32 %551 to i64
  %553 = getelementptr inbounds i16, i16* %549, i64 %552
  %554 = load i16, i16* %553, align 2
  %555 = zext i16 %554 to i32
  %556 = and i32 %555, 16384
  %557 = icmp ne i32 %556, 0
  %558 = zext i1 %557 to i8
  store i8 %558, i8* %37, align 1
  br label %656

559:                                              ; preds = %544
  %560 = bitcast %struct.__mbstate_t* %38 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %560, i8 0, i64 8, i1 false)
  store i64 0, i64* %36, align 8
  store i8 1, i8* %37, align 1
  %561 = load i64, i64* %14, align 8
  %562 = icmp eq i64 %561, -1
  br i1 %562, label %563, label %566

563:                                              ; preds = %559
  %564 = load i8*, i8** %13, align 8
  %565 = call i64 @strlen(i8* %564) #17
  store i64 %565, i64* %14, align 8
  br label %566

566:                                              ; preds = %563, %559
  br label %567

567:                                              ; preds = %651, %566
  %568 = load i8*, i8** %13, align 8
  %569 = load i64, i64* %20, align 8
  %570 = load i64, i64* %36, align 8
  %571 = add i64 %569, %570
  %572 = getelementptr inbounds i8, i8* %568, i64 %571
  %573 = load i64, i64* %14, align 8
  %574 = load i64, i64* %20, align 8
  %575 = load i64, i64* %36, align 8
  %576 = add i64 %574, %575
  %577 = sub i64 %573, %576
  %578 = call i64 @rpl_mbrtowc(i32* %39, i8* %572, i64 %577, %struct.__mbstate_t* %38)
  store i64 %578, i64* %40, align 8
  %579 = load i64, i64* %40, align 8
  %580 = icmp eq i64 %579, 0
  br i1 %580, label %581, label %582

581:                                              ; preds = %567
  br label %655

582:                                              ; preds = %567
  %583 = load i64, i64* %40, align 8
  %584 = icmp eq i64 %583, -1
  br i1 %584, label %585, label %586

585:                                              ; preds = %582
  store i8 0, i8* %37, align 1
  br label %655

586:                                              ; preds = %582
  %587 = load i64, i64* %40, align 8
  %588 = icmp eq i64 %587, -2
  br i1 %588, label %589, label %611

589:                                              ; preds = %586
  store i8 0, i8* %37, align 1
  br label %590

590:                                              ; preds = %607, %589
  %591 = load i64, i64* %20, align 8
  %592 = load i64, i64* %36, align 8
  %593 = add i64 %591, %592
  %594 = load i64, i64* %14, align 8
  %595 = icmp ult i64 %593, %594
  br i1 %595, label %596, label %605

596:                                              ; preds = %590
  %597 = load i8*, i8** %13, align 8
  %598 = load i64, i64* %20, align 8
  %599 = load i64, i64* %36, align 8
  %600 = add i64 %598, %599
  %601 = getelementptr inbounds i8, i8* %597, i64 %600
  %602 = load i8, i8* %601, align 1
  %603 = sext i8 %602 to i32
  %604 = icmp ne i32 %603, 0
  br label %605

605:                                              ; preds = %596, %590
  %606 = phi i1 [ false, %590 ], [ %604, %596 ]
  br i1 %606, label %607, label %610

607:                                              ; preds = %605
  %608 = load i64, i64* %36, align 8
  %609 = add i64 %608, 1
  store i64 %609, i64* %36, align 8
  br label %590, !llvm.loop !118

610:                                              ; preds = %605
  br label %655

611:                                              ; preds = %586
  %612 = load i8, i8* %27, align 1
  %613 = trunc i8 %612 to i1
  br i1 %613, label %614, label %639

614:                                              ; preds = %611
  %615 = load i32, i32* %15, align 4
  %616 = icmp eq i32 %615, 2
  br i1 %616, label %617, label %639

617:                                              ; preds = %614
  store i64 1, i64* %41, align 8
  br label %618

618:                                              ; preds = %635, %617
  %619 = load i64, i64* %41, align 8
  %620 = load i64, i64* %40, align 8
  %621 = icmp ult i64 %619, %620
  br i1 %621, label %622, label %638

622:                                              ; preds = %618
  %623 = load i8*, i8** %13, align 8
  %624 = load i64, i64* %20, align 8
  %625 = load i64, i64* %36, align 8
  %626 = add i64 %624, %625
  %627 = load i64, i64* %41, align 8
  %628 = add i64 %626, %627
  %629 = getelementptr inbounds i8, i8* %623, i64 %628
  %630 = load i8, i8* %629, align 1
  %631 = sext i8 %630 to i32
  switch i32 %631, label %633 [
    i32 91, label %632
    i32 92, label %632
    i32 94, label %632
    i32 96, label %632
    i32 124, label %632
  ]

632:                                              ; preds = %622, %622, %622, %622, %622
  br label %1086

633:                                              ; preds = %622
  br label %634

634:                                              ; preds = %633
  br label %635

635:                                              ; preds = %634
  %636 = load i64, i64* %41, align 8
  %637 = add i64 %636, 1
  store i64 %637, i64* %41, align 8
  br label %618, !llvm.loop !119

638:                                              ; preds = %618
  br label %639

639:                                              ; preds = %638, %614, %611
  %640 = load i32, i32* %39, align 4
  %641 = call i32 @iswprint(i32 %640) #14
  %642 = icmp ne i32 %641, 0
  br i1 %642, label %644, label %643

643:                                              ; preds = %639
  store i8 0, i8* %37, align 1
  br label %644

644:                                              ; preds = %643, %639
  %645 = load i64, i64* %40, align 8
  %646 = load i64, i64* %36, align 8
  %647 = add i64 %646, %645
  store i64 %647, i64* %36, align 8
  br label %648

648:                                              ; preds = %644
  br label %649

649:                                              ; preds = %648
  br label %650

650:                                              ; preds = %649
  br label %651

651:                                              ; preds = %650
  %652 = call i32 @mbsinit(%struct.__mbstate_t* %38) #17
  %653 = icmp ne i32 %652, 0
  %654 = xor i1 %653, true
  br i1 %654, label %567, label %655, !llvm.loop !120

655:                                              ; preds = %651, %610, %585, %581
  br label %656

656:                                              ; preds = %655, %547
  %657 = load i8, i8* %37, align 1
  %658 = trunc i8 %657 to i1
  %659 = zext i1 %658 to i8
  store i8 %659, i8* %35, align 1
  %660 = load i64, i64* %36, align 8
  %661 = icmp ult i64 1, %660
  br i1 %661, label %668, label %662

662:                                              ; preds = %656
  %663 = load i8, i8* %25, align 1
  %664 = trunc i8 %663 to i1
  br i1 %664, label %665, label %856

665:                                              ; preds = %662
  %666 = load i8, i8* %37, align 1
  %667 = trunc i8 %666 to i1
  br i1 %667, label %856, label %668

668:                                              ; preds = %665, %656
  %669 = load i64, i64* %20, align 8
  %670 = load i64, i64* %36, align 8
  %671 = add i64 %669, %670
  store i64 %671, i64* %42, align 8
  br label %672

672:                                              ; preds = %849, %668
  %673 = load i8, i8* %25, align 1
  %674 = trunc i8 %673 to i1
  br i1 %674, label %675, label %780

675:                                              ; preds = %672
  %676 = load i8, i8* %37, align 1
  %677 = trunc i8 %676 to i1
  br i1 %677, label %780, label %678

678:                                              ; preds = %675
  br label %679

679:                                              ; preds = %678
  %680 = load i8, i8* %27, align 1
  %681 = trunc i8 %680 to i1
  br i1 %681, label %682, label %683

682:                                              ; preds = %679
  br label %1086

683:                                              ; preds = %679
  store i8 1, i8* %34, align 1
  %684 = load i32, i32* %15, align 4
  %685 = icmp eq i32 %684, 2
  br i1 %685, label %686, label %726

686:                                              ; preds = %683
  %687 = load i8, i8* %28, align 1
  %688 = trunc i8 %687 to i1
  br i1 %688, label %726, label %689

689:                                              ; preds = %686
  br label %690

690:                                              ; preds = %689
  %691 = load i64, i64* %21, align 8
  %692 = load i64, i64* %12, align 8
  %693 = icmp ult i64 %691, %692
  br i1 %693, label %694, label %698

694:                                              ; preds = %690
  %695 = load i8*, i8** %11, align 8
  %696 = load i64, i64* %21, align 8
  %697 = getelementptr inbounds i8, i8* %695, i64 %696
  store i8 39, i8* %697, align 1
  br label %698

698:                                              ; preds = %694, %690
  %699 = load i64, i64* %21, align 8
  %700 = add i64 %699, 1
  store i64 %700, i64* %21, align 8
  br label %701

701:                                              ; preds = %698
  br label %702

702:                                              ; preds = %701
  %703 = load i64, i64* %21, align 8
  %704 = load i64, i64* %12, align 8
  %705 = icmp ult i64 %703, %704
  br i1 %705, label %706, label %710

706:                                              ; preds = %702
  %707 = load i8*, i8** %11, align 8
  %708 = load i64, i64* %21, align 8
  %709 = getelementptr inbounds i8, i8* %707, i64 %708
  store i8 36, i8* %709, align 1
  br label %710

710:                                              ; preds = %706, %702
  %711 = load i64, i64* %21, align 8
  %712 = add i64 %711, 1
  store i64 %712, i64* %21, align 8
  br label %713

713:                                              ; preds = %710
  br label %714

714:                                              ; preds = %713
  %715 = load i64, i64* %21, align 8
  %716 = load i64, i64* %12, align 8
  %717 = icmp ult i64 %715, %716
  br i1 %717, label %718, label %722

718:                                              ; preds = %714
  %719 = load i8*, i8** %11, align 8
  %720 = load i64, i64* %21, align 8
  %721 = getelementptr inbounds i8, i8* %719, i64 %720
  store i8 39, i8* %721, align 1
  br label %722

722:                                              ; preds = %718, %714
  %723 = load i64, i64* %21, align 8
  %724 = add i64 %723, 1
  store i64 %724, i64* %21, align 8
  br label %725

725:                                              ; preds = %722
  store i8 1, i8* %28, align 1
  br label %726

726:                                              ; preds = %725, %686, %683
  br label %727

727:                                              ; preds = %726
  %728 = load i64, i64* %21, align 8
  %729 = load i64, i64* %12, align 8
  %730 = icmp ult i64 %728, %729
  br i1 %730, label %731, label %735

731:                                              ; preds = %727
  %732 = load i8*, i8** %11, align 8
  %733 = load i64, i64* %21, align 8
  %734 = getelementptr inbounds i8, i8* %732, i64 %733
  store i8 92, i8* %734, align 1
  br label %735

735:                                              ; preds = %731, %727
  %736 = load i64, i64* %21, align 8
  %737 = add i64 %736, 1
  store i64 %737, i64* %21, align 8
  br label %738

738:                                              ; preds = %735
  br label %739

739:                                              ; preds = %738
  br label %740

740:                                              ; preds = %739
  %741 = load i64, i64* %21, align 8
  %742 = load i64, i64* %12, align 8
  %743 = icmp ult i64 %741, %742
  br i1 %743, label %744, label %753

744:                                              ; preds = %740
  %745 = load i8, i8* %31, align 1
  %746 = zext i8 %745 to i32
  %747 = ashr i32 %746, 6
  %748 = add nsw i32 48, %747
  %749 = trunc i32 %748 to i8
  %750 = load i8*, i8** %11, align 8
  %751 = load i64, i64* %21, align 8
  %752 = getelementptr inbounds i8, i8* %750, i64 %751
  store i8 %749, i8* %752, align 1
  br label %753

753:                                              ; preds = %744, %740
  %754 = load i64, i64* %21, align 8
  %755 = add i64 %754, 1
  store i64 %755, i64* %21, align 8
  br label %756

756:                                              ; preds = %753
  br label %757

757:                                              ; preds = %756
  %758 = load i64, i64* %21, align 8
  %759 = load i64, i64* %12, align 8
  %760 = icmp ult i64 %758, %759
  br i1 %760, label %761, label %771

761:                                              ; preds = %757
  %762 = load i8, i8* %31, align 1
  %763 = zext i8 %762 to i32
  %764 = ashr i32 %763, 3
  %765 = and i32 %764, 7
  %766 = add nsw i32 48, %765
  %767 = trunc i32 %766 to i8
  %768 = load i8*, i8** %11, align 8
  %769 = load i64, i64* %21, align 8
  %770 = getelementptr inbounds i8, i8* %768, i64 %769
  store i8 %767, i8* %770, align 1
  br label %771

771:                                              ; preds = %761, %757
  %772 = load i64, i64* %21, align 8
  %773 = add i64 %772, 1
  store i64 %773, i64* %21, align 8
  br label %774

774:                                              ; preds = %771
  %775 = load i8, i8* %31, align 1
  %776 = zext i8 %775 to i32
  %777 = and i32 %776, 7
  %778 = add nsw i32 48, %777
  %779 = trunc i32 %778 to i8
  store i8 %779, i8* %31, align 1
  br label %797

780:                                              ; preds = %675, %672
  %781 = load i8, i8* %33, align 1
  %782 = trunc i8 %781 to i1
  br i1 %782, label %783, label %796

783:                                              ; preds = %780
  br label %784

784:                                              ; preds = %783
  %785 = load i64, i64* %21, align 8
  %786 = load i64, i64* %12, align 8
  %787 = icmp ult i64 %785, %786
  br i1 %787, label %788, label %792

788:                                              ; preds = %784
  %789 = load i8*, i8** %11, align 8
  %790 = load i64, i64* %21, align 8
  %791 = getelementptr inbounds i8, i8* %789, i64 %790
  store i8 92, i8* %791, align 1
  br label %792

792:                                              ; preds = %788, %784
  %793 = load i64, i64* %21, align 8
  %794 = add i64 %793, 1
  store i64 %794, i64* %21, align 8
  br label %795

795:                                              ; preds = %792
  store i8 0, i8* %33, align 1
  br label %796

796:                                              ; preds = %795, %780
  br label %797

797:                                              ; preds = %796, %774
  %798 = load i64, i64* %42, align 8
  %799 = load i64, i64* %20, align 8
  %800 = add i64 %799, 1
  %801 = icmp ule i64 %798, %800
  br i1 %801, label %802, label %803

802:                                              ; preds = %797
  br label %855

803:                                              ; preds = %797
  br label %804

804:                                              ; preds = %803
  %805 = load i8, i8* %28, align 1
  %806 = trunc i8 %805 to i1
  br i1 %806, label %807, label %835

807:                                              ; preds = %804
  %808 = load i8, i8* %34, align 1
  %809 = trunc i8 %808 to i1
  br i1 %809, label %835, label %810

810:                                              ; preds = %807
  br label %811

811:                                              ; preds = %810
  %812 = load i64, i64* %21, align 8
  %813 = load i64, i64* %12, align 8
  %814 = icmp ult i64 %812, %813
  br i1 %814, label %815, label %819

815:                                              ; preds = %811
  %816 = load i8*, i8** %11, align 8
  %817 = load i64, i64* %21, align 8
  %818 = getelementptr inbounds i8, i8* %816, i64 %817
  store i8 39, i8* %818, align 1
  br label %819

819:                                              ; preds = %815, %811
  %820 = load i64, i64* %21, align 8
  %821 = add i64 %820, 1
  store i64 %821, i64* %21, align 8
  br label %822

822:                                              ; preds = %819
  br label %823

823:                                              ; preds = %822
  %824 = load i64, i64* %21, align 8
  %825 = load i64, i64* %12, align 8
  %826 = icmp ult i64 %824, %825
  br i1 %826, label %827, label %831

827:                                              ; preds = %823
  %828 = load i8*, i8** %11, align 8
  %829 = load i64, i64* %21, align 8
  %830 = getelementptr inbounds i8, i8* %828, i64 %829
  store i8 39, i8* %830, align 1
  br label %831

831:                                              ; preds = %827, %823
  %832 = load i64, i64* %21, align 8
  %833 = add i64 %832, 1
  store i64 %833, i64* %21, align 8
  br label %834

834:                                              ; preds = %831
  store i8 0, i8* %28, align 1
  br label %835

835:                                              ; preds = %834, %807, %804
  br label %836

836:                                              ; preds = %835
  br label %837

837:                                              ; preds = %836
  %838 = load i64, i64* %21, align 8
  %839 = load i64, i64* %12, align 8
  %840 = icmp ult i64 %838, %839
  br i1 %840, label %841, label %846

841:                                              ; preds = %837
  %842 = load i8, i8* %31, align 1
  %843 = load i8*, i8** %11, align 8
  %844 = load i64, i64* %21, align 8
  %845 = getelementptr inbounds i8, i8* %843, i64 %844
  store i8 %842, i8* %845, align 1
  br label %846

846:                                              ; preds = %841, %837
  %847 = load i64, i64* %21, align 8
  %848 = add i64 %847, 1
  store i64 %848, i64* %21, align 8
  br label %849

849:                                              ; preds = %846
  %850 = load i8*, i8** %13, align 8
  %851 = load i64, i64* %20, align 8
  %852 = add i64 %851, 1
  store i64 %852, i64* %20, align 8
  %853 = getelementptr inbounds i8, i8* %850, i64 %852
  %854 = load i8, i8* %853, align 1
  store i8 %854, i8* %31, align 1
  br label %672

855:                                              ; preds = %802
  br label %950

856:                                              ; preds = %665, %662
  br label %857

857:                                              ; preds = %856, %543, %542, %489, %479, %474, %461, %420, %324
  %858 = load i8, i8* %25, align 1
  %859 = trunc i8 %858 to i1
  br i1 %859, label %860, label %863

860:                                              ; preds = %857
  %861 = load i32, i32* %15, align 4
  %862 = icmp ne i32 %861, 2
  br i1 %862, label %866, label %863

863:                                              ; preds = %860, %857
  %864 = load i8, i8* %27, align 1
  %865 = trunc i8 %864 to i1
  br i1 %865, label %866, label %883

866:                                              ; preds = %863, %860
  %867 = load i32*, i32** %17, align 8
  %868 = icmp ne i32* %867, null
  br i1 %868, label %869, label %883

869:                                              ; preds = %866
  %870 = load i32*, i32** %17, align 8
  %871 = load i8, i8* %31, align 1
  %872 = zext i8 %871 to i64
  %873 = udiv i64 %872, 32
  %874 = getelementptr inbounds i32, i32* %870, i64 %873
  %875 = load i32, i32* %874, align 4
  %876 = load i8, i8* %31, align 1
  %877 = zext i8 %876 to i64
  %878 = urem i64 %877, 32
  %879 = trunc i64 %878 to i32
  %880 = lshr i32 %875, %879
  %881 = and i32 %880, 1
  %882 = icmp ne i32 %881, 0
  br i1 %882, label %887, label %883

883:                                              ; preds = %869, %866, %863
  %884 = load i8, i8* %33, align 1
  %885 = trunc i8 %884 to i1
  br i1 %885, label %887, label %886

886:                                              ; preds = %883
  br label %950

887:                                              ; preds = %883, %869
  br label %888

888:                                              ; preds = %887, %459
  br label %889

889:                                              ; preds = %888
  %890 = load i8, i8* %27, align 1
  %891 = trunc i8 %890 to i1
  br i1 %891, label %892, label %893

892:                                              ; preds = %889
  br label %1086

893:                                              ; preds = %889
  store i8 1, i8* %34, align 1
  %894 = load i32, i32* %15, align 4
  %895 = icmp eq i32 %894, 2
  br i1 %895, label %896, label %936

896:                                              ; preds = %893
  %897 = load i8, i8* %28, align 1
  %898 = trunc i8 %897 to i1
  br i1 %898, label %936, label %899

899:                                              ; preds = %896
  br label %900

900:                                              ; preds = %899
  %901 = load i64, i64* %21, align 8
  %902 = load i64, i64* %12, align 8
  %903 = icmp ult i64 %901, %902
  br i1 %903, label %904, label %908

904:                                              ; preds = %900
  %905 = load i8*, i8** %11, align 8
  %906 = load i64, i64* %21, align 8
  %907 = getelementptr inbounds i8, i8* %905, i64 %906
  store i8 39, i8* %907, align 1
  br label %908

908:                                              ; preds = %904, %900
  %909 = load i64, i64* %21, align 8
  %910 = add i64 %909, 1
  store i64 %910, i64* %21, align 8
  br label %911

911:                                              ; preds = %908
  br label %912

912:                                              ; preds = %911
  %913 = load i64, i64* %21, align 8
  %914 = load i64, i64* %12, align 8
  %915 = icmp ult i64 %913, %914
  br i1 %915, label %916, label %920

916:                                              ; preds = %912
  %917 = load i8*, i8** %11, align 8
  %918 = load i64, i64* %21, align 8
  %919 = getelementptr inbounds i8, i8* %917, i64 %918
  store i8 36, i8* %919, align 1
  br label %920

920:                                              ; preds = %916, %912
  %921 = load i64, i64* %21, align 8
  %922 = add i64 %921, 1
  store i64 %922, i64* %21, align 8
  br label %923

923:                                              ; preds = %920
  br label %924

924:                                              ; preds = %923
  %925 = load i64, i64* %21, align 8
  %926 = load i64, i64* %12, align 8
  %927 = icmp ult i64 %925, %926
  br i1 %927, label %928, label %932

928:                                              ; preds = %924
  %929 = load i8*, i8** %11, align 8
  %930 = load i64, i64* %21, align 8
  %931 = getelementptr inbounds i8, i8* %929, i64 %930
  store i8 39, i8* %931, align 1
  br label %932

932:                                              ; preds = %928, %924
  %933 = load i64, i64* %21, align 8
  %934 = add i64 %933, 1
  store i64 %934, i64* %21, align 8
  br label %935

935:                                              ; preds = %932
  store i8 1, i8* %28, align 1
  br label %936

936:                                              ; preds = %935, %896, %893
  br label %937

937:                                              ; preds = %936
  %938 = load i64, i64* %21, align 8
  %939 = load i64, i64* %12, align 8
  %940 = icmp ult i64 %938, %939
  br i1 %940, label %941, label %945

941:                                              ; preds = %937
  %942 = load i8*, i8** %11, align 8
  %943 = load i64, i64* %21, align 8
  %944 = getelementptr inbounds i8, i8* %942, i64 %943
  store i8 92, i8* %944, align 1
  br label %945

945:                                              ; preds = %941, %937
  %946 = load i64, i64* %21, align 8
  %947 = add i64 %946, 1
  store i64 %947, i64* %21, align 8
  br label %948

948:                                              ; preds = %945
  br label %949

949:                                              ; preds = %948
  br label %950

950:                                              ; preds = %949, %886, %855, %446, %436
  br label %951

951:                                              ; preds = %950
  %952 = load i8, i8* %28, align 1
  %953 = trunc i8 %952 to i1
  br i1 %953, label %954, label %982

954:                                              ; preds = %951
  %955 = load i8, i8* %34, align 1
  %956 = trunc i8 %955 to i1
  br i1 %956, label %982, label %957

957:                                              ; preds = %954
  br label %958

958:                                              ; preds = %957
  %959 = load i64, i64* %21, align 8
  %960 = load i64, i64* %12, align 8
  %961 = icmp ult i64 %959, %960
  br i1 %961, label %962, label %966

962:                                              ; preds = %958
  %963 = load i8*, i8** %11, align 8
  %964 = load i64, i64* %21, align 8
  %965 = getelementptr inbounds i8, i8* %963, i64 %964
  store i8 39, i8* %965, align 1
  br label %966

966:                                              ; preds = %962, %958
  %967 = load i64, i64* %21, align 8
  %968 = add i64 %967, 1
  store i64 %968, i64* %21, align 8
  br label %969

969:                                              ; preds = %966
  br label %970

970:                                              ; preds = %969
  %971 = load i64, i64* %21, align 8
  %972 = load i64, i64* %12, align 8
  %973 = icmp ult i64 %971, %972
  br i1 %973, label %974, label %978

974:                                              ; preds = %970
  %975 = load i8*, i8** %11, align 8
  %976 = load i64, i64* %21, align 8
  %977 = getelementptr inbounds i8, i8* %975, i64 %976
  store i8 39, i8* %977, align 1
  br label %978

978:                                              ; preds = %974, %970
  %979 = load i64, i64* %21, align 8
  %980 = add i64 %979, 1
  store i64 %980, i64* %21, align 8
  br label %981

981:                                              ; preds = %978
  store i8 0, i8* %28, align 1
  br label %982

982:                                              ; preds = %981, %954, %951
  br label %983

983:                                              ; preds = %982
  br label %984

984:                                              ; preds = %983
  %985 = load i64, i64* %21, align 8
  %986 = load i64, i64* %12, align 8
  %987 = icmp ult i64 %985, %986
  br i1 %987, label %988, label %993

988:                                              ; preds = %984
  %989 = load i8, i8* %31, align 1
  %990 = load i8*, i8** %11, align 8
  %991 = load i64, i64* %21, align 8
  %992 = getelementptr inbounds i8, i8* %990, i64 %991
  store i8 %989, i8* %992, align 1
  br label %993

993:                                              ; preds = %988, %984
  %994 = load i64, i64* %21, align 8
  %995 = add i64 %994, 1
  store i64 %995, i64* %21, align 8
  br label %996

996:                                              ; preds = %993
  %997 = load i8, i8* %35, align 1
  %998 = trunc i8 %997 to i1
  br i1 %998, label %1000, label %999

999:                                              ; preds = %996
  store i8 0, i8* %30, align 1
  br label %1000

1000:                                             ; preds = %999, %996
  br label %1001

1001:                                             ; preds = %1000, %322
  %1002 = load i64, i64* %20, align 8
  %1003 = add i64 %1002, 1
  store i64 %1003, i64* %20, align 8
  br label %138, !llvm.loop !121

1004:                                             ; preds = %154
  %1005 = load i64, i64* %21, align 8
  %1006 = icmp eq i64 %1005, 0
  br i1 %1006, label %1007, label %1014

1007:                                             ; preds = %1004
  %1008 = load i32, i32* %15, align 4
  %1009 = icmp eq i32 %1008, 2
  br i1 %1009, label %1010, label %1014

1010:                                             ; preds = %1007
  %1011 = load i8, i8* %27, align 1
  %1012 = trunc i8 %1011 to i1
  br i1 %1012, label %1013, label %1014

1013:                                             ; preds = %1010
  br label %1086

1014:                                             ; preds = %1010, %1007, %1004
  %1015 = load i32, i32* %15, align 4
  %1016 = icmp eq i32 %1015, 2
  br i1 %1016, label %1017, label %1046

1017:                                             ; preds = %1014
  %1018 = load i8, i8* %27, align 1
  %1019 = trunc i8 %1018 to i1
  br i1 %1019, label %1046, label %1020

1020:                                             ; preds = %1017
  %1021 = load i8, i8* %29, align 1
  %1022 = trunc i8 %1021 to i1
  br i1 %1022, label %1023, label %1046

1023:                                             ; preds = %1020
  %1024 = load i8, i8* %30, align 1
  %1025 = trunc i8 %1024 to i1
  br i1 %1025, label %1026, label %1036

1026:                                             ; preds = %1023
  %1027 = load i8*, i8** %11, align 8
  %1028 = load i64, i64* %22, align 8
  %1029 = load i8*, i8** %13, align 8
  %1030 = load i64, i64* %14, align 8
  %1031 = load i32, i32* %16, align 4
  %1032 = load i32*, i32** %17, align 8
  %1033 = load i8*, i8** %18, align 8
  %1034 = load i8*, i8** %19, align 8
  %1035 = call i64 @quotearg_buffer_restyled(i8* %1027, i64 %1028, i8* %1029, i64 %1030, i32 5, i32 %1031, i32* %1032, i8* %1033, i8* %1034)
  store i64 %1035, i64* %10, align 8
  br label %1104

1036:                                             ; preds = %1023
  %1037 = load i64, i64* %12, align 8
  %1038 = icmp ne i64 %1037, 0
  br i1 %1038, label %1044, label %1039

1039:                                             ; preds = %1036
  %1040 = load i64, i64* %22, align 8
  %1041 = icmp ne i64 %1040, 0
  br i1 %1041, label %1042, label %1044

1042:                                             ; preds = %1039
  %1043 = load i64, i64* %22, align 8
  store i64 %1043, i64* %12, align 8
  store i64 0, i64* %21, align 8
  br label %50

1044:                                             ; preds = %1039, %1036
  br label %1045

1045:                                             ; preds = %1044
  br label %1046

1046:                                             ; preds = %1045, %1020, %1017, %1014
  %1047 = load i8*, i8** %23, align 8
  %1048 = icmp ne i8* %1047, null
  br i1 %1048, label %1049, label %1076

1049:                                             ; preds = %1046
  %1050 = load i8, i8* %27, align 1
  %1051 = trunc i8 %1050 to i1
  br i1 %1051, label %1076, label %1052

1052:                                             ; preds = %1049
  br label %1053

1053:                                             ; preds = %1072, %1052
  %1054 = load i8*, i8** %23, align 8
  %1055 = load i8, i8* %1054, align 1
  %1056 = icmp ne i8 %1055, 0
  br i1 %1056, label %1057, label %1075

1057:                                             ; preds = %1053
  br label %1058

1058:                                             ; preds = %1057
  %1059 = load i64, i64* %21, align 8
  %1060 = load i64, i64* %12, align 8
  %1061 = icmp ult i64 %1059, %1060
  br i1 %1061, label %1062, label %1068

1062:                                             ; preds = %1058
  %1063 = load i8*, i8** %23, align 8
  %1064 = load i8, i8* %1063, align 1
  %1065 = load i8*, i8** %11, align 8
  %1066 = load i64, i64* %21, align 8
  %1067 = getelementptr inbounds i8, i8* %1065, i64 %1066
  store i8 %1064, i8* %1067, align 1
  br label %1068

1068:                                             ; preds = %1062, %1058
  %1069 = load i64, i64* %21, align 8
  %1070 = add i64 %1069, 1
  store i64 %1070, i64* %21, align 8
  br label %1071

1071:                                             ; preds = %1068
  br label %1072

1072:                                             ; preds = %1071
  %1073 = load i8*, i8** %23, align 8
  %1074 = getelementptr inbounds i8, i8* %1073, i32 1
  store i8* %1074, i8** %23, align 8
  br label %1053, !llvm.loop !122

1075:                                             ; preds = %1053
  br label %1076

1076:                                             ; preds = %1075, %1049, %1046
  %1077 = load i64, i64* %21, align 8
  %1078 = load i64, i64* %12, align 8
  %1079 = icmp ult i64 %1077, %1078
  br i1 %1079, label %1080, label %1084

1080:                                             ; preds = %1076
  %1081 = load i8*, i8** %11, align 8
  %1082 = load i64, i64* %21, align 8
  %1083 = getelementptr inbounds i8, i8* %1081, i64 %1082
  store i8 0, i8* %1083, align 1
  br label %1084

1084:                                             ; preds = %1080, %1076
  %1085 = load i64, i64* %21, align 8
  store i64 %1085, i64* %10, align 8
  br label %1104

1086:                                             ; preds = %1013, %892, %682, %632, %496, %488, %454, %435, %359, %330, %211, %195
  %1087 = load i32, i32* %15, align 4
  %1088 = icmp eq i32 %1087, 2
  br i1 %1088, label %1089, label %1093

1089:                                             ; preds = %1086
  %1090 = load i8, i8* %25, align 1
  %1091 = trunc i8 %1090 to i1
  br i1 %1091, label %1092, label %1093

1092:                                             ; preds = %1089
  store i32 4, i32* %15, align 4
  br label %1093

1093:                                             ; preds = %1092, %1089, %1086
  %1094 = load i8*, i8** %11, align 8
  %1095 = load i64, i64* %12, align 8
  %1096 = load i8*, i8** %13, align 8
  %1097 = load i64, i64* %14, align 8
  %1098 = load i32, i32* %15, align 4
  %1099 = load i32, i32* %16, align 4
  %1100 = and i32 %1099, -3
  %1101 = load i8*, i8** %18, align 8
  %1102 = load i8*, i8** %19, align 8
  %1103 = call i64 @quotearg_buffer_restyled(i8* %1094, i64 %1095, i8* %1096, i64 %1097, i32 %1098, i32 %1100, i32* null, i8* %1101, i8* %1102)
  store i64 %1103, i64* %10, align 8
  br label %1104

1104:                                             ; preds = %1093, %1084, %1026
  %1105 = load i64, i64* %10, align 8
  ret i64 %1105
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  %8 = load i8*, i8** %4, align 8
  %9 = call i8* @gettext(i8* %8) #14
  store i8* %9, i8** %6, align 8
  %10 = load i8*, i8** %6, align 8
  %11 = load i8*, i8** %4, align 8
  %12 = icmp ne i8* %10, %11
  br i1 %12, label %13, label %15

13:                                               ; preds = %2
  %14 = load i8*, i8** %6, align 8
  store i8* %14, i8** %3, align 8
  br label %45

15:                                               ; preds = %2
  %16 = call i8* @locale_charset()
  store i8* %16, i8** %7, align 8
  %17 = load i8*, i8** %7, align 8
  %18 = call i32 @c_strcasecmp(i8* %17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.380, i64 0, i64 0)) #17
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %28

20:                                               ; preds = %15
  %21 = load i8*, i8** %4, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 0
  %23 = load i8, i8* %22, align 1
  %24 = sext i8 %23 to i32
  %25 = icmp eq i32 %24, 96
  %26 = zext i1 %25 to i64
  %27 = select i1 %25, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.381, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.382, i64 0, i64 0)
  store i8* %27, i8** %3, align 8
  br label %45

28:                                               ; preds = %15
  %29 = load i8*, i8** %7, align 8
  %30 = call i32 @c_strcasecmp(i8* %29, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.383, i64 0, i64 0)) #17
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %40

32:                                               ; preds = %28
  %33 = load i8*, i8** %4, align 8
  %34 = getelementptr inbounds i8, i8* %33, i64 0
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i32
  %37 = icmp eq i32 %36, 96
  %38 = zext i1 %37 to i64
  %39 = select i1 %37, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.384, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.385, i64 0, i64 0)
  store i8* %39, i8** %3, align 8
  br label %45

40:                                               ; preds = %28
  %41 = load i32, i32* %5, align 4
  %42 = icmp eq i32 %41, 9
  %43 = zext i1 %42 to i64
  %44 = select i1 %42, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.377, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.379, i64 0, i64 0)
  store i8* %44, i8** %3, align 8
  br label %45

45:                                               ; preds = %40, %32, %20, %13
  %46 = load i8*, i8** %3, align 8
  ret i8* %46
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_style(i32 %0, i32 %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca %struct.quoting_options, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i8* %2, i8** %6, align 8
  %8 = load i32, i32* %5, align 4
  call void @quoting_options_from_style(%struct.quoting_options* sret(%struct.quoting_options) align 8 %7, i32 %8)
  %9 = load i32, i32* %4, align 4
  %10 = load i8*, i8** %6, align 8
  %11 = call i8* @quotearg_n_options(i32 %9, i8* %10, i64 -1, %struct.quoting_options* %7)
  ret i8* %11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @quoting_options_from_style(%struct.quoting_options* noalias sret(%struct.quoting_options) align 8 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  store i32 %1, i32* %3, align 4
  %4 = bitcast %struct.quoting_options* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 56, i1 false)
  %5 = load i32, i32* %3, align 4
  %6 = icmp eq i32 %5, 10
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  call void @abort() #16
  unreachable

8:                                                ; preds = %2
  %9 = load i32, i32* %3, align 4
  %10 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %0, i32 0, i32 0
  store i32 %9, i32* %10, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32 %0, i8* %1, i64 %2, %struct.quoting_options* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.quoting_options*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.bin_str*, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store i32 %0, i32* %5, align 4
  store i8* %1, i8** %6, align 8
  store i64 %2, i64* %7, align 8
  store %struct.quoting_options* %3, %struct.quoting_options** %8, align 8
  %17 = call i32* @__errno_location() #18
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %9, align 4
  %19 = load %struct.bin_str*, %struct.bin_str** @slotvec, align 8
  store %struct.bin_str* %19, %struct.bin_str** %10, align 8
  %20 = load i32, i32* %5, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %4
  call void @abort() #16
  unreachable

23:                                               ; preds = %4
  %24 = load i32, i32* @nslots, align 4
  %25 = load i32, i32* %5, align 4
  %26 = icmp sle i32 %24, %25
  br i1 %26, label %27, label %69

27:                                               ; preds = %23
  %28 = load %struct.bin_str*, %struct.bin_str** %10, align 8
  %29 = icmp eq %struct.bin_str* %28, @slotvec0
  %30 = zext i1 %29 to i8
  store i8 %30, i8* %11, align 1
  store i32 2147483646, i32* %12, align 4
  %31 = load i32, i32* %12, align 4
  %32 = load i32, i32* %5, align 4
  %33 = icmp slt i32 %31, %32
  br i1 %33, label %34, label %35

34:                                               ; preds = %27
  call void @xalloc_die() #15
  unreachable

35:                                               ; preds = %27
  %36 = load i8, i8* %11, align 1
  %37 = trunc i8 %36 to i1
  br i1 %37, label %38, label %39

38:                                               ; preds = %35
  br label %41

39:                                               ; preds = %35
  %40 = load %struct.bin_str*, %struct.bin_str** %10, align 8
  br label %41

41:                                               ; preds = %39, %38
  %42 = phi %struct.bin_str* [ null, %38 ], [ %40, %39 ]
  %43 = bitcast %struct.bin_str* %42 to i8*
  %44 = load i32, i32* %5, align 4
  %45 = add nsw i32 %44, 1
  %46 = sext i32 %45 to i64
  %47 = mul i64 %46, 16
  %48 = call i8* @xrealloc(i8* %43, i64 %47)
  %49 = bitcast i8* %48 to %struct.bin_str*
  store %struct.bin_str* %49, %struct.bin_str** %10, align 8
  store %struct.bin_str* %49, %struct.bin_str** @slotvec, align 8
  %50 = load i8, i8* %11, align 1
  %51 = trunc i8 %50 to i1
  br i1 %51, label %52, label %55

52:                                               ; preds = %41
  %53 = load %struct.bin_str*, %struct.bin_str** %10, align 8
  %54 = bitcast %struct.bin_str* %53 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 bitcast (%struct.bin_str* @slotvec0 to i8*), i64 16, i1 false)
  br label %55

55:                                               ; preds = %52, %41
  %56 = load %struct.bin_str*, %struct.bin_str** %10, align 8
  %57 = load i32, i32* @nslots, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %56, i64 %58
  %60 = bitcast %struct.bin_str* %59 to i8*
  %61 = load i32, i32* %5, align 4
  %62 = add nsw i32 %61, 1
  %63 = load i32, i32* @nslots, align 4
  %64 = sub nsw i32 %62, %63
  %65 = sext i32 %64 to i64
  %66 = mul i64 %65, 16
  call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 %66, i1 false)
  %67 = load i32, i32* %5, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* @nslots, align 4
  br label %69

69:                                               ; preds = %55, %23
  %70 = load %struct.bin_str*, %struct.bin_str** %10, align 8
  %71 = load i32, i32* %5, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %70, i64 %72
  %74 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %73, i32 0, i32 0
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %13, align 8
  %76 = load %struct.bin_str*, %struct.bin_str** %10, align 8
  %77 = load i32, i32* %5, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %76, i64 %78
  %80 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %79, i32 0, i32 1
  %81 = load i8*, i8** %80, align 8
  store i8* %81, i8** %14, align 8
  %82 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8
  %83 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %82, i32 0, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = or i32 %84, 1
  store i32 %85, i32* %15, align 4
  %86 = load i8*, i8** %14, align 8
  %87 = load i64, i64* %13, align 8
  %88 = load i8*, i8** %6, align 8
  %89 = load i64, i64* %7, align 8
  %90 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8
  %91 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %90, i32 0, i32 0
  %92 = load i32, i32* %91, align 8
  %93 = load i32, i32* %15, align 4
  %94 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8
  %95 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %94, i32 0, i32 2
  %96 = getelementptr inbounds [8 x i32], [8 x i32]* %95, i64 0, i64 0
  %97 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8
  %98 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %97, i32 0, i32 3
  %99 = load i8*, i8** %98, align 8
  %100 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8
  %101 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %100, i32 0, i32 4
  %102 = load i8*, i8** %101, align 8
  %103 = call i64 @quotearg_buffer_restyled(i8* %86, i64 %87, i8* %88, i64 %89, i32 %92, i32 %93, i32* %96, i8* %99, i8* %102)
  store i64 %103, i64* %16, align 8
  %104 = load i64, i64* %13, align 8
  %105 = load i64, i64* %16, align 8
  %106 = icmp ule i64 %104, %105
  br i1 %106, label %107, label %145

107:                                              ; preds = %69
  %108 = load i64, i64* %16, align 8
  %109 = add i64 %108, 1
  store i64 %109, i64* %13, align 8
  %110 = load %struct.bin_str*, %struct.bin_str** %10, align 8
  %111 = load i32, i32* %5, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %110, i64 %112
  %114 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %113, i32 0, i32 0
  store i64 %109, i64* %114, align 8
  %115 = load i8*, i8** %14, align 8
  %116 = icmp ne i8* %115, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0)
  br i1 %116, label %117, label %119

117:                                              ; preds = %107
  %118 = load i8*, i8** %14, align 8
  call void @free(i8* %118) #14
  br label %119

119:                                              ; preds = %117, %107
  %120 = load i64, i64* %13, align 8
  %121 = call noalias i8* @xcharalloc(i64 %120)
  store i8* %121, i8** %14, align 8
  %122 = load %struct.bin_str*, %struct.bin_str** %10, align 8
  %123 = load i32, i32* %5, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %122, i64 %124
  %126 = getelementptr inbounds %struct.bin_str, %struct.bin_str* %125, i32 0, i32 1
  store i8* %121, i8** %126, align 8
  %127 = load i8*, i8** %14, align 8
  %128 = load i64, i64* %13, align 8
  %129 = load i8*, i8** %6, align 8
  %130 = load i64, i64* %7, align 8
  %131 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8
  %132 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %131, i32 0, i32 0
  %133 = load i32, i32* %132, align 8
  %134 = load i32, i32* %15, align 4
  %135 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8
  %136 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %135, i32 0, i32 2
  %137 = getelementptr inbounds [8 x i32], [8 x i32]* %136, i64 0, i64 0
  %138 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8
  %139 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %138, i32 0, i32 3
  %140 = load i8*, i8** %139, align 8
  %141 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8
  %142 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %141, i32 0, i32 4
  %143 = load i8*, i8** %142, align 8
  %144 = call i64 @quotearg_buffer_restyled(i8* %127, i64 %128, i8* %129, i64 %130, i32 %133, i32 %134, i32* %137, i8* %140, i8* %143)
  br label %145

145:                                              ; preds = %119, %69
  %146 = load i32, i32* %9, align 4
  %147 = call i32* @__errno_location() #18
  store i32 %146, i32* %147, align 4
  %148 = load i8*, i8** %14, align 8
  ret i8* %148
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_style(i32 %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  %5 = load i32, i32* %3, align 4
  %6 = load i8*, i8** %4, align 8
  %7 = call i8* @quotearg_n_style(i32 0, i32 %5, i8* %6)
  ret i8* %7
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8* %0, i64 %1, i8 signext %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8, align 1
  %7 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  store i8 %2, i8* %6, align 1
  %8 = bitcast %struct.quoting_options* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false)
  %9 = load i8, i8* %6, align 1
  %10 = call i32 @set_char_quoting(%struct.quoting_options* %7, i8 signext %9, i32 1)
  %11 = load i8*, i8** %4, align 8
  %12 = load i64, i64* %5, align 8
  %13 = call i8* @quotearg_n_options(i32 0, i8* %11, i64 %12, %struct.quoting_options* %7)
  ret i8* %13
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8* %0, i8 signext %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  store i8 %1, i8* %4, align 1
  %5 = load i8*, i8** %3, align 8
  %6 = load i8, i8* %4, align 1
  %7 = call i8* @quotearg_char_mem(i8* %5, i64 -1, i8 signext %6)
  ret i8* %7
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = call i8* @quotearg_char(i8* %3, i8 signext 58)
  ret i8* %4
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_style_colon(i32 %0, i32 %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca %struct.quoting_options, align 8
  %8 = alloca %struct.quoting_options, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i8* %2, i8** %6, align 8
  %9 = load i32, i32* %5, align 4
  call void @quoting_options_from_style(%struct.quoting_options* sret(%struct.quoting_options) align 8 %8, i32 %9)
  %10 = bitcast %struct.quoting_options* %7 to i8*
  %11 = bitcast %struct.quoting_options* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 56, i1 false)
  %12 = call i32 @set_char_quoting(%struct.quoting_options* %7, i8 signext 58, i32 1)
  %13 = load i32, i32* %4, align 4
  %14 = load i8*, i8** %6, align 8
  %15 = call i8* @quotearg_n_options(i32 %13, i8* %14, i64 -1, %struct.quoting_options* %7)
  ret i8* %15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n_mem(i32 %0, i8* %1, i64 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  store i32 %0, i32* %4, align 4
  store i8* %1, i8** %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = load i8*, i8** %5, align 8
  %9 = load i64, i64* %6, align 8
  %10 = call i8* @quotearg_n_options(i32 %7, i8* %8, i64 %9, %struct.quoting_options* @quote_quoting_options)
  ret i8* %10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n(i32 %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8* %1, i8** %4, align 8
  %5 = load i32, i32* %3, align 4
  %6 = load i8*, i8** %4, align 8
  %7 = call i8* @quote_n_mem(i32 %5, i8* %6, i64 -1)
  ret i8* %7
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = call i8* @quote_n(i32 0, i8* %3)
  ret i8* %4
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @freecon(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @getfilecon(i8* %0, i8** %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8**, align 8
  store i8* %0, i8** %3, align 8
  store i8** %1, i8*** %4, align 8
  %5 = call i32* @__errno_location() #18
  store i32 95, i32* %5, align 4
  ret i32 -1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @lgetfilecon(i8* %0, i8** %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8**, align 8
  store i8* %0, i8** %3, align 8
  store i8** %1, i8*** %4, align 8
  %5 = call i32* @__errno_location() #18
  store i32 95, i32* %5, align 4
  ret i32 -1
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal { i64, i64 } @get_stat_atime(%struct.stat* %0) #9 {
  %2 = alloca %struct.dev_ino, align 8
  %3 = alloca %struct.stat*, align 8
  store %struct.stat* %0, %struct.stat** %3, align 8
  %4 = load %struct.stat*, %struct.stat** %3, align 8
  %5 = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 11
  %6 = bitcast %struct.dev_ino* %2 to i8*
  %7 = bitcast %struct.dev_ino* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false)
  %8 = bitcast %struct.dev_ino* %2 to { i64, i64 }*
  %9 = load { i64, i64 }, { i64, i64 }* %8, align 8
  ret { i64, i64 } %9
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal { i64, i64 } @get_stat_ctime(%struct.stat* %0) #9 {
  %2 = alloca %struct.dev_ino, align 8
  %3 = alloca %struct.stat*, align 8
  store %struct.stat* %0, %struct.stat** %3, align 8
  %4 = load %struct.stat*, %struct.stat** %3, align 8
  %5 = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 13
  %6 = bitcast %struct.dev_ino* %2 to i8*
  %7 = bitcast %struct.dev_ino* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false)
  %8 = bitcast %struct.dev_ino* %2 to { i64, i64 }*
  %9 = load { i64, i64 }, { i64, i64 }* %8, align 8
  ret { i64, i64 } %9
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal { i64, i64 } @get_stat_mtime(%struct.stat* %0) #9 {
  %2 = alloca %struct.dev_ino, align 8
  %3 = alloca %struct.stat*, align 8
  store %struct.stat* %0, %struct.stat** %3, align 8
  %4 = load %struct.stat*, %struct.stat** %3, align 8
  %5 = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 12
  %6 = bitcast %struct.dev_ino* %2 to i8*
  %7 = bitcast %struct.dev_ino* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false)
  %8 = bitcast %struct.dev_ino* %2 to { i64, i64 }*
  %9 = load { i64, i64 }, { i64, i64 }* %8, align 8
  ret { i64, i64 } %9
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @timespec_cmp(i64 %0, i64 %1, i64 %2, i64 %3) #9 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.dev_ino, align 8
  %7 = alloca %struct.dev_ino, align 8
  %8 = bitcast %struct.dev_ino* %6 to { i64, i64 }*
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0
  store i64 %0, i64* %9, align 8
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1
  store i64 %1, i64* %10, align 8
  %11 = bitcast %struct.dev_ino* %7 to { i64, i64 }*
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0
  store i64 %2, i64* %12, align 8
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1
  store i64 %3, i64* %13, align 8
  %14 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %6, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %7, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = icmp slt i64 %15, %17
  br i1 %18, label %19, label %20

19:                                               ; preds = %4
  store i32 -1, i32* %5, align 4
  br label %56

20:                                               ; preds = %4
  %21 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %6, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %7, i32 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = icmp sgt i64 %22, %24
  br i1 %25, label %26, label %27

26:                                               ; preds = %20
  store i32 1, i32* %5, align 4
  br label %56

27:                                               ; preds = %20
  %28 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %6, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = icmp sle i64 -1, %29
  br i1 %30, label %31, label %36

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %6, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = icmp sle i64 %33, 2000000000
  br i1 %34, label %35, label %36

35:                                               ; preds = %31
  br label %38

36:                                               ; preds = %31, %27
  unreachable

37:                                               ; No predecessors!
  br label %38

38:                                               ; preds = %37, %35
  %39 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %7, i32 0, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = icmp sle i64 -1, %40
  br i1 %41, label %42, label %47

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %7, i32 0, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = icmp sle i64 %44, 2000000000
  br i1 %45, label %46, label %47

46:                                               ; preds = %42
  br label %49

47:                                               ; preds = %42, %38
  unreachable

48:                                               ; No predecessors!
  br label %49

49:                                               ; preds = %48, %46
  %50 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %6, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %7, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = sub nsw i64 %51, %53
  %55 = trunc i64 %54 to i32
  store i32 %55, i32* %5, align 4
  br label %56

56:                                               ; preds = %49, %26, %19
  %57 = load i32, i32* %5, align 4
  ret i32 %57
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE* %0, i8* %1, i8* %2, i8* %3, i8** %4, i64 %5) #0 {
  %7 = alloca %struct._IO_FILE*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8**, align 8
  %12 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %7, align 8
  store i8* %1, i8** %8, align 8
  store i8* %2, i8** %9, align 8
  store i8* %3, i8** %10, align 8
  store i8** %4, i8*** %11, align 8
  store i64 %5, i64* %12, align 8
  %13 = load i8*, i8** %8, align 8
  %14 = icmp ne i8* %13, null
  br i1 %14, label %15, label %21

15:                                               ; preds = %6
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %17 = load i8*, i8** %8, align 8
  %18 = load i8*, i8** %9, align 8
  %19 = load i8*, i8** %10, align 8
  %20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.426, i64 0, i64 0), i8* %17, i8* %18, i8* %19)
  br label %26

21:                                               ; preds = %6
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %23 = load i8*, i8** %9, align 8
  %24 = load i8*, i8** %10, align 8
  %25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.427, i64 0, i64 0), i8* %23, i8* %24)
  br label %26

26:                                               ; preds = %21, %15
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %28 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.428, i64 0, i64 0)) #14
  %29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %28, i32 2018)
  %30 = call i8* @gettext(i8* getelementptr inbounds ([204 x i8], [204 x i8]* @.str.3.429, i64 0, i64 0)) #14
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %32 = call i32 @fputs_unlocked(i8* %30, %struct._IO_FILE* %31)
  %33 = load i64, i64* %12, align 8
  switch i64 %33, label %206 [
    i64 0, label %34
    i64 1, label %35
    i64 2, label %42
    i64 3, label %52
    i64 4, label %65
    i64 5, label %81
    i64 6, label %100
    i64 7, label %122
    i64 8, label %147
    i64 9, label %175
  ]

34:                                               ; preds = %26
  call void @abort() #16
  unreachable

35:                                               ; preds = %26
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %37 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4.430, i64 0, i64 0)) #14
  %38 = load i8**, i8*** %11, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 0
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* %37, i8* %40)
  br label %237

42:                                               ; preds = %26
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %44 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5.431, i64 0, i64 0)) #14
  %45 = load i8**, i8*** %11, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 0
  %47 = load i8*, i8** %46, align 8
  %48 = load i8**, i8*** %11, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 1
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* %44, i8* %47, i8* %50)
  br label %237

52:                                               ; preds = %26
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %54 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6.432, i64 0, i64 0)) #14
  %55 = load i8**, i8*** %11, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 0
  %57 = load i8*, i8** %56, align 8
  %58 = load i8**, i8*** %11, align 8
  %59 = getelementptr inbounds i8*, i8** %58, i64 1
  %60 = load i8*, i8** %59, align 8
  %61 = load i8**, i8*** %11, align 8
  %62 = getelementptr inbounds i8*, i8** %61, i64 2
  %63 = load i8*, i8** %62, align 8
  %64 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %53, i8* %54, i8* %57, i8* %60, i8* %63)
  br label %237

65:                                               ; preds = %26
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %67 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.7.433, i64 0, i64 0)) #14
  %68 = load i8**, i8*** %11, align 8
  %69 = getelementptr inbounds i8*, i8** %68, i64 0
  %70 = load i8*, i8** %69, align 8
  %71 = load i8**, i8*** %11, align 8
  %72 = getelementptr inbounds i8*, i8** %71, i64 1
  %73 = load i8*, i8** %72, align 8
  %74 = load i8**, i8*** %11, align 8
  %75 = getelementptr inbounds i8*, i8** %74, i64 2
  %76 = load i8*, i8** %75, align 8
  %77 = load i8**, i8*** %11, align 8
  %78 = getelementptr inbounds i8*, i8** %77, i64 3
  %79 = load i8*, i8** %78, align 8
  %80 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %66, i8* %67, i8* %70, i8* %73, i8* %76, i8* %79)
  br label %237

81:                                               ; preds = %26
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %83 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.8.434, i64 0, i64 0)) #14
  %84 = load i8**, i8*** %11, align 8
  %85 = getelementptr inbounds i8*, i8** %84, i64 0
  %86 = load i8*, i8** %85, align 8
  %87 = load i8**, i8*** %11, align 8
  %88 = getelementptr inbounds i8*, i8** %87, i64 1
  %89 = load i8*, i8** %88, align 8
  %90 = load i8**, i8*** %11, align 8
  %91 = getelementptr inbounds i8*, i8** %90, i64 2
  %92 = load i8*, i8** %91, align 8
  %93 = load i8**, i8*** %11, align 8
  %94 = getelementptr inbounds i8*, i8** %93, i64 3
  %95 = load i8*, i8** %94, align 8
  %96 = load i8**, i8*** %11, align 8
  %97 = getelementptr inbounds i8*, i8** %96, i64 4
  %98 = load i8*, i8** %97, align 8
  %99 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %82, i8* %83, i8* %86, i8* %89, i8* %92, i8* %95, i8* %98)
  br label %237

100:                                              ; preds = %26
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %102 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.9.435, i64 0, i64 0)) #14
  %103 = load i8**, i8*** %11, align 8
  %104 = getelementptr inbounds i8*, i8** %103, i64 0
  %105 = load i8*, i8** %104, align 8
  %106 = load i8**, i8*** %11, align 8
  %107 = getelementptr inbounds i8*, i8** %106, i64 1
  %108 = load i8*, i8** %107, align 8
  %109 = load i8**, i8*** %11, align 8
  %110 = getelementptr inbounds i8*, i8** %109, i64 2
  %111 = load i8*, i8** %110, align 8
  %112 = load i8**, i8*** %11, align 8
  %113 = getelementptr inbounds i8*, i8** %112, i64 3
  %114 = load i8*, i8** %113, align 8
  %115 = load i8**, i8*** %11, align 8
  %116 = getelementptr inbounds i8*, i8** %115, i64 4
  %117 = load i8*, i8** %116, align 8
  %118 = load i8**, i8*** %11, align 8
  %119 = getelementptr inbounds i8*, i8** %118, i64 5
  %120 = load i8*, i8** %119, align 8
  %121 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %101, i8* %102, i8* %105, i8* %108, i8* %111, i8* %114, i8* %117, i8* %120)
  br label %237

122:                                              ; preds = %26
  %123 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %124 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.10.436, i64 0, i64 0)) #14
  %125 = load i8**, i8*** %11, align 8
  %126 = getelementptr inbounds i8*, i8** %125, i64 0
  %127 = load i8*, i8** %126, align 8
  %128 = load i8**, i8*** %11, align 8
  %129 = getelementptr inbounds i8*, i8** %128, i64 1
  %130 = load i8*, i8** %129, align 8
  %131 = load i8**, i8*** %11, align 8
  %132 = getelementptr inbounds i8*, i8** %131, i64 2
  %133 = load i8*, i8** %132, align 8
  %134 = load i8**, i8*** %11, align 8
  %135 = getelementptr inbounds i8*, i8** %134, i64 3
  %136 = load i8*, i8** %135, align 8
  %137 = load i8**, i8*** %11, align 8
  %138 = getelementptr inbounds i8*, i8** %137, i64 4
  %139 = load i8*, i8** %138, align 8
  %140 = load i8**, i8*** %11, align 8
  %141 = getelementptr inbounds i8*, i8** %140, i64 5
  %142 = load i8*, i8** %141, align 8
  %143 = load i8**, i8*** %11, align 8
  %144 = getelementptr inbounds i8*, i8** %143, i64 6
  %145 = load i8*, i8** %144, align 8
  %146 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %123, i8* %124, i8* %127, i8* %130, i8* %133, i8* %136, i8* %139, i8* %142, i8* %145)
  br label %237

147:                                              ; preds = %26
  %148 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %149 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.11.437, i64 0, i64 0)) #14
  %150 = load i8**, i8*** %11, align 8
  %151 = getelementptr inbounds i8*, i8** %150, i64 0
  %152 = load i8*, i8** %151, align 8
  %153 = load i8**, i8*** %11, align 8
  %154 = getelementptr inbounds i8*, i8** %153, i64 1
  %155 = load i8*, i8** %154, align 8
  %156 = load i8**, i8*** %11, align 8
  %157 = getelementptr inbounds i8*, i8** %156, i64 2
  %158 = load i8*, i8** %157, align 8
  %159 = load i8**, i8*** %11, align 8
  %160 = getelementptr inbounds i8*, i8** %159, i64 3
  %161 = load i8*, i8** %160, align 8
  %162 = load i8**, i8*** %11, align 8
  %163 = getelementptr inbounds i8*, i8** %162, i64 4
  %164 = load i8*, i8** %163, align 8
  %165 = load i8**, i8*** %11, align 8
  %166 = getelementptr inbounds i8*, i8** %165, i64 5
  %167 = load i8*, i8** %166, align 8
  %168 = load i8**, i8*** %11, align 8
  %169 = getelementptr inbounds i8*, i8** %168, i64 6
  %170 = load i8*, i8** %169, align 8
  %171 = load i8**, i8*** %11, align 8
  %172 = getelementptr inbounds i8*, i8** %171, i64 7
  %173 = load i8*, i8** %172, align 8
  %174 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %148, i8* %149, i8* %152, i8* %155, i8* %158, i8* %161, i8* %164, i8* %167, i8* %170, i8* %173)
  br label %237

175:                                              ; preds = %26
  %176 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %177 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.12.438, i64 0, i64 0)) #14
  %178 = load i8**, i8*** %11, align 8
  %179 = getelementptr inbounds i8*, i8** %178, i64 0
  %180 = load i8*, i8** %179, align 8
  %181 = load i8**, i8*** %11, align 8
  %182 = getelementptr inbounds i8*, i8** %181, i64 1
  %183 = load i8*, i8** %182, align 8
  %184 = load i8**, i8*** %11, align 8
  %185 = getelementptr inbounds i8*, i8** %184, i64 2
  %186 = load i8*, i8** %185, align 8
  %187 = load i8**, i8*** %11, align 8
  %188 = getelementptr inbounds i8*, i8** %187, i64 3
  %189 = load i8*, i8** %188, align 8
  %190 = load i8**, i8*** %11, align 8
  %191 = getelementptr inbounds i8*, i8** %190, i64 4
  %192 = load i8*, i8** %191, align 8
  %193 = load i8**, i8*** %11, align 8
  %194 = getelementptr inbounds i8*, i8** %193, i64 5
  %195 = load i8*, i8** %194, align 8
  %196 = load i8**, i8*** %11, align 8
  %197 = getelementptr inbounds i8*, i8** %196, i64 6
  %198 = load i8*, i8** %197, align 8
  %199 = load i8**, i8*** %11, align 8
  %200 = getelementptr inbounds i8*, i8** %199, i64 7
  %201 = load i8*, i8** %200, align 8
  %202 = load i8**, i8*** %11, align 8
  %203 = getelementptr inbounds i8*, i8** %202, i64 8
  %204 = load i8*, i8** %203, align 8
  %205 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %176, i8* %177, i8* %180, i8* %183, i8* %186, i8* %189, i8* %192, i8* %195, i8* %198, i8* %201, i8* %204)
  br label %237

206:                                              ; preds = %26
  %207 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %208 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.13.439, i64 0, i64 0)) #14
  %209 = load i8**, i8*** %11, align 8
  %210 = getelementptr inbounds i8*, i8** %209, i64 0
  %211 = load i8*, i8** %210, align 8
  %212 = load i8**, i8*** %11, align 8
  %213 = getelementptr inbounds i8*, i8** %212, i64 1
  %214 = load i8*, i8** %213, align 8
  %215 = load i8**, i8*** %11, align 8
  %216 = getelementptr inbounds i8*, i8** %215, i64 2
  %217 = load i8*, i8** %216, align 8
  %218 = load i8**, i8*** %11, align 8
  %219 = getelementptr inbounds i8*, i8** %218, i64 3
  %220 = load i8*, i8** %219, align 8
  %221 = load i8**, i8*** %11, align 8
  %222 = getelementptr inbounds i8*, i8** %221, i64 4
  %223 = load i8*, i8** %222, align 8
  %224 = load i8**, i8*** %11, align 8
  %225 = getelementptr inbounds i8*, i8** %224, i64 5
  %226 = load i8*, i8** %225, align 8
  %227 = load i8**, i8*** %11, align 8
  %228 = getelementptr inbounds i8*, i8** %227, i64 6
  %229 = load i8*, i8** %228, align 8
  %230 = load i8**, i8*** %11, align 8
  %231 = getelementptr inbounds i8*, i8** %230, i64 7
  %232 = load i8*, i8** %231, align 8
  %233 = load i8**, i8*** %11, align 8
  %234 = getelementptr inbounds i8*, i8** %233, i64 8
  %235 = load i8*, i8** %234, align 8
  %236 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %207, i8* %208, i8* %211, i8* %214, i8* %217, i8* %220, i8* %223, i8* %226, i8* %229, i8* %232, i8* %235)
  br label %237

237:                                              ; preds = %206, %175, %147, %122, %100, %81, %65, %52, %42, %35
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE* %0, i8* %1, i8* %2, i8* %3, %struct.__va_list_tag* %4) #0 {
  %6 = alloca %struct._IO_FILE*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca %struct.__va_list_tag*, align 8
  %11 = alloca i64, align 8
  %12 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %6, align 8
  store i8* %1, i8** %7, align 8
  store i8* %2, i8** %8, align 8
  store i8* %3, i8** %9, align 8
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %10, align 8
  store i64 0, i64* %11, align 8
  br label %13

13:                                               ; preds = %41, %5
  %14 = load i64, i64* %11, align 8
  %15 = icmp ult i64 %14, 10
  br i1 %15, label %16, label %38

16:                                               ; preds = %13
  %17 = load %struct.__va_list_tag*, %struct.__va_list_tag** %10, align 8
  %18 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %17, i32 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = icmp ule i32 %19, 40
  br i1 %20, label %21, label %27

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %17, i32 0, i32 3
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr i8, i8* %23, i32 %19
  %25 = bitcast i8* %24 to i8**
  %26 = add i32 %19, 8
  store i32 %26, i32* %18, align 8
  br label %32

27:                                               ; preds = %16
  %28 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %17, i32 0, i32 2
  %29 = load i8*, i8** %28, align 8
  %30 = bitcast i8* %29 to i8**
  %31 = getelementptr i8, i8* %29, i32 8
  store i8* %31, i8** %28, align 8
  br label %32

32:                                               ; preds = %27, %21
  %33 = phi i8** [ %25, %21 ], [ %30, %27 ]
  %34 = load i8*, i8** %33, align 8
  %35 = load i64, i64* %11, align 8
  %36 = getelementptr inbounds [10 x i8*], [10 x i8*]* %12, i64 0, i64 %35
  store i8* %34, i8** %36, align 8
  %37 = icmp ne i8* %34, null
  br label %38

38:                                               ; preds = %32, %13
  %39 = phi i1 [ false, %13 ], [ %37, %32 ]
  br i1 %39, label %40, label %44

40:                                               ; preds = %38
  br label %41

41:                                               ; preds = %40
  %42 = load i64, i64* %11, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %11, align 8
  br label %13, !llvm.loop !123

44:                                               ; preds = %38
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %46 = load i8*, i8** %7, align 8
  %47 = load i8*, i8** %8, align 8
  %48 = load i8*, i8** %9, align 8
  %49 = getelementptr inbounds [10 x i8*], [10 x i8*]* %12, i64 0, i64 0
  %50 = load i64, i64* %11, align 8
  call void @version_etc_arn(%struct._IO_FILE* %45, i8* %46, i8* %47, i8* %48, i8** %49, i64 %50)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE* %0, i8* %1, i8* %2, i8* %3, ...) #0 {
  %5 = alloca %struct._IO_FILE*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  store i8* %3, i8** %8, align 8
  %10 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %9, i64 0, i64 0
  %11 = bitcast %struct.__va_list_tag* %10 to i8*
  call void @llvm.va_start(i8* %11)
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %13 = load i8*, i8** %6, align 8
  %14 = load i8*, i8** %7, align 8
  %15 = load i8*, i8** %8, align 8
  %16 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %9, i64 0, i64 0
  call void @version_etc_va(%struct._IO_FILE* %12, i8* %13, i8* %14, i8* %15, %struct.__va_list_tag* %16)
  %17 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %9, i64 0, i64 0
  %18 = bitcast %struct.__va_list_tag* %17 to i8*
  call void @llvm.va_end(i8* %18)
  ret void
}

; Function Attrs: nofree nosync nounwind willreturn
declare void @llvm.va_start(i8*) #13

; Function Attrs: nofree nosync nounwind willreturn
declare void @llvm.va_end(i8*) #13

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xnmalloc(i64 %0, i64 %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  %6 = udiv i64 9223372036854775807, %5
  %7 = load i64, i64* %3, align 8
  %8 = icmp ult i64 %6, %7
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  call void @xalloc_die() #15
  unreachable

10:                                               ; preds = %2
  %11 = load i64, i64* %3, align 8
  %12 = load i64, i64* %4, align 8
  %13 = mul i64 %11, %12
  %14 = call noalias i8* @xmalloc(i64 %13)
  ret i8* %14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i8*, align 8
  store i64 %0, i64* %2, align 8
  %4 = load i64, i64* %2, align 8
  %5 = call noalias i8* @malloc(i64 %4) #14
  store i8* %5, i8** %3, align 8
  %6 = load i8*, i8** %3, align 8
  %7 = icmp ne i8* %6, null
  br i1 %7, label %12, label %8

8:                                                ; preds = %1
  %9 = load i64, i64* %2, align 8
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %8
  call void @xalloc_die() #15
  unreachable

12:                                               ; preds = %8, %1
  %13 = load i8*, i8** %3, align 8
  ret i8* %13
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xnrealloc(i8* %0, i64 %1, i64 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load i64, i64* %6, align 8
  %8 = udiv i64 9223372036854775807, %7
  %9 = load i64, i64* %5, align 8
  %10 = icmp ult i64 %8, %9
  br i1 %10, label %11, label %12

11:                                               ; preds = %3
  call void @xalloc_die() #15
  unreachable

12:                                               ; preds = %3
  %13 = load i8*, i8** %4, align 8
  %14 = load i64, i64* %5, align 8
  %15 = load i64, i64* %6, align 8
  %16 = mul i64 %14, %15
  %17 = call i8* @xrealloc(i8* %13, i64 %16)
  ret i8* %17
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8* %0, i64 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %5, align 8
  %7 = icmp ne i64 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8
  %10 = icmp ne i8* %9, null
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = load i8*, i8** %4, align 8
  call void @free(i8* %12) #14
  store i8* null, i8** %3, align 8
  br label %25

13:                                               ; preds = %8, %2
  %14 = load i8*, i8** %4, align 8
  %15 = load i64, i64* %5, align 8
  %16 = call i8* @realloc(i8* %14, i64 %15) #14
  store i8* %16, i8** %4, align 8
  %17 = load i8*, i8** %4, align 8
  %18 = icmp ne i8* %17, null
  br i1 %18, label %23, label %19

19:                                               ; preds = %13
  %20 = load i64, i64* %5, align 8
  %21 = icmp ne i64 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  call void @xalloc_die() #15
  unreachable

23:                                               ; preds = %19, %13
  %24 = load i8*, i8** %4, align 8
  store i8* %24, i8** %3, align 8
  br label %25

25:                                               ; preds = %23, %11
  %26 = load i8*, i8** %3, align 8
  ret i8* %26
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @x2nrealloc(i8* %0, i64* %1, i64 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i64* %1, i64** %5, align 8
  store i64 %2, i64* %6, align 8
  %8 = load i64*, i64** %5, align 8
  %9 = load i64, i64* %8, align 8
  store i64 %9, i64* %7, align 8
  %10 = load i8*, i8** %4, align 8
  %11 = icmp ne i8* %10, null
  br i1 %11, label %32, label %12

12:                                               ; preds = %3
  %13 = load i64, i64* %7, align 8
  %14 = icmp ne i64 %13, 0
  br i1 %14, label %25, label %15

15:                                               ; preds = %12
  %16 = load i64, i64* %6, align 8
  %17 = udiv i64 128, %16
  store i64 %17, i64* %7, align 8
  %18 = load i64, i64* %7, align 8
  %19 = icmp ne i64 %18, 0
  %20 = xor i1 %19, true
  %21 = zext i1 %20 to i32
  %22 = sext i32 %21 to i64
  %23 = load i64, i64* %7, align 8
  %24 = add i64 %23, %22
  store i64 %24, i64* %7, align 8
  br label %25

25:                                               ; preds = %15, %12
  %26 = load i64, i64* %6, align 8
  %27 = udiv i64 9223372036854775807, %26
  %28 = load i64, i64* %7, align 8
  %29 = icmp ult i64 %27, %28
  br i1 %29, label %30, label %31

30:                                               ; preds = %25
  call void @xalloc_die() #15
  unreachable

31:                                               ; preds = %25
  br label %44

32:                                               ; preds = %3
  %33 = load i64, i64* %6, align 8
  %34 = udiv i64 6148914691236517204, %33
  %35 = load i64, i64* %7, align 8
  %36 = icmp ule i64 %34, %35
  br i1 %36, label %37, label %38

37:                                               ; preds = %32
  call void @xalloc_die() #15
  unreachable

38:                                               ; preds = %32
  %39 = load i64, i64* %7, align 8
  %40 = udiv i64 %39, 2
  %41 = add i64 %40, 1
  %42 = load i64, i64* %7, align 8
  %43 = add i64 %42, %41
  store i64 %43, i64* %7, align 8
  br label %44

44:                                               ; preds = %38, %31
  %45 = load i64, i64* %7, align 8
  %46 = load i64*, i64** %5, align 8
  store i64 %45, i64* %46, align 8
  %47 = load i8*, i8** %4, align 8
  %48 = load i64, i64* %7, align 8
  %49 = load i64, i64* %6, align 8
  %50 = mul i64 %48, %49
  %51 = call i8* @xrealloc(i8* %47, i64 %50)
  ret i8* %51
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64 %0) #0 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = call noalias i8* @xmalloc(i64 %3)
  ret i8* %4
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @x2realloc(i8* %0, i64* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64*, align 8
  store i8* %0, i8** %3, align 8
  store i64* %1, i64** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = load i64*, i64** %4, align 8
  %7 = call i8* @x2nrealloc(i8* %5, i64* %6, i64 1)
  ret i8* %7
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xmemdup(i8* %0, i64 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  %6 = call noalias i8* @xmalloc(i64 %5)
  %7 = load i8*, i8** %3, align 8
  %8 = load i64, i64* %4, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %7, i64 %8, i1 false)
  ret i8* %6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xstrdup(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = load i8*, i8** %2, align 8
  %5 = call i64 @strlen(i8* %4) #17
  %6 = add i64 %5, 1
  %7 = call i8* @xmemdup(i8* %3, i64 %6)
  ret i8* %7
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #10 {
  %1 = load volatile i32, i32* @exit_failure, align 4
  %2 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.460, i64 0, i64 0)) #14
  call void (i32, i32, i8*, ...) @error(i32 %1, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.461, i64 0, i64 0), i8* %2)
  call void @abort() #16
  unreachable
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @xnumtoumax(i8* %0, i32 %1, i64 %2, i64 %3, i8* %4, i8* %5, i32 %6) #0 {
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store i8* %0, i8** %8, align 8
  store i32 %1, i32* %9, align 4
  store i64 %2, i64* %10, align 8
  store i64 %3, i64* %11, align 8
  store i8* %4, i8** %12, align 8
  store i8* %5, i8** %13, align 8
  store i32 %6, i32* %14, align 4
  %17 = load i8*, i8** %8, align 8
  %18 = load i32, i32* %9, align 4
  %19 = load i8*, i8** %12, align 8
  %20 = call i32 @xstrtoumax(i8* %17, i8** null, i32 %18, i64* %16, i8* %19)
  store i32 %20, i32* %15, align 4
  %21 = load i32, i32* %15, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %40

23:                                               ; preds = %7
  %24 = load i64, i64* %16, align 8
  %25 = load i64, i64* %10, align 8
  %26 = icmp ult i64 %24, %25
  br i1 %26, label %31, label %27

27:                                               ; preds = %23
  %28 = load i64, i64* %11, align 8
  %29 = load i64, i64* %16, align 8
  %30 = icmp ult i64 %28, %29
  br i1 %30, label %31, label %39

31:                                               ; preds = %27, %23
  store i32 1, i32* %15, align 4
  %32 = load i64, i64* %16, align 8
  %33 = icmp ugt i64 %32, 1073741823
  br i1 %33, label %34, label %36

34:                                               ; preds = %31
  %35 = call i32* @__errno_location() #18
  store i32 75, i32* %35, align 4
  br label %38

36:                                               ; preds = %31
  %37 = call i32* @__errno_location() #18
  store i32 34, i32* %37, align 4
  br label %38

38:                                               ; preds = %36, %34
  br label %39

39:                                               ; preds = %38, %27
  br label %52

40:                                               ; preds = %7
  %41 = load i32, i32* %15, align 4
  %42 = icmp eq i32 %41, 1
  br i1 %42, label %43, label %45

43:                                               ; preds = %40
  %44 = call i32* @__errno_location() #18
  store i32 75, i32* %44, align 4
  br label %51

45:                                               ; preds = %40
  %46 = load i32, i32* %15, align 4
  %47 = icmp eq i32 %46, 3
  br i1 %47, label %48, label %50

48:                                               ; preds = %45
  %49 = call i32* @__errno_location() #18
  store i32 0, i32* %49, align 4
  br label %50

50:                                               ; preds = %48, %45
  br label %51

51:                                               ; preds = %50, %43
  br label %52

52:                                               ; preds = %51, %39
  %53 = load i32, i32* %15, align 4
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %55, label %75

55:                                               ; preds = %52
  %56 = load i32, i32* %14, align 4
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %58, label %60

58:                                               ; preds = %55
  %59 = load i32, i32* %14, align 4
  br label %61

60:                                               ; preds = %55
  br label %61

61:                                               ; preds = %60, %58
  %62 = phi i32 [ %59, %58 ], [ 1, %60 ]
  %63 = call i32* @__errno_location() #18
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 22
  br i1 %65, label %66, label %67

66:                                               ; preds = %61
  br label %70

67:                                               ; preds = %61
  %68 = call i32* @__errno_location() #18
  %69 = load i32, i32* %68, align 4
  br label %70

70:                                               ; preds = %67, %66
  %71 = phi i32 [ 0, %66 ], [ %69, %67 ]
  %72 = load i8*, i8** %13, align 8
  %73 = load i8*, i8** %8, align 8
  %74 = call i8* @quote(i8* %73)
  call void (i32, i32, i8*, ...) @error(i32 %62, i32 %71, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.464, i64 0, i64 0), i8* %72, i8* %74)
  br label %75

75:                                               ; preds = %70, %52
  %76 = load i64, i64* %16, align 8
  ret i64 %76
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xgetcwd() #0 {
  %1 = alloca i8*, align 8
  %2 = call i8* @getcwd(i8* null, i64 0) #14
  store i8* %2, i8** %1, align 8
  %3 = load i8*, i8** %1, align 8
  %4 = icmp ne i8* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %0
  %6 = call i32* @__errno_location() #18
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 12
  br i1 %8, label %9, label %10

9:                                                ; preds = %5
  call void @xalloc_die() #15
  unreachable

10:                                               ; preds = %5, %0
  %11 = load i8*, i8** %1, align 8
  ret i8* %11
}

; Function Attrs: nounwind
declare dso_local i8* @getcwd(i8*, i64) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xgethostname() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  store i8* null, i8** %2, align 8
  store i64 34, i64* %3, align 8
  br label %6

6:                                                ; preds = %52, %0
  %7 = load i8*, i8** %2, align 8
  %8 = call i8* @x2realloc(i8* %7, i64* %3)
  store i8* %8, i8** %2, align 8
  %9 = load i64, i64* %3, align 8
  %10 = sub i64 %9, 1
  store i64 %10, i64* %4, align 8
  %11 = load i8*, i8** %2, align 8
  %12 = load i64, i64* %4, align 8
  %13 = sub i64 %12, 1
  %14 = getelementptr inbounds i8, i8* %11, i64 %13
  store i8 0, i8* %14, align 1
  %15 = call i32* @__errno_location() #18
  store i32 0, i32* %15, align 4
  %16 = load i8*, i8** %2, align 8
  %17 = load i64, i64* %4, align 8
  %18 = call i32 @gethostname(i8* %16, i64 %17) #14
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %29

20:                                               ; preds = %6
  %21 = load i8*, i8** %2, align 8
  %22 = load i64, i64* %4, align 8
  %23 = sub i64 %22, 1
  %24 = getelementptr inbounds i8, i8* %21, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = icmp ne i8 %25, 0
  br i1 %26, label %28, label %27

27:                                               ; preds = %20
  br label %53

28:                                               ; preds = %20
  br label %52

29:                                               ; preds = %6
  %30 = call i32* @__errno_location() #18
  %31 = load i32, i32* %30, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %51

33:                                               ; preds = %29
  %34 = call i32* @__errno_location() #18
  %35 = load i32, i32* %34, align 4
  %36 = icmp ne i32 %35, 36
  br i1 %36, label %37, label %51

37:                                               ; preds = %33
  %38 = call i32* @__errno_location() #18
  %39 = load i32, i32* %38, align 4
  %40 = icmp ne i32 %39, 22
  br i1 %40, label %41, label %51

41:                                               ; preds = %37
  %42 = call i32* @__errno_location() #18
  %43 = load i32, i32* %42, align 4
  %44 = icmp ne i32 %43, 12
  br i1 %44, label %45, label %51

45:                                               ; preds = %41
  %46 = call i32* @__errno_location() #18
  %47 = load i32, i32* %46, align 4
  store i32 %47, i32* %5, align 4
  %48 = load i8*, i8** %2, align 8
  call void @free(i8* %48) #14
  %49 = load i32, i32* %5, align 4
  %50 = call i32* @__errno_location() #18
  store i32 %49, i32* %50, align 4
  store i8* null, i8** %1, align 8
  br label %55

51:                                               ; preds = %41, %37, %33, %29
  br label %52

52:                                               ; preds = %51, %28
  br label %6

53:                                               ; preds = %27
  %54 = load i8*, i8** %2, align 8
  store i8* %54, i8** %1, align 8
  br label %55

55:                                               ; preds = %53, %45
  %56 = load i8*, i8** %1, align 8
  ret i8* %56
}

; Function Attrs: nounwind
declare dso_local i32 @gethostname(i8*, i64) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrtoul(i8* %0, i8** %1, i32 %2, i64* %3, i8* %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i8**, align 8
  %9 = alloca i32, align 4
  %10 = alloca i64*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8**, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i8*, align 8
  %17 = alloca i8, align 1
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  store i8* %0, i8** %7, align 8
  store i8** %1, i8*** %8, align 8
  store i32 %2, i32* %9, align 4
  store i64* %3, i64** %10, align 8
  store i8* %4, i8** %11, align 8
  store i32 0, i32* %15, align 4
  %21 = load i32, i32* %9, align 4
  %22 = icmp sle i32 0, %21
  br i1 %22, label %23, label %27

23:                                               ; preds = %5
  %24 = load i32, i32* %9, align 4
  %25 = icmp sle i32 %24, 36
  br i1 %25, label %26, label %27

26:                                               ; preds = %23
  br label %28

27:                                               ; preds = %23, %5
  call void @__assert_fail(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.471, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.472, i64 0, i64 0), i32 96, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @__PRETTY_FUNCTION__.xstrtoul, i64 0, i64 0)) #16
  unreachable

28:                                               ; preds = %26
  %29 = load i8**, i8*** %8, align 8
  %30 = icmp ne i8** %29, null
  br i1 %30, label %31, label %33

31:                                               ; preds = %28
  %32 = load i8**, i8*** %8, align 8
  br label %34

33:                                               ; preds = %28
  br label %34

34:                                               ; preds = %33, %31
  %35 = phi i8** [ %32, %31 ], [ %12, %33 ]
  store i8** %35, i8*** %13, align 8
  %36 = call i32* @__errno_location() #18
  store i32 0, i32* %36, align 4
  %37 = load i8*, i8** %7, align 8
  store i8* %37, i8** %16, align 8
  %38 = load i8*, i8** %16, align 8
  %39 = load i8, i8* %38, align 1
  store i8 %39, i8* %17, align 1
  br label %40

40:                                               ; preds = %51, %34
  %41 = call i16** @__ctype_b_loc() #18
  %42 = load i16*, i16** %41, align 8
  %43 = load i8, i8* %17, align 1
  %44 = zext i8 %43 to i32
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i16, i16* %42, i64 %45
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = and i32 %48, 8192
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %51, label %55

51:                                               ; preds = %40
  %52 = load i8*, i8** %16, align 8
  %53 = getelementptr inbounds i8, i8* %52, i32 1
  store i8* %53, i8** %16, align 8
  %54 = load i8, i8* %53, align 1
  store i8 %54, i8* %17, align 1
  br label %40, !llvm.loop !124

55:                                               ; preds = %40
  %56 = load i8, i8* %17, align 1
  %57 = zext i8 %56 to i32
  %58 = icmp eq i32 %57, 45
  br i1 %58, label %59, label %60

59:                                               ; preds = %55
  store i32 4, i32* %6, align 4
  br label %221

60:                                               ; preds = %55
  %61 = load i8*, i8** %7, align 8
  %62 = load i8**, i8*** %13, align 8
  %63 = load i32, i32* %9, align 4
  %64 = call i64 @strtoul(i8* %61, i8** %62, i32 %63) #14
  store i64 %64, i64* %14, align 8
  %65 = load i8**, i8*** %13, align 8
  %66 = load i8*, i8** %65, align 8
  %67 = load i8*, i8** %7, align 8
  %68 = icmp eq i8* %66, %67
  br i1 %68, label %69, label %89

69:                                               ; preds = %60
  %70 = load i8*, i8** %11, align 8
  %71 = icmp ne i8* %70, null
  br i1 %71, label %72, label %87

72:                                               ; preds = %69
  %73 = load i8**, i8*** %13, align 8
  %74 = load i8*, i8** %73, align 8
  %75 = load i8, i8* %74, align 1
  %76 = sext i8 %75 to i32
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %78, label %87

78:                                               ; preds = %72
  %79 = load i8*, i8** %11, align 8
  %80 = load i8**, i8*** %13, align 8
  %81 = load i8*, i8** %80, align 8
  %82 = load i8, i8* %81, align 1
  %83 = sext i8 %82 to i32
  %84 = call i8* @strchr(i8* %79, i32 %83) #17
  %85 = icmp ne i8* %84, null
  br i1 %85, label %86, label %87

86:                                               ; preds = %78
  store i64 1, i64* %14, align 8
  br label %88

87:                                               ; preds = %78, %72, %69
  store i32 4, i32* %6, align 4
  br label %221

88:                                               ; preds = %86
  br label %100

89:                                               ; preds = %60
  %90 = call i32* @__errno_location() #18
  %91 = load i32, i32* %90, align 4
  %92 = icmp ne i32 %91, 0
  br i1 %92, label %93, label %99

93:                                               ; preds = %89
  %94 = call i32* @__errno_location() #18
  %95 = load i32, i32* %94, align 4
  %96 = icmp ne i32 %95, 34
  br i1 %96, label %97, label %98

97:                                               ; preds = %93
  store i32 4, i32* %6, align 4
  br label %221

98:                                               ; preds = %93
  store i32 1, i32* %15, align 4
  br label %99

99:                                               ; preds = %98, %89
  br label %100

100:                                              ; preds = %99, %88
  %101 = load i8*, i8** %11, align 8
  %102 = icmp ne i8* %101, null
  br i1 %102, label %107, label %103

103:                                              ; preds = %100
  %104 = load i64, i64* %14, align 8
  %105 = load i64*, i64** %10, align 8
  store i64 %104, i64* %105, align 8
  %106 = load i32, i32* %15, align 4
  store i32 %106, i32* %6, align 4
  br label %221

107:                                              ; preds = %100
  %108 = load i8**, i8*** %13, align 8
  %109 = load i8*, i8** %108, align 8
  %110 = load i8, i8* %109, align 1
  %111 = sext i8 %110 to i32
  %112 = icmp ne i32 %111, 0
  br i1 %112, label %113, label %217

113:                                              ; preds = %107
  store i32 1024, i32* %18, align 4
  store i32 1, i32* %19, align 4
  %114 = load i8*, i8** %11, align 8
  %115 = load i8**, i8*** %13, align 8
  %116 = load i8*, i8** %115, align 8
  %117 = load i8, i8* %116, align 1
  %118 = sext i8 %117 to i32
  %119 = call i8* @strchr(i8* %114, i32 %118) #17
  %120 = icmp ne i8* %119, null
  br i1 %120, label %126, label %121

121:                                              ; preds = %113
  %122 = load i64, i64* %14, align 8
  %123 = load i64*, i64** %10, align 8
  store i64 %122, i64* %123, align 8
  %124 = load i32, i32* %15, align 4
  %125 = or i32 %124, 2
  store i32 %125, i32* %6, align 4
  br label %221

126:                                              ; preds = %113
  %127 = load i8**, i8*** %13, align 8
  %128 = load i8*, i8** %127, align 8
  %129 = load i8, i8* %128, align 1
  %130 = sext i8 %129 to i32
  switch i32 %130, label %159 [
    i32 69, label %131
    i32 71, label %131
    i32 103, label %131
    i32 107, label %131
    i32 75, label %131
    i32 77, label %131
    i32 109, label %131
    i32 80, label %131
    i32 84, label %131
    i32 116, label %131
    i32 89, label %131
    i32 90, label %131
  ]

131:                                              ; preds = %126, %126, %126, %126, %126, %126, %126, %126, %126, %126, %126, %126
  %132 = load i8*, i8** %11, align 8
  %133 = call i8* @strchr(i8* %132, i32 48) #17
  %134 = icmp ne i8* %133, null
  br i1 %134, label %135, label %158

135:                                              ; preds = %131
  %136 = load i8**, i8*** %13, align 8
  %137 = getelementptr inbounds i8*, i8** %136, i64 0
  %138 = load i8*, i8** %137, align 8
  %139 = getelementptr inbounds i8, i8* %138, i64 1
  %140 = load i8, i8* %139, align 1
  %141 = sext i8 %140 to i32
  switch i32 %141, label %157 [
    i32 105, label %142
    i32 66, label %154
    i32 68, label %154
  ]

142:                                              ; preds = %135
  %143 = load i8**, i8*** %13, align 8
  %144 = getelementptr inbounds i8*, i8** %143, i64 0
  %145 = load i8*, i8** %144, align 8
  %146 = getelementptr inbounds i8, i8* %145, i64 2
  %147 = load i8, i8* %146, align 1
  %148 = sext i8 %147 to i32
  %149 = icmp eq i32 %148, 66
  br i1 %149, label %150, label %153

150:                                              ; preds = %142
  %151 = load i32, i32* %19, align 4
  %152 = add nsw i32 %151, 2
  store i32 %152, i32* %19, align 4
  br label %153

153:                                              ; preds = %150, %142
  br label %157

154:                                              ; preds = %135, %135
  store i32 1000, i32* %18, align 4
  %155 = load i32, i32* %19, align 4
  %156 = add nsw i32 %155, 1
  store i32 %156, i32* %19, align 4
  br label %157

157:                                              ; preds = %154, %153, %135
  br label %158

158:                                              ; preds = %157, %131
  br label %159

159:                                              ; preds = %158, %126
  %160 = load i8**, i8*** %13, align 8
  %161 = load i8*, i8** %160, align 8
  %162 = load i8, i8* %161, align 1
  %163 = sext i8 %162 to i32
  switch i32 %163, label %195 [
    i32 98, label %164
    i32 66, label %166
    i32 99, label %168
    i32 69, label %169
    i32 71, label %172
    i32 103, label %172
    i32 107, label %175
    i32 75, label %175
    i32 77, label %178
    i32 109, label %178
    i32 80, label %181
    i32 84, label %184
    i32 116, label %184
    i32 119, label %187
    i32 89, label %189
    i32 90, label %192
  ]

164:                                              ; preds = %159
  %165 = call i32 @bkm_scale(i64* %14, i32 512)
  store i32 %165, i32* %20, align 4
  br label %200

166:                                              ; preds = %159
  %167 = call i32 @bkm_scale(i64* %14, i32 1024)
  store i32 %167, i32* %20, align 4
  br label %200

168:                                              ; preds = %159
  store i32 0, i32* %20, align 4
  br label %200

169:                                              ; preds = %159
  %170 = load i32, i32* %18, align 4
  %171 = call i32 @bkm_scale_by_power(i64* %14, i32 %170, i32 6)
  store i32 %171, i32* %20, align 4
  br label %200

172:                                              ; preds = %159, %159
  %173 = load i32, i32* %18, align 4
  %174 = call i32 @bkm_scale_by_power(i64* %14, i32 %173, i32 3)
  store i32 %174, i32* %20, align 4
  br label %200

175:                                              ; preds = %159, %159
  %176 = load i32, i32* %18, align 4
  %177 = call i32 @bkm_scale_by_power(i64* %14, i32 %176, i32 1)
  store i32 %177, i32* %20, align 4
  br label %200

178:                                              ; preds = %159, %159
  %179 = load i32, i32* %18, align 4
  %180 = call i32 @bkm_scale_by_power(i64* %14, i32 %179, i32 2)
  store i32 %180, i32* %20, align 4
  br label %200

181:                                              ; preds = %159
  %182 = load i32, i32* %18, align 4
  %183 = call i32 @bkm_scale_by_power(i64* %14, i32 %182, i32 5)
  store i32 %183, i32* %20, align 4
  br label %200

184:                                              ; preds = %159, %159
  %185 = load i32, i32* %18, align 4
  %186 = call i32 @bkm_scale_by_power(i64* %14, i32 %185, i32 4)
  store i32 %186, i32* %20, align 4
  br label %200

187:                                              ; preds = %159
  %188 = call i32 @bkm_scale(i64* %14, i32 2)
  store i32 %188, i32* %20, align 4
  br label %200

189:                                              ; preds = %159
  %190 = load i32, i32* %18, align 4
  %191 = call i32 @bkm_scale_by_power(i64* %14, i32 %190, i32 8)
  store i32 %191, i32* %20, align 4
  br label %200

192:                                              ; preds = %159
  %193 = load i32, i32* %18, align 4
  %194 = call i32 @bkm_scale_by_power(i64* %14, i32 %193, i32 7)
  store i32 %194, i32* %20, align 4
  br label %200

195:                                              ; preds = %159
  %196 = load i64, i64* %14, align 8
  %197 = load i64*, i64** %10, align 8
  store i64 %196, i64* %197, align 8
  %198 = load i32, i32* %15, align 4
  %199 = or i32 %198, 2
  store i32 %199, i32* %6, align 4
  br label %221

200:                                              ; preds = %192, %189, %187, %184, %181, %178, %175, %172, %169, %168, %166, %164
  %201 = load i32, i32* %20, align 4
  %202 = load i32, i32* %15, align 4
  %203 = or i32 %202, %201
  store i32 %203, i32* %15, align 4
  %204 = load i32, i32* %19, align 4
  %205 = load i8**, i8*** %13, align 8
  %206 = load i8*, i8** %205, align 8
  %207 = sext i32 %204 to i64
  %208 = getelementptr inbounds i8, i8* %206, i64 %207
  store i8* %208, i8** %205, align 8
  %209 = load i8**, i8*** %13, align 8
  %210 = load i8*, i8** %209, align 8
  %211 = load i8, i8* %210, align 1
  %212 = icmp ne i8 %211, 0
  br i1 %212, label %213, label %216

213:                                              ; preds = %200
  %214 = load i32, i32* %15, align 4
  %215 = or i32 %214, 2
  store i32 %215, i32* %15, align 4
  br label %216

216:                                              ; preds = %213, %200
  br label %217

217:                                              ; preds = %216, %107
  %218 = load i64, i64* %14, align 8
  %219 = load i64*, i64** %10, align 8
  store i64 %218, i64* %219, align 8
  %220 = load i32, i32* %15, align 4
  store i32 %220, i32* %6, align 4
  br label %221

221:                                              ; preds = %217, %195, %121, %103, %97, %87, %59
  %222 = load i32, i32* %6, align 4
  ret i32 %222
}

; Function Attrs: nounwind
declare dso_local i64 @strtoul(i8*, i8**, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale(i64* %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i64*, align 8
  %5 = alloca i32, align 4
  store i64* %0, i64** %4, align 8
  store i32 %1, i32* %5, align 4
  %6 = load i32, i32* %5, align 4
  %7 = sext i32 %6 to i64
  %8 = udiv i64 -1, %7
  %9 = load i64*, i64** %4, align 8
  %10 = load i64, i64* %9, align 8
  %11 = icmp ult i64 %8, %10
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = load i64*, i64** %4, align 8
  store i64 -1, i64* %13, align 8
  store i32 1, i32* %3, align 4
  br label %20

14:                                               ; preds = %2
  %15 = load i32, i32* %5, align 4
  %16 = sext i32 %15 to i64
  %17 = load i64*, i64** %4, align 8
  %18 = load i64, i64* %17, align 8
  %19 = mul i64 %18, %16
  store i64 %19, i64* %17, align 8
  store i32 0, i32* %3, align 4
  br label %20

20:                                               ; preds = %14, %12
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale_by_power(i64* %0, i32 %1, i32 %2) #0 {
  %4 = alloca i64*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i64* %0, i64** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  store i32 0, i32* %7, align 4
  br label %8

8:                                                ; preds = %12, %3
  %9 = load i32, i32* %6, align 4
  %10 = add nsw i32 %9, -1
  store i32 %10, i32* %6, align 4
  %11 = icmp ne i32 %9, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %8
  %13 = load i64*, i64** %4, align 8
  %14 = load i32, i32* %5, align 4
  %15 = call i32 @bkm_scale(i64* %13, i32 %14)
  %16 = load i32, i32* %7, align 4
  %17 = or i32 %16, %15
  store i32 %17, i32* %7, align 4
  br label %8, !llvm.loop !125

18:                                               ; preds = %8
  %19 = load i32, i32* %7, align 4
  ret i32 %19
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xstrtol_fatal(i32 %0, i32 %1, i8 signext %2, %struct.option* %3, i8* %4) #10 {
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8, align 1
  %9 = alloca %struct.option*, align 8
  %10 = alloca i8*, align 8
  store i32 %0, i32* %6, align 4
  store i32 %1, i32* %7, align 4
  store i8 %2, i8* %8, align 1
  store %struct.option* %3, %struct.option** %9, align 8
  store i8* %4, i8** %10, align 8
  %11 = load i32, i32* %6, align 4
  %12 = load i32, i32* %7, align 4
  %13 = load i8, i8* %8, align 1
  %14 = load %struct.option*, %struct.option** %9, align 8
  %15 = load i8*, i8** %10, align 8
  %16 = load volatile i32, i32* @exit_failure, align 4
  call void @xstrtol_error(i32 %11, i32 %12, i8 signext %13, %struct.option* %14, i8* %15, i32 %16)
  call void @abort() #16
  unreachable
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @xstrtol_error(i32 %0, i32 %1, i8 signext %2, %struct.option* %3, i8* %4, i32 %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8, align 1
  %10 = alloca %struct.option*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca [2 x i8], align 1
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i8 %2, i8* %9, align 1
  store %struct.option* %3, %struct.option** %10, align 8
  store i8* %4, i8** %11, align 8
  store i32 %5, i32* %12, align 4
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.475, i64 0, i64 0), i8** %13, align 8
  %17 = load i32, i32* %7, align 4
  switch i32 %17, label %18 [
    i32 4, label %19
    i32 2, label %20
    i32 3, label %20
    i32 1, label %21
  ]

18:                                               ; preds = %6
  call void @abort() #16
  unreachable

19:                                               ; preds = %6
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.476, i64 0, i64 0), i8** %14, align 8
  br label %22

20:                                               ; preds = %6, %6
  store i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2.477, i64 0, i64 0), i8** %14, align 8
  br label %22

21:                                               ; preds = %6
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3.478, i64 0, i64 0), i8** %14, align 8
  br label %22

22:                                               ; preds = %21, %20, %19
  %23 = load i32, i32* %8, align 4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %25, label %35

25:                                               ; preds = %22
  %26 = load i32, i32* %8, align 4
  %27 = load i8*, i8** %13, align 8
  %28 = sext i32 %26 to i64
  %29 = sub i64 0, %28
  %30 = getelementptr inbounds i8, i8* %27, i64 %29
  store i8* %30, i8** %13, align 8
  %31 = load i8, i8* %9, align 1
  %32 = getelementptr inbounds [2 x i8], [2 x i8]* %16, i64 0, i64 0
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds [2 x i8], [2 x i8]* %16, i64 0, i64 1
  store i8 0, i8* %33, align 1
  %34 = getelementptr inbounds [2 x i8], [2 x i8]* %16, i64 0, i64 0
  store i8* %34, i8** %15, align 8
  br label %42

35:                                               ; preds = %22
  %36 = load %struct.option*, %struct.option** %10, align 8
  %37 = load i32, i32* %8, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %struct.option, %struct.option* %36, i64 %38
  %40 = getelementptr inbounds %struct.option, %struct.option* %39, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  store i8* %41, i8** %15, align 8
  br label %42

42:                                               ; preds = %35, %25
  %43 = load i32, i32* %12, align 4
  %44 = load i8*, i8** %14, align 8
  %45 = call i8* @gettext(i8* %44) #14
  %46 = load i8*, i8** %13, align 8
  %47 = load i8*, i8** %15, align 8
  %48 = load i8*, i8** %11, align 8
  call void (i32, i32, i8*, ...) @error(i32 %43, i32 0, i8* %45, i8* %46, i8* %47, i8* %48)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrtoumax(i8* %0, i8** %1, i32 %2, i64* %3, i8* %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i8**, align 8
  %9 = alloca i32, align 4
  %10 = alloca i64*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8**, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i8*, align 8
  %17 = alloca i8, align 1
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  store i8* %0, i8** %7, align 8
  store i8** %1, i8*** %8, align 8
  store i32 %2, i32* %9, align 4
  store i64* %3, i64** %10, align 8
  store i8* %4, i8** %11, align 8
  store i32 0, i32* %15, align 4
  %21 = load i32, i32* %9, align 4
  %22 = icmp sle i32 0, %21
  br i1 %22, label %23, label %27

23:                                               ; preds = %5
  %24 = load i32, i32* %9, align 4
  %25 = icmp sle i32 %24, 36
  br i1 %25, label %26, label %27

26:                                               ; preds = %23
  br label %28

27:                                               ; preds = %23, %5
  call void @__assert_fail(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.481, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.482, i64 0, i64 0), i32 96, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @__PRETTY_FUNCTION__.xstrtoumax, i64 0, i64 0)) #16
  unreachable

28:                                               ; preds = %26
  %29 = load i8**, i8*** %8, align 8
  %30 = icmp ne i8** %29, null
  br i1 %30, label %31, label %33

31:                                               ; preds = %28
  %32 = load i8**, i8*** %8, align 8
  br label %34

33:                                               ; preds = %28
  br label %34

34:                                               ; preds = %33, %31
  %35 = phi i8** [ %32, %31 ], [ %12, %33 ]
  store i8** %35, i8*** %13, align 8
  %36 = call i32* @__errno_location() #18
  store i32 0, i32* %36, align 4
  %37 = load i8*, i8** %7, align 8
  store i8* %37, i8** %16, align 8
  %38 = load i8*, i8** %16, align 8
  %39 = load i8, i8* %38, align 1
  store i8 %39, i8* %17, align 1
  br label %40

40:                                               ; preds = %51, %34
  %41 = call i16** @__ctype_b_loc() #18
  %42 = load i16*, i16** %41, align 8
  %43 = load i8, i8* %17, align 1
  %44 = zext i8 %43 to i32
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i16, i16* %42, i64 %45
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = and i32 %48, 8192
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %51, label %55

51:                                               ; preds = %40
  %52 = load i8*, i8** %16, align 8
  %53 = getelementptr inbounds i8, i8* %52, i32 1
  store i8* %53, i8** %16, align 8
  %54 = load i8, i8* %53, align 1
  store i8 %54, i8* %17, align 1
  br label %40, !llvm.loop !126

55:                                               ; preds = %40
  %56 = load i8, i8* %17, align 1
  %57 = zext i8 %56 to i32
  %58 = icmp eq i32 %57, 45
  br i1 %58, label %59, label %60

59:                                               ; preds = %55
  store i32 4, i32* %6, align 4
  br label %221

60:                                               ; preds = %55
  %61 = load i8*, i8** %7, align 8
  %62 = load i8**, i8*** %13, align 8
  %63 = load i32, i32* %9, align 4
  %64 = call i64 @strtoumax(i8* %61, i8** %62, i32 %63) #14
  store i64 %64, i64* %14, align 8
  %65 = load i8**, i8*** %13, align 8
  %66 = load i8*, i8** %65, align 8
  %67 = load i8*, i8** %7, align 8
  %68 = icmp eq i8* %66, %67
  br i1 %68, label %69, label %89

69:                                               ; preds = %60
  %70 = load i8*, i8** %11, align 8
  %71 = icmp ne i8* %70, null
  br i1 %71, label %72, label %87

72:                                               ; preds = %69
  %73 = load i8**, i8*** %13, align 8
  %74 = load i8*, i8** %73, align 8
  %75 = load i8, i8* %74, align 1
  %76 = sext i8 %75 to i32
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %78, label %87

78:                                               ; preds = %72
  %79 = load i8*, i8** %11, align 8
  %80 = load i8**, i8*** %13, align 8
  %81 = load i8*, i8** %80, align 8
  %82 = load i8, i8* %81, align 1
  %83 = sext i8 %82 to i32
  %84 = call i8* @strchr(i8* %79, i32 %83) #17
  %85 = icmp ne i8* %84, null
  br i1 %85, label %86, label %87

86:                                               ; preds = %78
  store i64 1, i64* %14, align 8
  br label %88

87:                                               ; preds = %78, %72, %69
  store i32 4, i32* %6, align 4
  br label %221

88:                                               ; preds = %86
  br label %100

89:                                               ; preds = %60
  %90 = call i32* @__errno_location() #18
  %91 = load i32, i32* %90, align 4
  %92 = icmp ne i32 %91, 0
  br i1 %92, label %93, label %99

93:                                               ; preds = %89
  %94 = call i32* @__errno_location() #18
  %95 = load i32, i32* %94, align 4
  %96 = icmp ne i32 %95, 34
  br i1 %96, label %97, label %98

97:                                               ; preds = %93
  store i32 4, i32* %6, align 4
  br label %221

98:                                               ; preds = %93
  store i32 1, i32* %15, align 4
  br label %99

99:                                               ; preds = %98, %89
  br label %100

100:                                              ; preds = %99, %88
  %101 = load i8*, i8** %11, align 8
  %102 = icmp ne i8* %101, null
  br i1 %102, label %107, label %103

103:                                              ; preds = %100
  %104 = load i64, i64* %14, align 8
  %105 = load i64*, i64** %10, align 8
  store i64 %104, i64* %105, align 8
  %106 = load i32, i32* %15, align 4
  store i32 %106, i32* %6, align 4
  br label %221

107:                                              ; preds = %100
  %108 = load i8**, i8*** %13, align 8
  %109 = load i8*, i8** %108, align 8
  %110 = load i8, i8* %109, align 1
  %111 = sext i8 %110 to i32
  %112 = icmp ne i32 %111, 0
  br i1 %112, label %113, label %217

113:                                              ; preds = %107
  store i32 1024, i32* %18, align 4
  store i32 1, i32* %19, align 4
  %114 = load i8*, i8** %11, align 8
  %115 = load i8**, i8*** %13, align 8
  %116 = load i8*, i8** %115, align 8
  %117 = load i8, i8* %116, align 1
  %118 = sext i8 %117 to i32
  %119 = call i8* @strchr(i8* %114, i32 %118) #17
  %120 = icmp ne i8* %119, null
  br i1 %120, label %126, label %121

121:                                              ; preds = %113
  %122 = load i64, i64* %14, align 8
  %123 = load i64*, i64** %10, align 8
  store i64 %122, i64* %123, align 8
  %124 = load i32, i32* %15, align 4
  %125 = or i32 %124, 2
  store i32 %125, i32* %6, align 4
  br label %221

126:                                              ; preds = %113
  %127 = load i8**, i8*** %13, align 8
  %128 = load i8*, i8** %127, align 8
  %129 = load i8, i8* %128, align 1
  %130 = sext i8 %129 to i32
  switch i32 %130, label %159 [
    i32 69, label %131
    i32 71, label %131
    i32 103, label %131
    i32 107, label %131
    i32 75, label %131
    i32 77, label %131
    i32 109, label %131
    i32 80, label %131
    i32 84, label %131
    i32 116, label %131
    i32 89, label %131
    i32 90, label %131
  ]

131:                                              ; preds = %126, %126, %126, %126, %126, %126, %126, %126, %126, %126, %126, %126
  %132 = load i8*, i8** %11, align 8
  %133 = call i8* @strchr(i8* %132, i32 48) #17
  %134 = icmp ne i8* %133, null
  br i1 %134, label %135, label %158

135:                                              ; preds = %131
  %136 = load i8**, i8*** %13, align 8
  %137 = getelementptr inbounds i8*, i8** %136, i64 0
  %138 = load i8*, i8** %137, align 8
  %139 = getelementptr inbounds i8, i8* %138, i64 1
  %140 = load i8, i8* %139, align 1
  %141 = sext i8 %140 to i32
  switch i32 %141, label %157 [
    i32 105, label %142
    i32 66, label %154
    i32 68, label %154
  ]

142:                                              ; preds = %135
  %143 = load i8**, i8*** %13, align 8
  %144 = getelementptr inbounds i8*, i8** %143, i64 0
  %145 = load i8*, i8** %144, align 8
  %146 = getelementptr inbounds i8, i8* %145, i64 2
  %147 = load i8, i8* %146, align 1
  %148 = sext i8 %147 to i32
  %149 = icmp eq i32 %148, 66
  br i1 %149, label %150, label %153

150:                                              ; preds = %142
  %151 = load i32, i32* %19, align 4
  %152 = add nsw i32 %151, 2
  store i32 %152, i32* %19, align 4
  br label %153

153:                                              ; preds = %150, %142
  br label %157

154:                                              ; preds = %135, %135
  store i32 1000, i32* %18, align 4
  %155 = load i32, i32* %19, align 4
  %156 = add nsw i32 %155, 1
  store i32 %156, i32* %19, align 4
  br label %157

157:                                              ; preds = %154, %153, %135
  br label %158

158:                                              ; preds = %157, %131
  br label %159

159:                                              ; preds = %158, %126
  %160 = load i8**, i8*** %13, align 8
  %161 = load i8*, i8** %160, align 8
  %162 = load i8, i8* %161, align 1
  %163 = sext i8 %162 to i32
  switch i32 %163, label %195 [
    i32 98, label %164
    i32 66, label %166
    i32 99, label %168
    i32 69, label %169
    i32 71, label %172
    i32 103, label %172
    i32 107, label %175
    i32 75, label %175
    i32 77, label %178
    i32 109, label %178
    i32 80, label %181
    i32 84, label %184
    i32 116, label %184
    i32 119, label %187
    i32 89, label %189
    i32 90, label %192
  ]

164:                                              ; preds = %159
  %165 = call i32 @bkm_scale.483(i64* %14, i32 512)
  store i32 %165, i32* %20, align 4
  br label %200

166:                                              ; preds = %159
  %167 = call i32 @bkm_scale.483(i64* %14, i32 1024)
  store i32 %167, i32* %20, align 4
  br label %200

168:                                              ; preds = %159
  store i32 0, i32* %20, align 4
  br label %200

169:                                              ; preds = %159
  %170 = load i32, i32* %18, align 4
  %171 = call i32 @bkm_scale_by_power.484(i64* %14, i32 %170, i32 6)
  store i32 %171, i32* %20, align 4
  br label %200

172:                                              ; preds = %159, %159
  %173 = load i32, i32* %18, align 4
  %174 = call i32 @bkm_scale_by_power.484(i64* %14, i32 %173, i32 3)
  store i32 %174, i32* %20, align 4
  br label %200

175:                                              ; preds = %159, %159
  %176 = load i32, i32* %18, align 4
  %177 = call i32 @bkm_scale_by_power.484(i64* %14, i32 %176, i32 1)
  store i32 %177, i32* %20, align 4
  br label %200

178:                                              ; preds = %159, %159
  %179 = load i32, i32* %18, align 4
  %180 = call i32 @bkm_scale_by_power.484(i64* %14, i32 %179, i32 2)
  store i32 %180, i32* %20, align 4
  br label %200

181:                                              ; preds = %159
  %182 = load i32, i32* %18, align 4
  %183 = call i32 @bkm_scale_by_power.484(i64* %14, i32 %182, i32 5)
  store i32 %183, i32* %20, align 4
  br label %200

184:                                              ; preds = %159, %159
  %185 = load i32, i32* %18, align 4
  %186 = call i32 @bkm_scale_by_power.484(i64* %14, i32 %185, i32 4)
  store i32 %186, i32* %20, align 4
  br label %200

187:                                              ; preds = %159
  %188 = call i32 @bkm_scale.483(i64* %14, i32 2)
  store i32 %188, i32* %20, align 4
  br label %200

189:                                              ; preds = %159
  %190 = load i32, i32* %18, align 4
  %191 = call i32 @bkm_scale_by_power.484(i64* %14, i32 %190, i32 8)
  store i32 %191, i32* %20, align 4
  br label %200

192:                                              ; preds = %159
  %193 = load i32, i32* %18, align 4
  %194 = call i32 @bkm_scale_by_power.484(i64* %14, i32 %193, i32 7)
  store i32 %194, i32* %20, align 4
  br label %200

195:                                              ; preds = %159
  %196 = load i64, i64* %14, align 8
  %197 = load i64*, i64** %10, align 8
  store i64 %196, i64* %197, align 8
  %198 = load i32, i32* %15, align 4
  %199 = or i32 %198, 2
  store i32 %199, i32* %6, align 4
  br label %221

200:                                              ; preds = %192, %189, %187, %184, %181, %178, %175, %172, %169, %168, %166, %164
  %201 = load i32, i32* %20, align 4
  %202 = load i32, i32* %15, align 4
  %203 = or i32 %202, %201
  store i32 %203, i32* %15, align 4
  %204 = load i32, i32* %19, align 4
  %205 = load i8**, i8*** %13, align 8
  %206 = load i8*, i8** %205, align 8
  %207 = sext i32 %204 to i64
  %208 = getelementptr inbounds i8, i8* %206, i64 %207
  store i8* %208, i8** %205, align 8
  %209 = load i8**, i8*** %13, align 8
  %210 = load i8*, i8** %209, align 8
  %211 = load i8, i8* %210, align 1
  %212 = icmp ne i8 %211, 0
  br i1 %212, label %213, label %216

213:                                              ; preds = %200
  %214 = load i32, i32* %15, align 4
  %215 = or i32 %214, 2
  store i32 %215, i32* %15, align 4
  br label %216

216:                                              ; preds = %213, %200
  br label %217

217:                                              ; preds = %216, %107
  %218 = load i64, i64* %14, align 8
  %219 = load i64*, i64** %10, align 8
  store i64 %218, i64* %219, align 8
  %220 = load i32, i32* %15, align 4
  store i32 %220, i32* %6, align 4
  br label %221

221:                                              ; preds = %217, %195, %121, %103, %97, %87, %59
  %222 = load i32, i32* %6, align 4
  ret i32 %222
}

; Function Attrs: nounwind
declare dso_local i64 @strtoumax(i8*, i8**, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale.483(i64* %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i64*, align 8
  %5 = alloca i32, align 4
  store i64* %0, i64** %4, align 8
  store i32 %1, i32* %5, align 4
  %6 = load i32, i32* %5, align 4
  %7 = sext i32 %6 to i64
  %8 = udiv i64 -1, %7
  %9 = load i64*, i64** %4, align 8
  %10 = load i64, i64* %9, align 8
  %11 = icmp ult i64 %8, %10
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = load i64*, i64** %4, align 8
  store i64 -1, i64* %13, align 8
  store i32 1, i32* %3, align 4
  br label %20

14:                                               ; preds = %2
  %15 = load i32, i32* %5, align 4
  %16 = sext i32 %15 to i64
  %17 = load i64*, i64** %4, align 8
  %18 = load i64, i64* %17, align 8
  %19 = mul i64 %18, %16
  store i64 %19, i64* %17, align 8
  store i32 0, i32* %3, align 4
  br label %20

20:                                               ; preds = %14, %12
  %21 = load i32, i32* %3, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale_by_power.484(i64* %0, i32 %1, i32 %2) #0 {
  %4 = alloca i64*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i64* %0, i64** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  store i32 0, i32* %7, align 4
  br label %8

8:                                                ; preds = %12, %3
  %9 = load i32, i32* %6, align 4
  %10 = add nsw i32 %9, -1
  store i32 %10, i32* %6, align 4
  %11 = icmp ne i32 %9, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %8
  %13 = load i64*, i64** %4, align 8
  %14 = load i32, i32* %5, align 4
  %15 = call i32 @bkm_scale.483(i64* %13, i32 %14)
  %16 = load i32, i32* %7, align 4
  %17 = or i32 %16, %15
  store i32 %17, i32* %7, align 4
  br label %8, !llvm.loop !127

18:                                               ; preds = %8
  %19 = load i32, i32* %7, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32* %0, i8* %1, i64 %2, %struct.__mbstate_t* %3) #0 {
  %5 = alloca i64, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.__mbstate_t*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8, align 1
  store i32* %0, i32** %6, align 8
  store i8* %1, i8** %7, align 8
  store i64 %2, i64* %8, align 8
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %9, align 8
  %13 = load i32*, i32** %6, align 8
  %14 = icmp ne i32* %13, null
  br i1 %14, label %16, label %15

15:                                               ; preds = %4
  store i32* %11, i32** %6, align 8
  br label %16

16:                                               ; preds = %15, %4
  %17 = load i32*, i32** %6, align 8
  %18 = load i8*, i8** %7, align 8
  %19 = load i64, i64* %8, align 8
  %20 = load %struct.__mbstate_t*, %struct.__mbstate_t** %9, align 8
  %21 = call i64 @mbrtowc(i32* %17, i8* %18, i64 %19, %struct.__mbstate_t* %20) #14
  store i64 %21, i64* %10, align 8
  %22 = load i64, i64* %10, align 8
  %23 = icmp ule i64 -2, %22
  br i1 %23, label %24, label %35

24:                                               ; preds = %16
  %25 = load i64, i64* %8, align 8
  %26 = icmp ne i64 %25, 0
  br i1 %26, label %27, label %35

27:                                               ; preds = %24
  %28 = call zeroext i1 @hard_locale(i32 0)
  br i1 %28, label %35, label %29

29:                                               ; preds = %27
  %30 = load i8*, i8** %7, align 8
  %31 = load i8, i8* %30, align 1
  store i8 %31, i8* %12, align 1
  %32 = load i8, i8* %12, align 1
  %33 = zext i8 %32 to i32
  %34 = load i32*, i32** %6, align 8
  store i32 %33, i32* %34, align 4
  store i64 1, i64* %5, align 8
  br label %37

35:                                               ; preds = %27, %24, %16
  %36 = load i64, i64* %10, align 8
  store i64 %36, i64* %5, align 8
  br label %37

37:                                               ; preds = %35, %29
  %38 = load i64, i64* %5, align 8
  ret i64 %38
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @_obstack_begin(%struct.obstack* %0, i64 %1, i64 %2, i8* (i64)* %3, void (i8*)* %4) #0 {
  %6 = alloca %struct.obstack*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8* (i64)*, align 8
  %10 = alloca void (i8*)*, align 8
  store %struct.obstack* %0, %struct.obstack** %6, align 8
  store i64 %1, i64* %7, align 8
  store i64 %2, i64* %8, align 8
  store i8* (i64)* %3, i8* (i64)** %9, align 8
  store void (i8*)* %4, void (i8*)** %10, align 8
  %11 = load i8* (i64)*, i8* (i64)** %9, align 8
  %12 = load %struct.obstack*, %struct.obstack** %6, align 8
  %13 = getelementptr inbounds %struct.obstack, %struct.obstack* %12, i32 0, i32 7
  %14 = bitcast %union.anon.0* %13 to i8* (i64)**
  store i8* (i64)* %11, i8* (i64)** %14, align 8
  %15 = load void (i8*)*, void (i8*)** %10, align 8
  %16 = load %struct.obstack*, %struct.obstack** %6, align 8
  %17 = getelementptr inbounds %struct.obstack, %struct.obstack* %16, i32 0, i32 8
  %18 = bitcast %union.anon.1* %17 to void (i8*)**
  store void (i8*)* %15, void (i8*)** %18, align 8
  %19 = load %struct.obstack*, %struct.obstack** %6, align 8
  %20 = getelementptr inbounds %struct.obstack, %struct.obstack* %19, i32 0, i32 10
  %21 = load i8, i8* %20, align 8
  %22 = and i8 %21, -2
  store i8 %22, i8* %20, align 8
  %23 = load %struct.obstack*, %struct.obstack** %6, align 8
  %24 = load i64, i64* %7, align 8
  %25 = load i64, i64* %8, align 8
  %26 = call i32 @_obstack_begin_worker(%struct.obstack* %23, i64 %24, i64 %25)
  ret i32 %26
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @_obstack_begin_worker(%struct.obstack* %0, i64 %1, i64 %2) #0 {
  %4 = alloca %struct.obstack*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct._obstack_chunk*, align 8
  %8 = alloca i32, align 4
  store %struct.obstack* %0, %struct.obstack** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %9 = load i64, i64* %6, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %3
  store i64 16, i64* %6, align 8
  br label %12

12:                                               ; preds = %11, %3
  %13 = load i64, i64* %5, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %19

15:                                               ; preds = %12
  store i32 32, i32* %8, align 4
  %16 = load i32, i32* %8, align 4
  %17 = sub nsw i32 4096, %16
  %18 = sext i32 %17 to i64
  store i64 %18, i64* %5, align 8
  br label %19

19:                                               ; preds = %15, %12
  %20 = load i64, i64* %5, align 8
  %21 = load %struct.obstack*, %struct.obstack** %4, align 8
  %22 = getelementptr inbounds %struct.obstack, %struct.obstack* %21, i32 0, i32 0
  store i64 %20, i64* %22, align 8
  %23 = load i64, i64* %6, align 8
  %24 = sub i64 %23, 1
  %25 = load %struct.obstack*, %struct.obstack** %4, align 8
  %26 = getelementptr inbounds %struct.obstack, %struct.obstack* %25, i32 0, i32 6
  store i64 %24, i64* %26, align 8
  %27 = load %struct.obstack*, %struct.obstack** %4, align 8
  %28 = load %struct.obstack*, %struct.obstack** %4, align 8
  %29 = getelementptr inbounds %struct.obstack, %struct.obstack* %28, i32 0, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = call i8* @call_chunkfun(%struct.obstack* %27, i64 %30)
  %32 = bitcast i8* %31 to %struct._obstack_chunk*
  %33 = load %struct.obstack*, %struct.obstack** %4, align 8
  %34 = getelementptr inbounds %struct.obstack, %struct.obstack* %33, i32 0, i32 1
  store %struct._obstack_chunk* %32, %struct._obstack_chunk** %34, align 8
  store %struct._obstack_chunk* %32, %struct._obstack_chunk** %7, align 8
  %35 = load %struct._obstack_chunk*, %struct._obstack_chunk** %7, align 8
  %36 = icmp ne %struct._obstack_chunk* %35, null
  br i1 %36, label %39, label %37

37:                                               ; preds = %19
  %38 = load void ()*, void ()** @obstack_alloc_failed_handler, align 8
  call void %38() #15
  unreachable

39:                                               ; preds = %19
  %40 = load %struct._obstack_chunk*, %struct._obstack_chunk** %7, align 8
  %41 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %40, i32 0, i32 2
  %42 = getelementptr inbounds [0 x i8], [0 x i8]* %41, i64 0, i64 0
  %43 = ptrtoint i8* %42 to i64
  %44 = sub i64 %43, 0
  %45 = load i64, i64* %6, align 8
  %46 = sub i64 %45, 1
  %47 = add i64 %44, %46
  %48 = load i64, i64* %6, align 8
  %49 = sub i64 %48, 1
  %50 = xor i64 %49, -1
  %51 = and i64 %47, %50
  %52 = getelementptr inbounds i8, i8* null, i64 %51
  %53 = load %struct.obstack*, %struct.obstack** %4, align 8
  %54 = getelementptr inbounds %struct.obstack, %struct.obstack* %53, i32 0, i32 2
  store i8* %52, i8** %54, align 8
  %55 = load %struct.obstack*, %struct.obstack** %4, align 8
  %56 = getelementptr inbounds %struct.obstack, %struct.obstack* %55, i32 0, i32 3
  store i8* %52, i8** %56, align 8
  %57 = load %struct._obstack_chunk*, %struct._obstack_chunk** %7, align 8
  %58 = bitcast %struct._obstack_chunk* %57 to i8*
  %59 = load %struct.obstack*, %struct.obstack** %4, align 8
  %60 = getelementptr inbounds %struct.obstack, %struct.obstack* %59, i32 0, i32 0
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds i8, i8* %58, i64 %61
  %63 = load %struct._obstack_chunk*, %struct._obstack_chunk** %7, align 8
  %64 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %63, i32 0, i32 0
  store i8* %62, i8** %64, align 8
  %65 = load %struct.obstack*, %struct.obstack** %4, align 8
  %66 = getelementptr inbounds %struct.obstack, %struct.obstack* %65, i32 0, i32 4
  store i8* %62, i8** %66, align 8
  %67 = load %struct._obstack_chunk*, %struct._obstack_chunk** %7, align 8
  %68 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %67, i32 0, i32 1
  store %struct._obstack_chunk* null, %struct._obstack_chunk** %68, align 8
  %69 = load %struct.obstack*, %struct.obstack** %4, align 8
  %70 = getelementptr inbounds %struct.obstack, %struct.obstack* %69, i32 0, i32 10
  %71 = load i8, i8* %70, align 8
  %72 = and i8 %71, -3
  store i8 %72, i8* %70, align 8
  %73 = load %struct.obstack*, %struct.obstack** %4, align 8
  %74 = getelementptr inbounds %struct.obstack, %struct.obstack* %73, i32 0, i32 10
  %75 = load i8, i8* %74, align 8
  %76 = and i8 %75, -5
  store i8 %76, i8* %74, align 8
  ret i32 1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @call_chunkfun(%struct.obstack* %0, i64 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca %struct.obstack*, align 8
  %5 = alloca i64, align 8
  store %struct.obstack* %0, %struct.obstack** %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load %struct.obstack*, %struct.obstack** %4, align 8
  %7 = getelementptr inbounds %struct.obstack, %struct.obstack* %6, i32 0, i32 10
  %8 = load i8, i8* %7, align 8
  %9 = and i8 %8, 1
  %10 = zext i8 %9 to i32
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %22

12:                                               ; preds = %2
  %13 = load %struct.obstack*, %struct.obstack** %4, align 8
  %14 = getelementptr inbounds %struct.obstack, %struct.obstack* %13, i32 0, i32 7
  %15 = bitcast %union.anon.0* %14 to i8* (i8*, i64)**
  %16 = load i8* (i8*, i64)*, i8* (i8*, i64)** %15, align 8
  %17 = load %struct.obstack*, %struct.obstack** %4, align 8
  %18 = getelementptr inbounds %struct.obstack, %struct.obstack* %17, i32 0, i32 9
  %19 = load i8*, i8** %18, align 8
  %20 = load i64, i64* %5, align 8
  %21 = call i8* %16(i8* %19, i64 %20)
  store i8* %21, i8** %3, align 8
  br label %29

22:                                               ; preds = %2
  %23 = load %struct.obstack*, %struct.obstack** %4, align 8
  %24 = getelementptr inbounds %struct.obstack, %struct.obstack* %23, i32 0, i32 7
  %25 = bitcast %union.anon.0* %24 to i8* (i64)**
  %26 = load i8* (i64)*, i8* (i64)** %25, align 8
  %27 = load i64, i64* %5, align 8
  %28 = call i8* %26(i64 %27)
  store i8* %28, i8** %3, align 8
  br label %29

29:                                               ; preds = %22, %12
  %30 = load i8*, i8** %3, align 8
  ret i8* %30
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @print_and_abort() #10 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.489, i64 0, i64 0)) #14
  %3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.490, i64 0, i64 0), i8* %2)
  %4 = load volatile i32, i32* @exit_failure, align 4
  call void @exit(i32 %4) #16
  unreachable
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @_obstack_begin_1(%struct.obstack* %0, i64 %1, i64 %2, i8* (i8*, i64)* %3, void (i8*, i8*)* %4, i8* %5) #0 {
  %7 = alloca %struct.obstack*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i8* (i8*, i64)*, align 8
  %11 = alloca void (i8*, i8*)*, align 8
  %12 = alloca i8*, align 8
  store %struct.obstack* %0, %struct.obstack** %7, align 8
  store i64 %1, i64* %8, align 8
  store i64 %2, i64* %9, align 8
  store i8* (i8*, i64)* %3, i8* (i8*, i64)** %10, align 8
  store void (i8*, i8*)* %4, void (i8*, i8*)** %11, align 8
  store i8* %5, i8** %12, align 8
  %13 = load i8* (i8*, i64)*, i8* (i8*, i64)** %10, align 8
  %14 = load %struct.obstack*, %struct.obstack** %7, align 8
  %15 = getelementptr inbounds %struct.obstack, %struct.obstack* %14, i32 0, i32 7
  %16 = bitcast %union.anon.0* %15 to i8* (i8*, i64)**
  store i8* (i8*, i64)* %13, i8* (i8*, i64)** %16, align 8
  %17 = load void (i8*, i8*)*, void (i8*, i8*)** %11, align 8
  %18 = load %struct.obstack*, %struct.obstack** %7, align 8
  %19 = getelementptr inbounds %struct.obstack, %struct.obstack* %18, i32 0, i32 8
  %20 = bitcast %union.anon.1* %19 to void (i8*, i8*)**
  store void (i8*, i8*)* %17, void (i8*, i8*)** %20, align 8
  %21 = load i8*, i8** %12, align 8
  %22 = load %struct.obstack*, %struct.obstack** %7, align 8
  %23 = getelementptr inbounds %struct.obstack, %struct.obstack* %22, i32 0, i32 9
  store i8* %21, i8** %23, align 8
  %24 = load %struct.obstack*, %struct.obstack** %7, align 8
  %25 = getelementptr inbounds %struct.obstack, %struct.obstack* %24, i32 0, i32 10
  %26 = load i8, i8* %25, align 8
  %27 = and i8 %26, -2
  %28 = or i8 %27, 1
  store i8 %28, i8* %25, align 8
  %29 = load %struct.obstack*, %struct.obstack** %7, align 8
  %30 = load i64, i64* %8, align 8
  %31 = load i64, i64* %9, align 8
  %32 = call i32 @_obstack_begin_worker(%struct.obstack* %29, i64 %30, i64 %31)
  ret i32 %32
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_obstack_newchunk(%struct.obstack* %0, i64 %1) #0 {
  %3 = alloca %struct.obstack*, align 8
  %4 = alloca i64, align 8
  %5 = alloca %struct._obstack_chunk*, align 8
  %6 = alloca %struct._obstack_chunk*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  store %struct.obstack* %0, %struct.obstack** %3, align 8
  store i64 %1, i64* %4, align 8
  %12 = load %struct.obstack*, %struct.obstack** %3, align 8
  %13 = getelementptr inbounds %struct.obstack, %struct.obstack* %12, i32 0, i32 1
  %14 = load %struct._obstack_chunk*, %struct._obstack_chunk** %13, align 8
  store %struct._obstack_chunk* %14, %struct._obstack_chunk** %5, align 8
  store %struct._obstack_chunk* null, %struct._obstack_chunk** %6, align 8
  %15 = load %struct.obstack*, %struct.obstack** %3, align 8
  %16 = getelementptr inbounds %struct.obstack, %struct.obstack* %15, i32 0, i32 3
  %17 = load i8*, i8** %16, align 8
  %18 = load %struct.obstack*, %struct.obstack** %3, align 8
  %19 = getelementptr inbounds %struct.obstack, %struct.obstack* %18, i32 0, i32 2
  %20 = load i8*, i8** %19, align 8
  %21 = ptrtoint i8* %17 to i64
  %22 = ptrtoint i8* %20 to i64
  %23 = sub i64 %21, %22
  store i64 %23, i64* %7, align 8
  %24 = load i64, i64* %7, align 8
  %25 = load i64, i64* %4, align 8
  %26 = add i64 %24, %25
  store i64 %26, i64* %9, align 8
  %27 = load i64, i64* %9, align 8
  %28 = load %struct.obstack*, %struct.obstack** %3, align 8
  %29 = getelementptr inbounds %struct.obstack, %struct.obstack* %28, i32 0, i32 6
  %30 = load i64, i64* %29, align 8
  %31 = add i64 %27, %30
  store i64 %31, i64* %10, align 8
  %32 = load i64, i64* %10, align 8
  %33 = load i64, i64* %7, align 8
  %34 = lshr i64 %33, 3
  %35 = add i64 %32, %34
  %36 = add i64 %35, 100
  store i64 %36, i64* %11, align 8
  %37 = load i64, i64* %11, align 8
  %38 = load i64, i64* %10, align 8
  %39 = icmp ult i64 %37, %38
  br i1 %39, label %40, label %42

40:                                               ; preds = %2
  %41 = load i64, i64* %10, align 8
  store i64 %41, i64* %11, align 8
  br label %42

42:                                               ; preds = %40, %2
  %43 = load i64, i64* %11, align 8
  %44 = load %struct.obstack*, %struct.obstack** %3, align 8
  %45 = getelementptr inbounds %struct.obstack, %struct.obstack* %44, i32 0, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = icmp ult i64 %43, %46
  br i1 %47, label %48, label %52

48:                                               ; preds = %42
  %49 = load %struct.obstack*, %struct.obstack** %3, align 8
  %50 = getelementptr inbounds %struct.obstack, %struct.obstack* %49, i32 0, i32 0
  %51 = load i64, i64* %50, align 8
  store i64 %51, i64* %11, align 8
  br label %52

52:                                               ; preds = %48, %42
  %53 = load i64, i64* %7, align 8
  %54 = load i64, i64* %9, align 8
  %55 = icmp ule i64 %53, %54
  br i1 %55, label %56, label %65

56:                                               ; preds = %52
  %57 = load i64, i64* %9, align 8
  %58 = load i64, i64* %10, align 8
  %59 = icmp ule i64 %57, %58
  br i1 %59, label %60, label %65

60:                                               ; preds = %56
  %61 = load %struct.obstack*, %struct.obstack** %3, align 8
  %62 = load i64, i64* %11, align 8
  %63 = call i8* @call_chunkfun(%struct.obstack* %61, i64 %62)
  %64 = bitcast i8* %63 to %struct._obstack_chunk*
  store %struct._obstack_chunk* %64, %struct._obstack_chunk** %6, align 8
  br label %65

65:                                               ; preds = %60, %56, %52
  %66 = load %struct._obstack_chunk*, %struct._obstack_chunk** %6, align 8
  %67 = icmp ne %struct._obstack_chunk* %66, null
  br i1 %67, label %70, label %68

68:                                               ; preds = %65
  %69 = load void ()*, void ()** @obstack_alloc_failed_handler, align 8
  call void %69() #15
  unreachable

70:                                               ; preds = %65
  %71 = load %struct._obstack_chunk*, %struct._obstack_chunk** %6, align 8
  %72 = load %struct.obstack*, %struct.obstack** %3, align 8
  %73 = getelementptr inbounds %struct.obstack, %struct.obstack* %72, i32 0, i32 1
  store %struct._obstack_chunk* %71, %struct._obstack_chunk** %73, align 8
  %74 = load %struct._obstack_chunk*, %struct._obstack_chunk** %5, align 8
  %75 = load %struct._obstack_chunk*, %struct._obstack_chunk** %6, align 8
  %76 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %75, i32 0, i32 1
  store %struct._obstack_chunk* %74, %struct._obstack_chunk** %76, align 8
  %77 = load %struct._obstack_chunk*, %struct._obstack_chunk** %6, align 8
  %78 = bitcast %struct._obstack_chunk* %77 to i8*
  %79 = load i64, i64* %11, align 8
  %80 = getelementptr inbounds i8, i8* %78, i64 %79
  %81 = load %struct.obstack*, %struct.obstack** %3, align 8
  %82 = getelementptr inbounds %struct.obstack, %struct.obstack* %81, i32 0, i32 4
  store i8* %80, i8** %82, align 8
  %83 = load %struct._obstack_chunk*, %struct._obstack_chunk** %6, align 8
  %84 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %83, i32 0, i32 0
  store i8* %80, i8** %84, align 8
  %85 = load %struct._obstack_chunk*, %struct._obstack_chunk** %6, align 8
  %86 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %85, i32 0, i32 2
  %87 = getelementptr inbounds [0 x i8], [0 x i8]* %86, i64 0, i64 0
  %88 = ptrtoint i8* %87 to i64
  %89 = sub i64 %88, 0
  %90 = load %struct.obstack*, %struct.obstack** %3, align 8
  %91 = getelementptr inbounds %struct.obstack, %struct.obstack* %90, i32 0, i32 6
  %92 = load i64, i64* %91, align 8
  %93 = add i64 %89, %92
  %94 = load %struct.obstack*, %struct.obstack** %3, align 8
  %95 = getelementptr inbounds %struct.obstack, %struct.obstack* %94, i32 0, i32 6
  %96 = load i64, i64* %95, align 8
  %97 = xor i64 %96, -1
  %98 = and i64 %93, %97
  %99 = getelementptr inbounds i8, i8* null, i64 %98
  store i8* %99, i8** %8, align 8
  %100 = load i8*, i8** %8, align 8
  %101 = load %struct.obstack*, %struct.obstack** %3, align 8
  %102 = getelementptr inbounds %struct.obstack, %struct.obstack* %101, i32 0, i32 2
  %103 = load i8*, i8** %102, align 8
  %104 = load i64, i64* %7, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %100, i8* align 1 %103, i64 %104, i1 false)
  %105 = load %struct.obstack*, %struct.obstack** %3, align 8
  %106 = getelementptr inbounds %struct.obstack, %struct.obstack* %105, i32 0, i32 10
  %107 = load i8, i8* %106, align 8
  %108 = lshr i8 %107, 1
  %109 = and i8 %108, 1
  %110 = zext i8 %109 to i32
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %141, label %112

112:                                              ; preds = %70
  %113 = load %struct.obstack*, %struct.obstack** %3, align 8
  %114 = getelementptr inbounds %struct.obstack, %struct.obstack* %113, i32 0, i32 2
  %115 = load i8*, i8** %114, align 8
  %116 = load %struct._obstack_chunk*, %struct._obstack_chunk** %5, align 8
  %117 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %116, i32 0, i32 2
  %118 = getelementptr inbounds [0 x i8], [0 x i8]* %117, i64 0, i64 0
  %119 = ptrtoint i8* %118 to i64
  %120 = sub i64 %119, 0
  %121 = load %struct.obstack*, %struct.obstack** %3, align 8
  %122 = getelementptr inbounds %struct.obstack, %struct.obstack* %121, i32 0, i32 6
  %123 = load i64, i64* %122, align 8
  %124 = add i64 %120, %123
  %125 = load %struct.obstack*, %struct.obstack** %3, align 8
  %126 = getelementptr inbounds %struct.obstack, %struct.obstack* %125, i32 0, i32 6
  %127 = load i64, i64* %126, align 8
  %128 = xor i64 %127, -1
  %129 = and i64 %124, %128
  %130 = getelementptr inbounds i8, i8* null, i64 %129
  %131 = icmp eq i8* %115, %130
  br i1 %131, label %132, label %141

132:                                              ; preds = %112
  %133 = load %struct._obstack_chunk*, %struct._obstack_chunk** %5, align 8
  %134 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %133, i32 0, i32 1
  %135 = load %struct._obstack_chunk*, %struct._obstack_chunk** %134, align 8
  %136 = load %struct._obstack_chunk*, %struct._obstack_chunk** %6, align 8
  %137 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %136, i32 0, i32 1
  store %struct._obstack_chunk* %135, %struct._obstack_chunk** %137, align 8
  %138 = load %struct.obstack*, %struct.obstack** %3, align 8
  %139 = load %struct._obstack_chunk*, %struct._obstack_chunk** %5, align 8
  %140 = bitcast %struct._obstack_chunk* %139 to i8*
  call void @call_freefun(%struct.obstack* %138, i8* %140)
  br label %141

141:                                              ; preds = %132, %112, %70
  %142 = load i8*, i8** %8, align 8
  %143 = load %struct.obstack*, %struct.obstack** %3, align 8
  %144 = getelementptr inbounds %struct.obstack, %struct.obstack* %143, i32 0, i32 2
  store i8* %142, i8** %144, align 8
  %145 = load %struct.obstack*, %struct.obstack** %3, align 8
  %146 = getelementptr inbounds %struct.obstack, %struct.obstack* %145, i32 0, i32 2
  %147 = load i8*, i8** %146, align 8
  %148 = load i64, i64* %7, align 8
  %149 = getelementptr inbounds i8, i8* %147, i64 %148
  %150 = load %struct.obstack*, %struct.obstack** %3, align 8
  %151 = getelementptr inbounds %struct.obstack, %struct.obstack* %150, i32 0, i32 3
  store i8* %149, i8** %151, align 8
  %152 = load %struct.obstack*, %struct.obstack** %3, align 8
  %153 = getelementptr inbounds %struct.obstack, %struct.obstack* %152, i32 0, i32 10
  %154 = load i8, i8* %153, align 8
  %155 = and i8 %154, -3
  store i8 %155, i8* %153, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @call_freefun(%struct.obstack* %0, i8* %1) #0 {
  %3 = alloca %struct.obstack*, align 8
  %4 = alloca i8*, align 8
  store %struct.obstack* %0, %struct.obstack** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load %struct.obstack*, %struct.obstack** %3, align 8
  %6 = getelementptr inbounds %struct.obstack, %struct.obstack* %5, i32 0, i32 10
  %7 = load i8, i8* %6, align 8
  %8 = and i8 %7, 1
  %9 = zext i8 %8 to i32
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %20

11:                                               ; preds = %2
  %12 = load %struct.obstack*, %struct.obstack** %3, align 8
  %13 = getelementptr inbounds %struct.obstack, %struct.obstack* %12, i32 0, i32 8
  %14 = bitcast %union.anon.1* %13 to void (i8*, i8*)**
  %15 = load void (i8*, i8*)*, void (i8*, i8*)** %14, align 8
  %16 = load %struct.obstack*, %struct.obstack** %3, align 8
  %17 = getelementptr inbounds %struct.obstack, %struct.obstack* %16, i32 0, i32 9
  %18 = load i8*, i8** %17, align 8
  %19 = load i8*, i8** %4, align 8
  call void %15(i8* %18, i8* %19)
  br label %26

20:                                               ; preds = %2
  %21 = load %struct.obstack*, %struct.obstack** %3, align 8
  %22 = getelementptr inbounds %struct.obstack, %struct.obstack* %21, i32 0, i32 8
  %23 = bitcast %union.anon.1* %22 to void (i8*)**
  %24 = load void (i8*)*, void (i8*)** %23, align 8
  %25 = load i8*, i8** %4, align 8
  call void %24(i8* %25)
  br label %26

26:                                               ; preds = %20, %11
  ret void
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i32 @_obstack_allocated_p(%struct.obstack* %0, i8* %1) #9 {
  %3 = alloca %struct.obstack*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct._obstack_chunk*, align 8
  %6 = alloca %struct._obstack_chunk*, align 8
  store %struct.obstack* %0, %struct.obstack** %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = load %struct.obstack*, %struct.obstack** %3, align 8
  %8 = getelementptr inbounds %struct.obstack, %struct.obstack* %7, i32 0, i32 1
  %9 = load %struct._obstack_chunk*, %struct._obstack_chunk** %8, align 8
  store %struct._obstack_chunk* %9, %struct._obstack_chunk** %5, align 8
  br label %10

10:                                               ; preds = %28, %2
  %11 = load %struct._obstack_chunk*, %struct._obstack_chunk** %5, align 8
  %12 = icmp ne %struct._obstack_chunk* %11, null
  br i1 %12, label %13, label %26

13:                                               ; preds = %10
  %14 = load %struct._obstack_chunk*, %struct._obstack_chunk** %5, align 8
  %15 = bitcast %struct._obstack_chunk* %14 to i8*
  %16 = load i8*, i8** %4, align 8
  %17 = icmp uge i8* %15, %16
  br i1 %17, label %24, label %18

18:                                               ; preds = %13
  %19 = load %struct._obstack_chunk*, %struct._obstack_chunk** %5, align 8
  %20 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %19, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = load i8*, i8** %4, align 8
  %23 = icmp ult i8* %21, %22
  br label %24

24:                                               ; preds = %18, %13
  %25 = phi i1 [ true, %13 ], [ %23, %18 ]
  br label %26

26:                                               ; preds = %24, %10
  %27 = phi i1 [ false, %10 ], [ %25, %24 ]
  br i1 %27, label %28, label %33

28:                                               ; preds = %26
  %29 = load %struct._obstack_chunk*, %struct._obstack_chunk** %5, align 8
  %30 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %29, i32 0, i32 1
  %31 = load %struct._obstack_chunk*, %struct._obstack_chunk** %30, align 8
  store %struct._obstack_chunk* %31, %struct._obstack_chunk** %6, align 8
  %32 = load %struct._obstack_chunk*, %struct._obstack_chunk** %6, align 8
  store %struct._obstack_chunk* %32, %struct._obstack_chunk** %5, align 8
  br label %10, !llvm.loop !128

33:                                               ; preds = %26
  %34 = load %struct._obstack_chunk*, %struct._obstack_chunk** %5, align 8
  %35 = icmp ne %struct._obstack_chunk* %34, null
  %36 = zext i1 %35 to i32
  ret i32 %36
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_obstack_free(%struct.obstack* %0, i8* %1) #0 {
  %3 = alloca %struct.obstack*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct._obstack_chunk*, align 8
  %6 = alloca %struct._obstack_chunk*, align 8
  store %struct.obstack* %0, %struct.obstack** %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = load %struct.obstack*, %struct.obstack** %3, align 8
  %8 = getelementptr inbounds %struct.obstack, %struct.obstack* %7, i32 0, i32 1
  %9 = load %struct._obstack_chunk*, %struct._obstack_chunk** %8, align 8
  store %struct._obstack_chunk* %9, %struct._obstack_chunk** %5, align 8
  br label %10

10:                                               ; preds = %28, %2
  %11 = load %struct._obstack_chunk*, %struct._obstack_chunk** %5, align 8
  %12 = icmp ne %struct._obstack_chunk* %11, null
  br i1 %12, label %13, label %26

13:                                               ; preds = %10
  %14 = load %struct._obstack_chunk*, %struct._obstack_chunk** %5, align 8
  %15 = bitcast %struct._obstack_chunk* %14 to i8*
  %16 = load i8*, i8** %4, align 8
  %17 = icmp uge i8* %15, %16
  br i1 %17, label %24, label %18

18:                                               ; preds = %13
  %19 = load %struct._obstack_chunk*, %struct._obstack_chunk** %5, align 8
  %20 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %19, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = load i8*, i8** %4, align 8
  %23 = icmp ult i8* %21, %22
  br label %24

24:                                               ; preds = %18, %13
  %25 = phi i1 [ true, %13 ], [ %23, %18 ]
  br label %26

26:                                               ; preds = %24, %10
  %27 = phi i1 [ false, %10 ], [ %25, %24 ]
  br i1 %27, label %28, label %41

28:                                               ; preds = %26
  %29 = load %struct._obstack_chunk*, %struct._obstack_chunk** %5, align 8
  %30 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %29, i32 0, i32 1
  %31 = load %struct._obstack_chunk*, %struct._obstack_chunk** %30, align 8
  store %struct._obstack_chunk* %31, %struct._obstack_chunk** %6, align 8
  %32 = load %struct.obstack*, %struct.obstack** %3, align 8
  %33 = load %struct._obstack_chunk*, %struct._obstack_chunk** %5, align 8
  %34 = bitcast %struct._obstack_chunk* %33 to i8*
  call void @call_freefun(%struct.obstack* %32, i8* %34)
  %35 = load %struct._obstack_chunk*, %struct._obstack_chunk** %6, align 8
  store %struct._obstack_chunk* %35, %struct._obstack_chunk** %5, align 8
  %36 = load %struct.obstack*, %struct.obstack** %3, align 8
  %37 = getelementptr inbounds %struct.obstack, %struct.obstack* %36, i32 0, i32 10
  %38 = load i8, i8* %37, align 8
  %39 = and i8 %38, -3
  %40 = or i8 %39, 2
  store i8 %40, i8* %37, align 8
  br label %10, !llvm.loop !129

41:                                               ; preds = %26
  %42 = load %struct._obstack_chunk*, %struct._obstack_chunk** %5, align 8
  %43 = icmp ne %struct._obstack_chunk* %42, null
  br i1 %43, label %44, label %58

44:                                               ; preds = %41
  %45 = load i8*, i8** %4, align 8
  %46 = load %struct.obstack*, %struct.obstack** %3, align 8
  %47 = getelementptr inbounds %struct.obstack, %struct.obstack* %46, i32 0, i32 3
  store i8* %45, i8** %47, align 8
  %48 = load %struct.obstack*, %struct.obstack** %3, align 8
  %49 = getelementptr inbounds %struct.obstack, %struct.obstack* %48, i32 0, i32 2
  store i8* %45, i8** %49, align 8
  %50 = load %struct._obstack_chunk*, %struct._obstack_chunk** %5, align 8
  %51 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %50, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = load %struct.obstack*, %struct.obstack** %3, align 8
  %54 = getelementptr inbounds %struct.obstack, %struct.obstack* %53, i32 0, i32 4
  store i8* %52, i8** %54, align 8
  %55 = load %struct._obstack_chunk*, %struct._obstack_chunk** %5, align 8
  %56 = load %struct.obstack*, %struct.obstack** %3, align 8
  %57 = getelementptr inbounds %struct.obstack, %struct.obstack* %56, i32 0, i32 1
  store %struct._obstack_chunk* %55, %struct._obstack_chunk** %57, align 8
  br label %63

58:                                               ; preds = %41
  %59 = load i8*, i8** %4, align 8
  %60 = icmp ne i8* %59, null
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  call void @abort() #16
  unreachable

62:                                               ; preds = %58
  br label %63

63:                                               ; preds = %62, %44
  ret void
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define dso_local i64 @_obstack_memory_used(%struct.obstack* %0) #9 {
  %2 = alloca %struct.obstack*, align 8
  %3 = alloca %struct._obstack_chunk*, align 8
  %4 = alloca i64, align 8
  store %struct.obstack* %0, %struct.obstack** %2, align 8
  store i64 0, i64* %4, align 8
  %5 = load %struct.obstack*, %struct.obstack** %2, align 8
  %6 = getelementptr inbounds %struct.obstack, %struct.obstack* %5, i32 0, i32 1
  %7 = load %struct._obstack_chunk*, %struct._obstack_chunk** %6, align 8
  store %struct._obstack_chunk* %7, %struct._obstack_chunk** %3, align 8
  br label %8

8:                                                ; preds = %22, %1
  %9 = load %struct._obstack_chunk*, %struct._obstack_chunk** %3, align 8
  %10 = icmp ne %struct._obstack_chunk* %9, null
  br i1 %10, label %11, label %26

11:                                               ; preds = %8
  %12 = load %struct._obstack_chunk*, %struct._obstack_chunk** %3, align 8
  %13 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %12, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = load %struct._obstack_chunk*, %struct._obstack_chunk** %3, align 8
  %16 = bitcast %struct._obstack_chunk* %15 to i8*
  %17 = ptrtoint i8* %14 to i64
  %18 = ptrtoint i8* %16 to i64
  %19 = sub i64 %17, %18
  %20 = load i64, i64* %4, align 8
  %21 = add i64 %20, %19
  store i64 %21, i64* %4, align 8
  br label %22

22:                                               ; preds = %11
  %23 = load %struct._obstack_chunk*, %struct._obstack_chunk** %3, align 8
  %24 = getelementptr inbounds %struct._obstack_chunk, %struct._obstack_chunk* %23, i32 0, i32 1
  %25 = load %struct._obstack_chunk*, %struct._obstack_chunk** %24, align 8
  store %struct._obstack_chunk* %25, %struct._obstack_chunk** %3, align 8
  br label %8, !llvm.loop !130

26:                                               ; preds = %8
  %27 = load i64, i64* %4, align 8
  ret i64 %27
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.tm_zone* @tzalloc(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %struct.tm_zone*, align 8
  store i8* %0, i8** %2, align 8
  %6 = load i8*, i8** %2, align 8
  %7 = icmp ne i8* %6, null
  br i1 %7, label %8, label %12

8:                                                ; preds = %1
  %9 = load i8*, i8** %2, align 8
  %10 = call i64 @strlen(i8* %9) #17
  %11 = add i64 %10, 1
  br label %13

12:                                               ; preds = %1
  br label %13

13:                                               ; preds = %12, %8
  %14 = phi i64 [ %11, %8 ], [ 0, %12 ]
  store i64 %14, i64* %3, align 8
  %15 = load i64, i64* %3, align 8
  %16 = icmp ult i64 %15, 119
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %21

18:                                               ; preds = %13
  %19 = load i64, i64* %3, align 8
  %20 = add i64 %19, 1
  br label %21

21:                                               ; preds = %18, %17
  %22 = phi i64 [ 119, %17 ], [ %20, %18 ]
  store i64 %22, i64* %4, align 8
  %23 = load i64, i64* %4, align 8
  %24 = add i64 16, %23
  %25 = and i64 %24, -8
  %26 = call noalias i8* @malloc(i64 %25) #14
  %27 = bitcast i8* %26 to %struct.tm_zone*
  store %struct.tm_zone* %27, %struct.tm_zone** %5, align 8
  %28 = load %struct.tm_zone*, %struct.tm_zone** %5, align 8
  %29 = icmp ne %struct.tm_zone* %28, null
  br i1 %29, label %30, label %53

30:                                               ; preds = %21
  %31 = load %struct.tm_zone*, %struct.tm_zone** %5, align 8
  %32 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %31, i32 0, i32 0
  store %struct.tm_zone* null, %struct.tm_zone** %32, align 8
  %33 = load i8*, i8** %2, align 8
  %34 = icmp ne i8* %33, null
  %35 = xor i1 %34, true
  %36 = xor i1 %35, true
  %37 = zext i1 %36 to i32
  %38 = trunc i32 %37 to i8
  %39 = load %struct.tm_zone*, %struct.tm_zone** %5, align 8
  %40 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %39, i32 0, i32 1
  store i8 %38, i8* %40, align 8
  %41 = load %struct.tm_zone*, %struct.tm_zone** %5, align 8
  %42 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %41, i32 0, i32 2
  %43 = getelementptr inbounds [0 x i8], [0 x i8]* %42, i64 0, i64 0
  store i8 0, i8* %43, align 1
  %44 = load i8*, i8** %2, align 8
  %45 = icmp ne i8* %44, null
  br i1 %45, label %46, label %52

46:                                               ; preds = %30
  %47 = load %struct.tm_zone*, %struct.tm_zone** %5, align 8
  %48 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %47, i32 0, i32 2
  %49 = getelementptr inbounds [0 x i8], [0 x i8]* %48, i64 0, i64 0
  %50 = load i8*, i8** %2, align 8
  %51 = load i64, i64* %3, align 8
  call void @extend_abbrs(i8* %49, i8* %50, i64 %51)
  br label %52

52:                                               ; preds = %46, %30
  br label %53

53:                                               ; preds = %52, %21
  %54 = load %struct.tm_zone*, %struct.tm_zone** %5, align 8
  ret %struct.tm_zone* %54
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @extend_abbrs(i8* %0, i8* %1, i64 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load i8*, i8** %4, align 8
  %8 = load i8*, i8** %5, align 8
  %9 = load i64, i64* %6, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %8, i64 %9, i1 false)
  %10 = load i8*, i8** %4, align 8
  %11 = load i64, i64* %6, align 8
  %12 = getelementptr inbounds i8, i8* %10, i64 %11
  store i8 0, i8* %12, align 1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @tzfree(%struct.tm_zone* %0) #0 {
  %2 = alloca %struct.tm_zone*, align 8
  %3 = alloca %struct.tm_zone*, align 8
  store %struct.tm_zone* %0, %struct.tm_zone** %2, align 8
  %4 = load %struct.tm_zone*, %struct.tm_zone** %2, align 8
  %5 = icmp ne %struct.tm_zone* %4, inttoptr (i64 1 to %struct.tm_zone*)
  br i1 %5, label %6, label %18

6:                                                ; preds = %1
  br label %7

7:                                                ; preds = %10, %6
  %8 = load %struct.tm_zone*, %struct.tm_zone** %2, align 8
  %9 = icmp ne %struct.tm_zone* %8, null
  br i1 %9, label %10, label %17

10:                                               ; preds = %7
  %11 = load %struct.tm_zone*, %struct.tm_zone** %2, align 8
  %12 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %11, i32 0, i32 0
  %13 = load %struct.tm_zone*, %struct.tm_zone** %12, align 8
  store %struct.tm_zone* %13, %struct.tm_zone** %3, align 8
  %14 = load %struct.tm_zone*, %struct.tm_zone** %2, align 8
  %15 = bitcast %struct.tm_zone* %14 to i8*
  call void @free(i8* %15) #14
  %16 = load %struct.tm_zone*, %struct.tm_zone** %3, align 8
  store %struct.tm_zone* %16, %struct.tm_zone** %2, align 8
  br label %7, !llvm.loop !131

17:                                               ; preds = %7
  br label %18

18:                                               ; preds = %17, %1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.tm* @localtime_rz(%struct.tm_zone* %0, i64* nonnull %1, %struct.tm* nonnull %2) #0 {
  %4 = alloca %struct.tm*, align 8
  %5 = alloca %struct.tm_zone*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca %struct.tm*, align 8
  %8 = alloca %struct.tm_zone*, align 8
  %9 = alloca i8, align 1
  store %struct.tm_zone* %0, %struct.tm_zone** %5, align 8
  store i64* %1, i64** %6, align 8
  store %struct.tm* %2, %struct.tm** %7, align 8
  %10 = load %struct.tm_zone*, %struct.tm_zone** %5, align 8
  %11 = icmp ne %struct.tm_zone* %10, null
  br i1 %11, label %16, label %12

12:                                               ; preds = %3
  %13 = load i64*, i64** %6, align 8
  %14 = load %struct.tm*, %struct.tm** %7, align 8
  %15 = call %struct.tm* @gmtime_r(i64* %13, %struct.tm* %14) #14
  store %struct.tm* %15, %struct.tm** %4, align 8
  br label %42

16:                                               ; preds = %3
  %17 = load %struct.tm_zone*, %struct.tm_zone** %5, align 8
  %18 = call %struct.tm_zone* @set_tz(%struct.tm_zone* %17)
  store %struct.tm_zone* %18, %struct.tm_zone** %8, align 8
  %19 = load %struct.tm_zone*, %struct.tm_zone** %8, align 8
  %20 = icmp ne %struct.tm_zone* %19, null
  br i1 %20, label %21, label %41

21:                                               ; preds = %16
  %22 = load i64*, i64** %6, align 8
  %23 = load %struct.tm*, %struct.tm** %7, align 8
  %24 = call %struct.tm* @localtime_r(i64* %22, %struct.tm* %23) #14
  %25 = icmp ne %struct.tm* %24, null
  br i1 %25, label %26, label %30

26:                                               ; preds = %21
  %27 = load %struct.tm_zone*, %struct.tm_zone** %5, align 8
  %28 = load %struct.tm*, %struct.tm** %7, align 8
  %29 = call zeroext i1 @save_abbr(%struct.tm_zone* %27, %struct.tm* %28)
  br label %30

30:                                               ; preds = %26, %21
  %31 = phi i1 [ false, %21 ], [ %29, %26 ]
  %32 = zext i1 %31 to i8
  store i8 %32, i8* %9, align 1
  %33 = load %struct.tm_zone*, %struct.tm_zone** %8, align 8
  %34 = call zeroext i1 @revert_tz(%struct.tm_zone* %33)
  br i1 %34, label %35, label %40

35:                                               ; preds = %30
  %36 = load i8, i8* %9, align 1
  %37 = trunc i8 %36 to i1
  br i1 %37, label %38, label %40

38:                                               ; preds = %35
  %39 = load %struct.tm*, %struct.tm** %7, align 8
  store %struct.tm* %39, %struct.tm** %4, align 8
  br label %42

40:                                               ; preds = %35, %30
  br label %41

41:                                               ; preds = %40, %16
  store %struct.tm* null, %struct.tm** %4, align 8
  br label %42

42:                                               ; preds = %41, %38, %12
  %43 = load %struct.tm*, %struct.tm** %4, align 8
  ret %struct.tm* %43
}

; Function Attrs: nounwind
declare dso_local %struct.tm* @gmtime_r(i64*, %struct.tm*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.tm_zone* @set_tz(%struct.tm_zone* %0) #0 {
  %2 = alloca %struct.tm_zone*, align 8
  %3 = alloca %struct.tm_zone*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.tm_zone*, align 8
  %6 = alloca i32, align 4
  store %struct.tm_zone* %0, %struct.tm_zone** %3, align 8
  %7 = call i8* @getenv_TZ()
  store i8* %7, i8** %4, align 8
  %8 = load i8*, i8** %4, align 8
  %9 = icmp ne i8* %8, null
  br i1 %9, label %10, label %23

10:                                               ; preds = %1
  %11 = load %struct.tm_zone*, %struct.tm_zone** %3, align 8
  %12 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %11, i32 0, i32 1
  %13 = load i8, i8* %12, align 8
  %14 = sext i8 %13 to i32
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %29

16:                                               ; preds = %10
  %17 = load %struct.tm_zone*, %struct.tm_zone** %3, align 8
  %18 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %17, i32 0, i32 2
  %19 = getelementptr inbounds [0 x i8], [0 x i8]* %18, i64 0, i64 0
  %20 = load i8*, i8** %4, align 8
  %21 = call i32 @strcmp(i8* %19, i8* %20) #17
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %28, label %29

23:                                               ; preds = %1
  %24 = load %struct.tm_zone*, %struct.tm_zone** %3, align 8
  %25 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %24, i32 0, i32 1
  %26 = load i8, i8* %25, align 8
  %27 = icmp ne i8 %26, 0
  br i1 %27, label %29, label %28

28:                                               ; preds = %23, %16
  store %struct.tm_zone* inttoptr (i64 1 to %struct.tm_zone*), %struct.tm_zone** %2, align 8
  br label %47

29:                                               ; preds = %23, %16, %10
  %30 = load i8*, i8** %4, align 8
  %31 = call %struct.tm_zone* @tzalloc(i8* %30)
  store %struct.tm_zone* %31, %struct.tm_zone** %5, align 8
  %32 = load %struct.tm_zone*, %struct.tm_zone** %5, align 8
  %33 = icmp ne %struct.tm_zone* %32, null
  br i1 %33, label %36, label %34

34:                                               ; preds = %29
  %35 = load %struct.tm_zone*, %struct.tm_zone** %5, align 8
  store %struct.tm_zone* %35, %struct.tm_zone** %2, align 8
  br label %47

36:                                               ; preds = %29
  %37 = load %struct.tm_zone*, %struct.tm_zone** %3, align 8
  %38 = call zeroext i1 @change_env(%struct.tm_zone* %37)
  br i1 %38, label %45, label %39

39:                                               ; preds = %36
  %40 = call i32* @__errno_location() #18
  %41 = load i32, i32* %40, align 4
  store i32 %41, i32* %6, align 4
  %42 = load %struct.tm_zone*, %struct.tm_zone** %5, align 8
  call void @tzfree(%struct.tm_zone* %42)
  %43 = load i32, i32* %6, align 4
  %44 = call i32* @__errno_location() #18
  store i32 %43, i32* %44, align 4
  store %struct.tm_zone* null, %struct.tm_zone** %2, align 8
  br label %47

45:                                               ; preds = %36
  %46 = load %struct.tm_zone*, %struct.tm_zone** %5, align 8
  store %struct.tm_zone* %46, %struct.tm_zone** %2, align 8
  br label %47

47:                                               ; preds = %45, %39, %34, %28
  %48 = load %struct.tm_zone*, %struct.tm_zone** %2, align 8
  ret %struct.tm_zone* %48
}

; Function Attrs: nounwind
declare dso_local %struct.tm* @localtime_r(i64*, %struct.tm*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @save_abbr(%struct.tm_zone* %0, %struct.tm* %1) #0 {
  %3 = alloca i1, align 1
  %4 = alloca %struct.tm_zone*, align 8
  %5 = alloca %struct.tm*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  store %struct.tm_zone* %0, %struct.tm_zone** %4, align 8
  store %struct.tm* %1, %struct.tm** %5, align 8
  store i8* null, i8** %6, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.498, i64 0, i64 0), i8** %7, align 8
  %10 = load %struct.tm*, %struct.tm** %5, align 8
  %11 = getelementptr inbounds %struct.tm, %struct.tm* %10, i32 0, i32 10
  %12 = load i8*, i8** %11, align 8
  store i8* %12, i8** %6, align 8
  %13 = load i8*, i8** %6, align 8
  %14 = icmp ne i8* %13, null
  br i1 %14, label %15, label %26

15:                                               ; preds = %2
  %16 = load %struct.tm*, %struct.tm** %5, align 8
  %17 = bitcast %struct.tm* %16 to i8*
  %18 = load i8*, i8** %6, align 8
  %19 = icmp ule i8* %17, %18
  br i1 %19, label %20, label %27

20:                                               ; preds = %15
  %21 = load i8*, i8** %6, align 8
  %22 = load %struct.tm*, %struct.tm** %5, align 8
  %23 = getelementptr inbounds %struct.tm, %struct.tm* %22, i64 1
  %24 = bitcast %struct.tm* %23 to i8*
  %25 = icmp ult i8* %21, %24
  br i1 %25, label %26, label %27

26:                                               ; preds = %20, %2
  store i1 true, i1* %3, align 1
  br label %125

27:                                               ; preds = %20, %15
  %28 = load i8*, i8** %6, align 8
  %29 = load i8, i8* %28, align 1
  %30 = icmp ne i8 %29, 0
  br i1 %30, label %31, label %121

31:                                               ; preds = %27
  %32 = load %struct.tm_zone*, %struct.tm_zone** %4, align 8
  %33 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %32, i32 0, i32 2
  %34 = getelementptr inbounds [0 x i8], [0 x i8]* %33, i64 0, i64 0
  store i8* %34, i8** %7, align 8
  br label %35

35:                                               ; preds = %119, %31
  %36 = load i8*, i8** %7, align 8
  %37 = load i8*, i8** %6, align 8
  %38 = call i32 @strcmp(i8* %36, i8* %37) #17
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %120

40:                                               ; preds = %35
  %41 = load i8*, i8** %7, align 8
  %42 = load i8, i8* %41, align 1
  %43 = sext i8 %42 to i32
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %98, label %45

45:                                               ; preds = %40
  %46 = load i8*, i8** %7, align 8
  %47 = load %struct.tm_zone*, %struct.tm_zone** %4, align 8
  %48 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %47, i32 0, i32 2
  %49 = getelementptr inbounds [0 x i8], [0 x i8]* %48, i64 0, i64 0
  %50 = icmp eq i8* %46, %49
  br i1 %50, label %51, label %57

51:                                               ; preds = %45
  %52 = load %struct.tm_zone*, %struct.tm_zone** %4, align 8
  %53 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %52, i32 0, i32 1
  %54 = load i8, i8* %53, align 8
  %55 = sext i8 %54 to i32
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %98, label %57

57:                                               ; preds = %51, %45
  %58 = load i8*, i8** %6, align 8
  %59 = call i64 @strlen(i8* %58) #17
  %60 = add i64 %59, 1
  store i64 %60, i64* %8, align 8
  %61 = load i8*, i8** %7, align 8
  %62 = load %struct.tm_zone*, %struct.tm_zone** %4, align 8
  %63 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %62, i32 0, i32 2
  %64 = getelementptr inbounds [0 x i8], [0 x i8]* %63, i64 0, i64 0
  %65 = ptrtoint i8* %61 to i64
  %66 = ptrtoint i8* %64 to i64
  %67 = sub i64 %65, %66
  store i64 %67, i64* %9, align 8
  %68 = load i64, i64* %9, align 8
  %69 = sub i64 -1, %68
  %70 = load i64, i64* %8, align 8
  %71 = icmp ult i64 %69, %70
  br i1 %71, label %72, label %74

72:                                               ; preds = %57
  %73 = call i32* @__errno_location() #18
  store i32 12, i32* %73, align 4
  store i1 false, i1* %3, align 1
  br label %125

74:                                               ; preds = %57
  %75 = load i64, i64* %9, align 8
  %76 = load i64, i64* %8, align 8
  %77 = add i64 %75, %76
  %78 = icmp ult i64 %77, 119
  br i1 %78, label %79, label %83

79:                                               ; preds = %74
  %80 = load i8*, i8** %7, align 8
  %81 = load i8*, i8** %6, align 8
  %82 = load i64, i64* %8, align 8
  call void @extend_abbrs(i8* %80, i8* %81, i64 %82)
  br label %97

83:                                               ; preds = %74
  %84 = load i8*, i8** %6, align 8
  %85 = call %struct.tm_zone* @tzalloc(i8* %84)
  %86 = load %struct.tm_zone*, %struct.tm_zone** %4, align 8
  %87 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %86, i32 0, i32 0
  store %struct.tm_zone* %85, %struct.tm_zone** %87, align 8
  store %struct.tm_zone* %85, %struct.tm_zone** %4, align 8
  %88 = load %struct.tm_zone*, %struct.tm_zone** %4, align 8
  %89 = icmp ne %struct.tm_zone* %88, null
  br i1 %89, label %91, label %90

90:                                               ; preds = %83
  store i1 false, i1* %3, align 1
  br label %125

91:                                               ; preds = %83
  %92 = load %struct.tm_zone*, %struct.tm_zone** %4, align 8
  %93 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %92, i32 0, i32 1
  store i8 0, i8* %93, align 8
  %94 = load %struct.tm_zone*, %struct.tm_zone** %4, align 8
  %95 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %94, i32 0, i32 2
  %96 = getelementptr inbounds [0 x i8], [0 x i8]* %95, i64 0, i64 0
  store i8* %96, i8** %7, align 8
  br label %97

97:                                               ; preds = %91, %79
  br label %120

98:                                               ; preds = %51, %40
  %99 = load i8*, i8** %7, align 8
  %100 = call i64 @strlen(i8* %99) #17
  %101 = add i64 %100, 1
  %102 = load i8*, i8** %7, align 8
  %103 = getelementptr inbounds i8, i8* %102, i64 %101
  store i8* %103, i8** %7, align 8
  %104 = load i8*, i8** %7, align 8
  %105 = load i8, i8* %104, align 1
  %106 = icmp ne i8 %105, 0
  br i1 %106, label %119, label %107

107:                                              ; preds = %98
  %108 = load %struct.tm_zone*, %struct.tm_zone** %4, align 8
  %109 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %108, i32 0, i32 0
  %110 = load %struct.tm_zone*, %struct.tm_zone** %109, align 8
  %111 = icmp ne %struct.tm_zone* %110, null
  br i1 %111, label %112, label %119

112:                                              ; preds = %107
  %113 = load %struct.tm_zone*, %struct.tm_zone** %4, align 8
  %114 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %113, i32 0, i32 0
  %115 = load %struct.tm_zone*, %struct.tm_zone** %114, align 8
  store %struct.tm_zone* %115, %struct.tm_zone** %4, align 8
  %116 = load %struct.tm_zone*, %struct.tm_zone** %4, align 8
  %117 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %116, i32 0, i32 2
  %118 = getelementptr inbounds [0 x i8], [0 x i8]* %117, i64 0, i64 0
  store i8* %118, i8** %7, align 8
  br label %119

119:                                              ; preds = %112, %107, %98
  br label %35, !llvm.loop !132

120:                                              ; preds = %97, %35
  br label %121

121:                                              ; preds = %120, %27
  %122 = load i8*, i8** %7, align 8
  %123 = load %struct.tm*, %struct.tm** %5, align 8
  %124 = getelementptr inbounds %struct.tm, %struct.tm* %123, i32 0, i32 10
  store i8* %122, i8** %124, align 8
  store i1 true, i1* %3, align 1
  br label %125

125:                                              ; preds = %121, %90, %72, %26
  %126 = load i1, i1* %3, align 1
  ret i1 %126
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @revert_tz(%struct.tm_zone* %0) #0 {
  %2 = alloca i1, align 1
  %3 = alloca %struct.tm_zone*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8, align 1
  store %struct.tm_zone* %0, %struct.tm_zone** %3, align 8
  %6 = load %struct.tm_zone*, %struct.tm_zone** %3, align 8
  %7 = icmp eq %struct.tm_zone* %6, inttoptr (i64 1 to %struct.tm_zone*)
  br i1 %7, label %8, label %9

8:                                                ; preds = %1
  store i1 true, i1* %2, align 1
  br label %26

9:                                                ; preds = %1
  %10 = call i32* @__errno_location() #18
  %11 = load i32, i32* %10, align 4
  store i32 %11, i32* %4, align 4
  %12 = load %struct.tm_zone*, %struct.tm_zone** %3, align 8
  %13 = call zeroext i1 @change_env(%struct.tm_zone* %12)
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %5, align 1
  %15 = load i8, i8* %5, align 1
  %16 = trunc i8 %15 to i1
  br i1 %16, label %20, label %17

17:                                               ; preds = %9
  %18 = call i32* @__errno_location() #18
  %19 = load i32, i32* %18, align 4
  store i32 %19, i32* %4, align 4
  br label %20

20:                                               ; preds = %17, %9
  %21 = load %struct.tm_zone*, %struct.tm_zone** %3, align 8
  call void @tzfree(%struct.tm_zone* %21)
  %22 = load i32, i32* %4, align 4
  %23 = call i32* @__errno_location() #18
  store i32 %22, i32* %23, align 4
  %24 = load i8, i8* %5, align 1
  %25 = trunc i8 %24 to i1
  store i1 %25, i1* %2, align 1
  br label %26

26:                                               ; preds = %20, %8
  %27 = load i1, i1* %2, align 1
  ret i1 %27
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @change_env(%struct.tm_zone* %0) #0 {
  %2 = alloca i1, align 1
  %3 = alloca %struct.tm_zone*, align 8
  store %struct.tm_zone* %0, %struct.tm_zone** %3, align 8
  %4 = load %struct.tm_zone*, %struct.tm_zone** %3, align 8
  %5 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %4, i32 0, i32 1
  %6 = load i8, i8* %5, align 8
  %7 = sext i8 %6 to i32
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %1
  %10 = load %struct.tm_zone*, %struct.tm_zone** %3, align 8
  %11 = getelementptr inbounds %struct.tm_zone, %struct.tm_zone* %10, i32 0, i32 2
  %12 = getelementptr inbounds [0 x i8], [0 x i8]* %11, i64 0, i64 0
  br label %14

13:                                               ; preds = %1
  br label %14

14:                                               ; preds = %13, %9
  %15 = phi i8* [ %12, %9 ], [ null, %13 ]
  %16 = call i32 @setenv_TZ(i8* %15)
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %14
  store i1 false, i1* %2, align 1
  br label %20

19:                                               ; preds = %14
  call void @tzset() #14
  store i1 true, i1* %2, align 1
  br label %20

20:                                               ; preds = %19, %18
  %21 = load i1, i1* %2, align 1
  ret i1 %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setenv_TZ(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = icmp ne i8* %3, null
  br i1 %4, label %5, label %8

5:                                                ; preds = %1
  %6 = load i8*, i8** %2, align 8
  %7 = call i32 @setenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.497, i64 0, i64 0), i8* %6, i32 1) #14
  br label %10

8:                                                ; preds = %1
  %9 = call i32 @unsetenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.497, i64 0, i64 0)) #14
  br label %10

10:                                               ; preds = %8, %5
  %11 = phi i32 [ %7, %5 ], [ %9, %8 ]
  ret i32 %11
}

; Function Attrs: nounwind
declare dso_local void @tzset() #1

; Function Attrs: nounwind
declare dso_local i32 @setenv(i8*, i8*, i32) #1

; Function Attrs: nounwind
declare dso_local i32 @unsetenv(i8*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @getenv_TZ() #0 {
  %1 = call i8* @getenv(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.497, i64 0, i64 0)) #14
  ret i8* %1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @mktime_z(%struct.tm_zone* %0, %struct.tm* nonnull %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.tm_zone*, align 8
  %5 = alloca %struct.tm*, align 8
  %6 = alloca %struct.tm_zone*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.tm, align 8
  store %struct.tm_zone* %0, %struct.tm_zone** %4, align 8
  store %struct.tm* %1, %struct.tm** %5, align 8
  %10 = load %struct.tm_zone*, %struct.tm_zone** %4, align 8
  %11 = icmp ne %struct.tm_zone* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %2
  %13 = load %struct.tm*, %struct.tm** %5, align 8
  %14 = call i64 @timegm(%struct.tm* %13) #14
  store i64 %14, i64* %3, align 8
  br label %46

15:                                               ; preds = %2
  %16 = load %struct.tm_zone*, %struct.tm_zone** %4, align 8
  %17 = call %struct.tm_zone* @set_tz(%struct.tm_zone* %16)
  store %struct.tm_zone* %17, %struct.tm_zone** %6, align 8
  %18 = load %struct.tm_zone*, %struct.tm_zone** %6, align 8
  %19 = icmp ne %struct.tm_zone* %18, null
  br i1 %19, label %20, label %45

20:                                               ; preds = %15
  %21 = load %struct.tm*, %struct.tm** %5, align 8
  %22 = call i64 @mktime(%struct.tm* %21) #14
  store i64 %22, i64* %7, align 8
  store i64 -1, i64* %8, align 8
  %23 = load i64, i64* %7, align 8
  %24 = load i64, i64* %8, align 8
  %25 = icmp ne i64 %23, %24
  br i1 %25, label %33, label %26

26:                                               ; preds = %20
  %27 = call %struct.tm* @localtime_r(i64* %7, %struct.tm* %9) #14
  %28 = icmp ne %struct.tm* %27, null
  br i1 %28, label %29, label %39

29:                                               ; preds = %26
  %30 = load %struct.tm*, %struct.tm** %5, align 8
  %31 = call i32 @equal_tm(%struct.tm* %30, %struct.tm* %9)
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %39

33:                                               ; preds = %29, %20
  %34 = load %struct.tm_zone*, %struct.tm_zone** %4, align 8
  %35 = load %struct.tm*, %struct.tm** %5, align 8
  %36 = call zeroext i1 @save_abbr(%struct.tm_zone* %34, %struct.tm* %35)
  br i1 %36, label %39, label %37

37:                                               ; preds = %33
  %38 = load i64, i64* %8, align 8
  store i64 %38, i64* %7, align 8
  br label %39

39:                                               ; preds = %37, %33, %29, %26
  %40 = load %struct.tm_zone*, %struct.tm_zone** %6, align 8
  %41 = call zeroext i1 @revert_tz(%struct.tm_zone* %40)
  br i1 %41, label %42, label %44

42:                                               ; preds = %39
  %43 = load i64, i64* %7, align 8
  store i64 %43, i64* %3, align 8
  br label %46

44:                                               ; preds = %39
  br label %45

45:                                               ; preds = %44, %15
  store i64 -1, i64* %3, align 8
  br label %46

46:                                               ; preds = %45, %42, %12
  %47 = load i64, i64* %3, align 8
  ret i64 %47
}

; Function Attrs: nounwind
declare dso_local i64 @timegm(%struct.tm*) #1

; Function Attrs: nounwind
declare dso_local i64 @mktime(%struct.tm*) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @equal_tm(%struct.tm* %0, %struct.tm* %1) #0 {
  %3 = alloca %struct.tm*, align 8
  %4 = alloca %struct.tm*, align 8
  store %struct.tm* %0, %struct.tm** %3, align 8
  store %struct.tm* %1, %struct.tm** %4, align 8
  %5 = load %struct.tm*, %struct.tm** %3, align 8
  %6 = getelementptr inbounds %struct.tm, %struct.tm* %5, i32 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = load %struct.tm*, %struct.tm** %4, align 8
  %9 = getelementptr inbounds %struct.tm, %struct.tm* %8, i32 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = xor i32 %7, %10
  %12 = load %struct.tm*, %struct.tm** %3, align 8
  %13 = getelementptr inbounds %struct.tm, %struct.tm* %12, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = load %struct.tm*, %struct.tm** %4, align 8
  %16 = getelementptr inbounds %struct.tm, %struct.tm* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = xor i32 %14, %17
  %19 = or i32 %11, %18
  %20 = load %struct.tm*, %struct.tm** %3, align 8
  %21 = getelementptr inbounds %struct.tm, %struct.tm* %20, i32 0, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = load %struct.tm*, %struct.tm** %4, align 8
  %24 = getelementptr inbounds %struct.tm, %struct.tm* %23, i32 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = xor i32 %22, %25
  %27 = or i32 %19, %26
  %28 = load %struct.tm*, %struct.tm** %3, align 8
  %29 = getelementptr inbounds %struct.tm, %struct.tm* %28, i32 0, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = load %struct.tm*, %struct.tm** %4, align 8
  %32 = getelementptr inbounds %struct.tm, %struct.tm* %31, i32 0, i32 3
  %33 = load i32, i32* %32, align 4
  %34 = xor i32 %30, %33
  %35 = or i32 %27, %34
  %36 = load %struct.tm*, %struct.tm** %3, align 8
  %37 = getelementptr inbounds %struct.tm, %struct.tm* %36, i32 0, i32 4
  %38 = load i32, i32* %37, align 8
  %39 = load %struct.tm*, %struct.tm** %4, align 8
  %40 = getelementptr inbounds %struct.tm, %struct.tm* %39, i32 0, i32 4
  %41 = load i32, i32* %40, align 8
  %42 = xor i32 %38, %41
  %43 = or i32 %35, %42
  %44 = load %struct.tm*, %struct.tm** %3, align 8
  %45 = getelementptr inbounds %struct.tm, %struct.tm* %44, i32 0, i32 5
  %46 = load i32, i32* %45, align 4
  %47 = load %struct.tm*, %struct.tm** %4, align 8
  %48 = getelementptr inbounds %struct.tm, %struct.tm* %47, i32 0, i32 5
  %49 = load i32, i32* %48, align 4
  %50 = xor i32 %46, %49
  %51 = or i32 %43, %50
  %52 = load %struct.tm*, %struct.tm** %3, align 8
  %53 = getelementptr inbounds %struct.tm, %struct.tm* %52, i32 0, i32 8
  %54 = load i32, i32* %53, align 8
  %55 = load %struct.tm*, %struct.tm** %4, align 8
  %56 = getelementptr inbounds %struct.tm, %struct.tm* %55, i32 0, i32 8
  %57 = load i32, i32* %56, align 8
  %58 = call zeroext i1 @isdst_differ(i32 %54, i32 %57)
  %59 = zext i1 %58 to i32
  %60 = or i32 %51, %59
  %61 = icmp ne i32 %60, 0
  %62 = xor i1 %61, true
  %63 = zext i1 %62 to i32
  ret i32 %63
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @isdst_differ(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %3, align 4
  %6 = icmp ne i32 %5, 0
  %7 = xor i1 %6, true
  %8 = zext i1 %7 to i32
  %9 = load i32, i32* %4, align 4
  %10 = icmp ne i32 %9, 0
  %11 = xor i1 %10, true
  %12 = zext i1 %11 to i32
  %13 = icmp ne i32 %8, %12
  br i1 %13, label %14, label %20

14:                                               ; preds = %2
  %15 = load i32, i32* %3, align 4
  %16 = icmp sle i32 0, %15
  br i1 %16, label %17, label %20

17:                                               ; preds = %14
  %18 = load i32, i32* %4, align 4
  %19 = icmp sle i32 0, %18
  br label %20

20:                                               ; preds = %17, %14, %2
  %21 = phi i1 [ false, %14 ], [ false, %2 ], [ %19, %17 ]
  ret i1 %21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rotr_sz(i64 %0, i32 %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  store i64 %0, i64* %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load i64, i64* %3, align 8
  %6 = load i32, i32* %4, align 4
  %7 = zext i32 %6 to i64
  %8 = lshr i64 %5, %7
  %9 = load i64, i64* %3, align 8
  %10 = load i32, i32* %4, align 4
  %11 = sext i32 %10 to i64
  %12 = sub i64 64, %11
  %13 = shl i64 %9, %12
  %14 = or i64 %8, %13
  ret i64 %14
}

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8* %0, i8* %1) #9 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  %10 = load i8*, i8** %4, align 8
  store i8* %10, i8** %6, align 8
  %11 = load i8*, i8** %5, align 8
  store i8* %11, i8** %7, align 8
  %12 = load i8*, i8** %6, align 8
  %13 = load i8*, i8** %7, align 8
  %14 = icmp eq i8* %12, %13
  br i1 %14, label %15, label %16

15:                                               ; preds = %2
  store i32 0, i32* %3, align 4
  br label %49

16:                                               ; preds = %2
  br label %17

17:                                               ; preds = %37, %16
  %18 = load i8*, i8** %6, align 8
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = call i32 @c_tolower(i32 %20)
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %8, align 1
  %23 = load i8*, i8** %7, align 8
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = call i32 @c_tolower(i32 %25)
  %27 = trunc i32 %26 to i8
  store i8 %27, i8* %9, align 1
  %28 = load i8, i8* %8, align 1
  %29 = zext i8 %28 to i32
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %32

31:                                               ; preds = %17
  br label %43

32:                                               ; preds = %17
  %33 = load i8*, i8** %6, align 8
  %34 = getelementptr inbounds i8, i8* %33, i32 1
  store i8* %34, i8** %6, align 8
  %35 = load i8*, i8** %7, align 8
  %36 = getelementptr inbounds i8, i8* %35, i32 1
  store i8* %36, i8** %7, align 8
  br label %37

37:                                               ; preds = %32
  %38 = load i8, i8* %8, align 1
  %39 = zext i8 %38 to i32
  %40 = load i8, i8* %9, align 1
  %41 = zext i8 %40 to i32
  %42 = icmp eq i32 %39, %41
  br i1 %42, label %17, label %43, !llvm.loop !133

43:                                               ; preds = %37, %31
  %44 = load i8, i8* %8, align 1
  %45 = zext i8 %44 to i32
  %46 = load i8, i8* %9, align 1
  %47 = zext i8 %46 to i32
  %48 = sub nsw i32 %45, %47
  store i32 %48, i32* %3, align 4
  br label %49

49:                                               ; preds = %43, %15
  %50 = load i32, i32* %3, align 4
  ret i32 %50
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._IO_FILE*, align 8
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 8
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8
  %8 = call i64 @__fpending(%struct._IO_FILE* %7) #14
  %9 = icmp ne i64 %8, 0
  %10 = zext i1 %9 to i8
  store i8 %10, i8* %4, align 1
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8
  %12 = call i32 @ferror_unlocked(%struct._IO_FILE* %11) #14
  %13 = icmp ne i32 %12, 0
  %14 = zext i1 %13 to i8
  store i8 %14, i8* %5, align 1
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8
  %16 = call i32 @rpl_fclose(%struct._IO_FILE* %15)
  %17 = icmp ne i32 %16, 0
  %18 = zext i1 %17 to i8
  store i8 %18, i8* %6, align 1
  %19 = load i8, i8* %5, align 1
  %20 = trunc i8 %19 to i1
  br i1 %20, label %31, label %21

21:                                               ; preds = %1
  %22 = load i8, i8* %6, align 1
  %23 = trunc i8 %22 to i1
  br i1 %23, label %24, label %37

24:                                               ; preds = %21
  %25 = load i8, i8* %4, align 1
  %26 = trunc i8 %25 to i1
  br i1 %26, label %31, label %27

27:                                               ; preds = %24
  %28 = call i32* @__errno_location() #18
  %29 = load i32, i32* %28, align 4
  %30 = icmp ne i32 %29, 9
  br i1 %30, label %31, label %37

31:                                               ; preds = %27, %24, %1
  %32 = load i8, i8* %6, align 1
  %33 = trunc i8 %32 to i1
  br i1 %33, label %36, label %34

34:                                               ; preds = %31
  %35 = call i32* @__errno_location() #18
  store i32 0, i32* %35, align 4
  br label %36

36:                                               ; preds = %34, %31
  store i32 -1, i32* %2, align 4
  br label %38

37:                                               ; preds = %27, %21
  store i32 0, i32* %2, align 4
  br label %38

38:                                               ; preds = %37, %36
  %39 = load i32, i32* %2, align 4
  ret i32 %39
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #1

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #1

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i64 @hash_pjw(i8* %0, i64 %1) #9 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  store i64 0, i64* %6, align 8
  %7 = load i8*, i8** %3, align 8
  store i8* %7, i8** %5, align 8
  br label %8

8:                                                ; preds = %22, %2
  %9 = load i8*, i8** %5, align 8
  %10 = load i8, i8* %9, align 1
  %11 = icmp ne i8 %10, 0
  br i1 %11, label %12, label %25

12:                                               ; preds = %8
  %13 = load i8*, i8** %5, align 8
  %14 = load i8, i8* %13, align 1
  %15 = sext i8 %14 to i64
  %16 = load i64, i64* %6, align 8
  %17 = shl i64 %16, 9
  %18 = load i64, i64* %6, align 8
  %19 = lshr i64 %18, 55
  %20 = or i64 %17, %19
  %21 = add i64 %15, %20
  store i64 %21, i64* %6, align 8
  br label %22

22:                                               ; preds = %12
  %23 = load i8*, i8** %5, align 8
  %24 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %24, i8** %5, align 8
  br label %8, !llvm.loop !134

25:                                               ; preds = %8
  %26 = load i64, i64* %6, align 8
  %27 = load i64, i64* %4, align 8
  %28 = urem i64 %26, %27
  ret i64 %28
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #0 {
  %1 = alloca i8*, align 8
  %2 = call i8* @nl_langinfo(i32 14) #14
  store i8* %2, i8** %1, align 8
  %3 = load i8*, i8** %1, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %5, label %6

5:                                                ; preds = %0
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.511, i64 0, i64 0), i8** %1, align 8
  br label %6

6:                                                ; preds = %5, %0
  %7 = load i8*, i8** %1, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 0
  %9 = load i8, i8* %8, align 1
  %10 = sext i8 %9 to i32
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %6
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.512, i64 0, i64 0), i8** %1, align 8
  br label %13

13:                                               ; preds = %12, %6
  %14 = load i8*, i8** %1, align 8
  ret i8* %14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._IO_FILE*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 8
  store i32 0, i32* %4, align 4
  store i32 0, i32* %6, align 4
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8
  %8 = call i32 @fileno(%struct._IO_FILE* %7) #14
  store i32 %8, i32* %5, align 4
  %9 = load i32, i32* %5, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %1
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8
  %13 = call i32 @fclose(%struct._IO_FILE* %12)
  store i32 %13, i32* %2, align 4
  br label %40

14:                                               ; preds = %1
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8
  %16 = call i32 @__freading(%struct._IO_FILE* %15) #14
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %23

18:                                               ; preds = %14
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8
  %20 = call i32 @fileno(%struct._IO_FILE* %19) #14
  %21 = call i64 @lseek(i32 %20, i64 0, i32 1) #14
  %22 = icmp ne i64 %21, -1
  br i1 %22, label %23, label %30

23:                                               ; preds = %18, %14
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8
  %25 = call i32 @rpl_fflush(%struct._IO_FILE* %24)
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %23
  %28 = call i32* @__errno_location() #18
  %29 = load i32, i32* %28, align 4
  store i32 %29, i32* %4, align 4
  br label %30

30:                                               ; preds = %27, %23, %18
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8
  %32 = call i32 @fclose(%struct._IO_FILE* %31)
  store i32 %32, i32* %6, align 4
  %33 = load i32, i32* %4, align 4
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %30
  %36 = load i32, i32* %4, align 4
  %37 = call i32* @__errno_location() #18
  store i32 %36, i32* %37, align 4
  store i32 -1, i32* %6, align 4
  br label %38

38:                                               ; preds = %35, %30
  %39 = load i32, i32* %6, align 4
  store i32 %39, i32* %2, align 4
  br label %40

40:                                               ; preds = %38, %11
  %41 = load i32, i32* %2, align 4
  ret i32 %41
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #1

declare dso_local i32 @fclose(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #1

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 8
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8
  %5 = icmp eq %struct._IO_FILE* %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8
  %8 = call i32 @__freading(%struct._IO_FILE* %7) #14
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %6, %1
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8
  %12 = call i32 @fflush(%struct._IO_FILE* %11)
  store i32 %12, i32* %2, align 4
  br label %17

13:                                               ; preds = %6
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %14)
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8
  %16 = call i32 @fflush(%struct._IO_FILE* %15)
  store i32 %16, i32* %2, align 4
  br label %17

17:                                               ; preds = %13, %10
  %18 = load i32, i32* %2, align 4
  ret i32 %18
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %0) #0 {
  %2 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 8
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8
  %4 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %3, i32 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = and i32 %5, 256
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8
  %10 = call i32 @rpl_fseeko(%struct._IO_FILE* %9, i64 0, i32 1)
  br label %11

11:                                               ; preds = %8, %1
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull %0, i64 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct._IO_FILE*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %5, align 8
  store i64 %1, i64* %6, align 8
  store i32 %2, i32* %7, align 4
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %10 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %9, i32 0, i32 2
  %11 = load i8*, i8** %10, align 8
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %13 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %12, i32 0, i32 1
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq i8* %11, %14
  br i1 %15, label %16, label %46

16:                                               ; preds = %3
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %18 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 5
  %19 = load i8*, i8** %18, align 8
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %21 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %20, i32 0, i32 4
  %22 = load i8*, i8** %21, align 8
  %23 = icmp eq i8* %19, %22
  br i1 %23, label %24, label %46

24:                                               ; preds = %16
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %26 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %25, i32 0, i32 9
  %27 = load i8*, i8** %26, align 8
  %28 = icmp eq i8* %27, null
  br i1 %28, label %29, label %46

29:                                               ; preds = %24
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %31 = call i32 @fileno(%struct._IO_FILE* %30) #14
  %32 = load i64, i64* %6, align 8
  %33 = load i32, i32* %7, align 4
  %34 = call i64 @lseek(i32 %31, i64 %32, i32 %33) #14
  store i64 %34, i64* %8, align 8
  %35 = load i64, i64* %8, align 8
  %36 = icmp eq i64 %35, -1
  br i1 %36, label %37, label %38

37:                                               ; preds = %29
  store i32 -1, i32* %4, align 4
  br label %51

38:                                               ; preds = %29
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %40 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %39, i32 0, i32 0
  %41 = load i32, i32* %40, align 8
  %42 = and i32 %41, -17
  store i32 %42, i32* %40, align 8
  %43 = load i64, i64* %8, align 8
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %45 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %44, i32 0, i32 21
  store i64 %43, i64* %45, align 8
  store i32 0, i32* %4, align 4
  br label %51

46:                                               ; preds = %24, %16, %3
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %48 = load i64, i64* %6, align 8
  %49 = load i32, i32* %7, align 4
  %50 = call i32 @fseeko(%struct._IO_FILE* %47, i64 %48, i32 %49)
  store i32 %50, i32* %4, align 4
  br label %51

51:                                               ; preds = %46, %38, %37
  %52 = load i32, i32* %4, align 4
  ret i32 %52
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nosync nounwind willreturn }
attributes #6 = { nounwind readnone "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #8 = { nounwind returns_twice "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noinline nounwind optnone readonly uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noinline noreturn nounwind optnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noinline nounwind optnone readnone uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nofree nosync nounwind willreturn }
attributes #14 = { nounwind }
attributes #15 = { noreturn }
attributes #16 = { noreturn nounwind }
attributes #17 = { nounwind readonly }
attributes #18 = { nounwind readnone }
attributes #19 = { nounwind returns_twice }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1, !2, !3, !4}

!0 = !{!"Ubuntu clang version 12.0.0-++20210120052627+c09be0d2a0f9-1~exp1~20210120163331.290"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 1, !"ThinLTO", i32 0}
!3 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!4 = !{i32 1, !"LTOPostLink", i32 1}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.mustprogress"}
!7 = distinct !{!7, !6}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !6}
!10 = distinct !{!10, !6}
!11 = distinct !{!11, !6}
!12 = distinct !{!12, !6}
!13 = distinct !{!13, !6}
!14 = distinct !{!14, !6}
!15 = distinct !{!15, !6}
!16 = distinct !{!16, !6}
!17 = distinct !{!17, !6}
!18 = distinct !{!18, !6}
!19 = distinct !{!19, !6}
!20 = distinct !{!20, !6}
!21 = distinct !{!21, !6}
!22 = distinct !{!22, !6}
!23 = distinct !{!23, !6}
!24 = distinct !{!24, !6}
!25 = distinct !{!25, !6}
!26 = distinct !{!26, !6}
!27 = distinct !{!27, !6}
!28 = distinct !{!28, !6}
!29 = distinct !{!29, !6}
!30 = distinct !{!30, !6}
!31 = distinct !{!31, !6}
!32 = distinct !{!32, !6}
!33 = distinct !{!33, !6}
!34 = distinct !{!34, !6}
!35 = distinct !{!35, !6}
!36 = distinct !{!36, !6}
!37 = distinct !{!37, !6}
!38 = distinct !{!38, !6}
!39 = distinct !{!39, !6}
!40 = distinct !{!40, !6}
!41 = distinct !{!41, !6}
!42 = distinct !{!42, !6}
!43 = distinct !{!43, !6}
!44 = distinct !{!44, !6}
!45 = distinct !{!45, !6}
!46 = distinct !{!46, !6}
!47 = distinct !{!47, !6}
!48 = distinct !{!48, !6}
!49 = distinct !{!49, !6}
!50 = distinct !{!50, !6}
!51 = distinct !{!51, !6}
!52 = distinct !{!52, !6}
!53 = distinct !{!53, !6}
!54 = distinct !{!54, !6}
!55 = distinct !{!55, !6}
!56 = distinct !{!56, !6}
!57 = distinct !{!57, !6}
!58 = distinct !{!58, !6}
!59 = distinct !{!59, !6}
!60 = distinct !{!60, !6}
!61 = distinct !{!61, !6}
!62 = distinct !{!62, !6}
!63 = distinct !{!63, !6}
!64 = distinct !{!64, !6}
!65 = distinct !{!65, !6}
!66 = distinct !{!66, !6}
!67 = distinct !{!67, !6}
!68 = distinct !{!68, !6}
!69 = distinct !{!69, !6}
!70 = distinct !{!70, !6}
!71 = distinct !{!71, !6}
!72 = distinct !{!72, !6}
!73 = distinct !{!73, !6}
!74 = distinct !{!74, !6}
!75 = distinct !{!75, !6}
!76 = distinct !{!76, !6}
!77 = distinct !{!77, !6}
!78 = distinct !{!78, !6}
!79 = distinct !{!79, !6}
!80 = distinct !{!80, !6}
!81 = distinct !{!81, !6}
!82 = distinct !{!82, !6}
!83 = distinct !{!83, !6}
!84 = distinct !{!84, !6}
!85 = distinct !{!85, !6}
!86 = distinct !{!86, !6}
!87 = distinct !{!87, !6}
!88 = distinct !{!88, !6}
!89 = distinct !{!89, !6}
!90 = distinct !{!90, !6}
!91 = distinct !{!91, !6}
!92 = distinct !{!92, !6}
!93 = distinct !{!93, !6}
!94 = distinct !{!94, !6}
!95 = distinct !{!95, !6}
!96 = distinct !{!96, !6}
!97 = distinct !{!97, !6}
!98 = distinct !{!98, !6}
!99 = distinct !{!99, !6}
!100 = distinct !{!100, !6}
!101 = distinct !{!101, !6}
!102 = distinct !{!102, !6}
!103 = distinct !{!103, !6}
!104 = distinct !{!104, !6}
!105 = distinct !{!105, !6}
!106 = distinct !{!106, !6}
!107 = distinct !{!107, !6}
!108 = distinct !{!108, !6}
!109 = distinct !{!109, !6}
!110 = distinct !{!110, !6}
!111 = distinct !{!111, !6}
!112 = distinct !{!112, !6}
!113 = distinct !{!113, !6}
!114 = distinct !{!114, !6}
!115 = distinct !{!115, !6}
!116 = distinct !{!116, !6}
!117 = distinct !{!117, !6}
!118 = distinct !{!118, !6}
!119 = distinct !{!119, !6}
!120 = distinct !{!120, !6}
!121 = distinct !{!121, !6}
!122 = distinct !{!122, !6}
!123 = distinct !{!123, !6}
!124 = distinct !{!124, !6}
!125 = distinct !{!125, !6}
!126 = distinct !{!126, !6}
!127 = distinct !{!127, !6}
!128 = distinct !{!128, !6}
!129 = distinct !{!129, !6}
!130 = distinct !{!130, !6}
!131 = distinct !{!131, !6}
!132 = distinct !{!132, !6}
!133 = distinct !{!133, !6}
!134 = distinct !{!134, !6}
